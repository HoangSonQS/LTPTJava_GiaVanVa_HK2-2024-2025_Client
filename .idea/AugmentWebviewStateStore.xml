<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="{"currentConversationId":"4ffd5ec4-9880-4140-9bac-ec3cab2c53f7","conversations":{"3ed45d65-5c50-40a3-b502-77d8b4c94d00":{"id":"3ed45d65-5c50-40a3-b502-77d8b4c94d00","createdAtIso":"2025-04-17T15:42:02.366Z","lastInteractedAtIso":"2025-04-18T08:54:14.704Z","chatHistory":[{"status":"success","request_id":"812db843-dcc2-4f40-ad33-8d59491b42a8","request_message":"private void updateLabels(TaiKhoan tk) {\r\n        lb_maTK.setText(tk.getMaTaiKhoan());\r\n        lb_tenDN.setText(tk.getTenDangNhap());\r\n        lb_mk.setText(tk.getMatKhau());\r\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"HH:mm dd/MM/yyyy\");\r\n        lb_tgdn.setText(tk.getThoiGianDangNhap().format(formatter));\r\n        lb_maNV.setText(String.valueOf(tk.getNhanVien()));\r\n\r\n    }\ntôi muốn lấy mã nhân viên từ nhân viên thì thế nào","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"private void updateLabels(TaiKhoan tk) {\r"},{"type":"hardBreak"},{"type":"text","text":"        lb_maTK.setText(tk.getMaTaiKhoan());\r"},{"type":"hardBreak"},{"type":"text","text":"        lb_tenDN.setText(tk.getTenDangNhap());\r"},{"type":"hardBreak"},{"type":"text","text":"        lb_mk.setText(tk.getMatKhau());\r"},{"type":"hardBreak"},{"type":"text","text":"        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"HH:mm dd/MM/yyyy\");\r"},{"type":"hardBreak"},{"type":"text","text":"        lb_tgdn.setText(tk.getThoiGianDangNhap().format(formatter));\r"},{"type":"hardBreak"},{"type":"text","text":"        lb_maNV.setText(String.valueOf(tk.getNhanVien()));\r"},{"type":"hardBreak"},{"type":"text","text":"\r"},{"type":"hardBreak"},{"type":"text","text":"    }"},{"type":"hardBreak"},{"type":"text","text":"tôi muốn lấy mã nhân viên từ nhân viên thì thế nào"}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":0,"type":0,"content":"Để lấy mã nhân viên từ đối tượng nhân viên trong TaiKhoan, bạn cần thay đổi dòng cuối cùng như sau:\n\n<augment_code_snippet path=\"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java\" mode=\"EDIT\">\n```java\nprivate void updateLabels(TaiKhoan tk) {\n        lb_maTK.setText(tk.getMaTaiKhoan());\n        lb_tenDN.setText(tk.getTenDangNhap());\n        lb_mk.setText(tk.getMatKhau());\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"HH:mm dd/MM/yyyy\");\n        lb_tgdn.setText(tk.getThoiGianDangNhap().format(formatter));\n        lb_maNV.setText(tk.getNhanVien().getMaNV());\n}\n```\n</augment_code_snippet>\n\nThay vì sử dụng `String.valueOf(tk.getNhanVien())`, ta sử dụng `tk.getNhanVien().getMaNV()` để lấy trực tiếp mã nhân viên từ đối tượng NhanVien.\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:6070-6789\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:10724-11600\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:13218-13525\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:13525-14203\nsrc/main/java/iuh/fit/controller/BanHang_controller.java:15734-16232\nsrc/main/java/iuh/fit/controller/BanHang_controller.java:27225-28265\nsrc/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:8304-9029\nsrc/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:9029-9776\nsrc/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:11681-12344\nsrc/main/java/iuh/fit/controller/QL_TaiKoan_controller.java:3925-4801\nsrc/main/java/iuh/fit/controller/QL_TaiKoan_controller.java:7597-8361\nsrc/main/java/iuh/fit/controller/QL_TaiKoan_controller.java:8361-9191\nsrc/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java:6029-6589\nsrc/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java:10782-11754\nsrc/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java:11754-12412\nsrc/main/java/iuh/fit/entities/TaiKhoan.java:184-934\nsrc/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java:6396-7272\nsrc/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java:12709-13516\nsrc/main/java/iuh/fit/controller/TraCuu_controller.java:6639-7493\nsrc/main/java/iuh/fit/controller/TraCuu_controller.java:14328-15006\nsrc/main/java/iuh/fit/controller/QL_NhanVien_controller.java:3486-4279\nsrc/main/java/iuh/fit/controller/QL_NhanVien_controller.java:6434-7144\nsrc/main/java/iuh/fit/controller/QL_NhanVien_controller.java:7768-8390\nsrc/main/java/iuh/fit/controller/QL_NhanVien_controller.java:8390-9159\nsrc/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java:6410-7257\nsrc/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java:13021-13747\nsrc/main/resources/fxml/QL_TaiKhoan_gui.fxml:3378-4617\nsrc/main/java/iuh/fit/controller/QL_KhachHang_controller.java:7787-8441\nsrc/main/java/iuh/fit/DataFakerRunner.java:2234-2673\nsrc/main/java/iuh/fit/RMIClientMenu.java:5351-6621"}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"private void updateLabels(TaiKhoan tk) {\r\n        lb_maTK.setText(tk.getMaTaiKhoan());\r\n        lb_tenDN.setText(tk.getTenDangNhap());\r\n        lb_mk.setText(tk.getMatKhau());\r\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"HH:mm dd/MM/yyyy\");\r\n        lb_tgdn.setText(tk.getThoiGianDangNhap().format(formatter));\r\n        lb_maNV.setText(String.valueOf(tk.getNhanVien()));\r\n\r\n    }\ntôi muốn lấy mã nhân viên từ nhân viên thì thế nào"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"D:/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"D:/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Để lấy mã nhân viên từ đối tượng nhân viên trong TaiKhoan, bạn cần thay đổi dòng cuối cùng như sau:\n\n````java path=src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java mode=EDIT\nprivate void updateLabels(TaiKhoan tk) {\n        lb_maTK.setText(tk.getMaTaiKhoan());\n        lb_tenDN.setText(tk.getTenDangNhap());\n        lb_mk.setText(tk.getMatKhau());\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"HH:mm dd/MM/yyyy\");\n        lb_tgdn.setText(tk.getThoiGianDangNhap().format(formatter));\n        lb_maNV.setText(tk.getNhanVien().getMaNV());\n}\n````\n\nThay vì sử dụng `String.valueOf(tk.getNhanVien())`, ta sử dụng `tk.getNhanVien().getMaNV()` để lấy trực tiếp mã nhân viên từ đối tượng NhanVien.\n","workspace_file_chunks":[{"char_start":"6070","char_end":"6789","blob_name":"5b08b53c6bd11ecca4410cae8a2eced61d65e69baf71c5f4935153688836ad91","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"10724","char_end":"11600","blob_name":"5b08b53c6bd11ecca4410cae8a2eced61d65e69baf71c5f4935153688836ad91","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"13218","char_end":"13525","blob_name":"5b08b53c6bd11ecca4410cae8a2eced61d65e69baf71c5f4935153688836ad91","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"13525","char_end":"14203","blob_name":"5b08b53c6bd11ecca4410cae8a2eced61d65e69baf71c5f4935153688836ad91","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"15734","char_end":"16232","blob_name":"7c2c5e5a5a7eb38c48cc0586668dd1b876e826795b0b6db4564c955163a12c09","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/BanHang_controller.java"}},{"char_start":"27225","char_end":"28265","blob_name":"7c2c5e5a5a7eb38c48cc0586668dd1b876e826795b0b6db4564c955163a12c09","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/BanHang_controller.java"}},{"char_start":"8304","char_end":"9029","blob_name":"de5e1d5ea42d5e38c2b6768821fefe0288ad661775529986ce08610376f590ca","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java"}},{"char_start":"9029","char_end":"9776","blob_name":"de5e1d5ea42d5e38c2b6768821fefe0288ad661775529986ce08610376f590ca","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java"}},{"char_start":"11681","char_end":"12344","blob_name":"de5e1d5ea42d5e38c2b6768821fefe0288ad661775529986ce08610376f590ca","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java"}},{"char_start":"3925","char_end":"4801","blob_name":"7c81b8b0dd594e7a189414884a1ac7521b0a672fb075d6eeb4f1a962544b05cb","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/QL_TaiKoan_controller.java"}},{"char_start":"7597","char_end":"8361","blob_name":"7c81b8b0dd594e7a189414884a1ac7521b0a672fb075d6eeb4f1a962544b05cb","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/QL_TaiKoan_controller.java"}},{"char_start":"8361","char_end":"9191","blob_name":"7c81b8b0dd594e7a189414884a1ac7521b0a672fb075d6eeb4f1a962544b05cb","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/QL_TaiKoan_controller.java"}},{"char_start":"6029","char_end":"6589","blob_name":"7a8eb3566f8754ec0484d91bf6b9114ee5bf0b6dc14c44ab95984ce308aead03","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java"}},{"char_start":"10782","char_end":"11754","blob_name":"7a8eb3566f8754ec0484d91bf6b9114ee5bf0b6dc14c44ab95984ce308aead03","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java"}},{"char_start":"11754","char_end":"12412","blob_name":"7a8eb3566f8754ec0484d91bf6b9114ee5bf0b6dc14c44ab95984ce308aead03","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java"}},{"char_start":"184","char_end":"934","blob_name":"51e00afadbc5de9ac4423ff097360325f8cb982542cdbef4111a4794067faa1f","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/entities/TaiKhoan.java"}},{"char_start":"6396","char_end":"7272","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"12709","char_end":"13516","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"6639","char_end":"7493","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"14328","char_end":"15006","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"3486","char_end":"4279","blob_name":"3fd2b5a08697fa181fb7b014195dfa2613a408c3cc56414598004142330d68a1","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/QL_NhanVien_controller.java"}},{"char_start":"6434","char_end":"7144","blob_name":"3fd2b5a08697fa181fb7b014195dfa2613a408c3cc56414598004142330d68a1","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/QL_NhanVien_controller.java"}},{"char_start":"7768","char_end":"8390","blob_name":"3fd2b5a08697fa181fb7b014195dfa2613a408c3cc56414598004142330d68a1","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/QL_NhanVien_controller.java"}},{"char_start":"8390","char_end":"9159","blob_name":"3fd2b5a08697fa181fb7b014195dfa2613a408c3cc56414598004142330d68a1","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/QL_NhanVien_controller.java"}},{"char_start":"6410","char_end":"7257","blob_name":"5fb0b428b1f75978069b60d40ed3db23f64821752faec99a0e93a242401750c9","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}},{"char_start":"13021","char_end":"13747","blob_name":"5fb0b428b1f75978069b60d40ed3db23f64821752faec99a0e93a242401750c9","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}},{"char_start":"3378","char_end":"4617","blob_name":"a6061534e83efac9dc61c74427c4dad7f1bfb70a6b33a116c1900f34a839937f","file":{"repoRoot":"","pathName":"src/main/resources/fxml/QL_TaiKhoan_gui.fxml"}},{"char_start":"7787","char_end":"8441","blob_name":"2ff31287754a4f4bc1a7d38bcaf11797a1186eaf4c6c81c22c54bd098e07e4e5","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/QL_KhachHang_controller.java"}},{"char_start":"2234","char_end":"2673","blob_name":"67b86162aa6d4d76f5272dd80cf1039d3444e71cd90a665bab7d9a14d8f24de5","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/DataFakerRunner.java"}},{"char_start":"5351","char_end":"6621","blob_name":"0b36a576a4d25883c17bb70a312eb2f378364114ad9c3a4dd8fd8d1d60cdfe99","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/RMIClientMenu.java"}}]},{"status":"success","request_id":"4320fe2f-f278-45c5-9e6f-823252725a52","request_message":"cl_maNV.setCellValueFactory(new PropertyValueFactory<>(\"maNV\")); sửa dòng này để lấy mã nhân viên từ nhân viên","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"cl_maNV.setCellValueFactory(new PropertyValueFactory<>(\"maNV\")); sửa dòng này để lấy mã nhân viên từ nhân viên"}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":0,"type":0,"content":"Để lấy mã nhân viên từ đối tượng nhân viên trong bảng, bạn cần sửa lại như sau:\n\n<augment_code_snippet path=\"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java\" mode=\"EDIT\">\n```java\ncl_maNV.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getNhanVien().getMaNV()));\n```\n</augment_code_snippet>\n\nThay vì sử dụng `PropertyValueFactory`, ta tạo một `SimpleStringProperty` mới và lấy mã nhân viên thông qua `getNhanVien().getMaNV()`. Điều này sẽ hiển thị mã nhân viên trong cột tương ứng của bảng.\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:6070-6789\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:10256-10724\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:10724-11600\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:11600-12274\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:12274-13218\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:13525-14203\nsrc/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:6456-7419\nsrc/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:7419-8304\nsrc/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:8304-9029\nsrc/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:9029-9776\nsrc/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:9776-10868\nsrc/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:11681-12344\nsrc/main/java/iuh/fit/controller/QL_TaiKoan_controller.java:7597-8361\nsrc/main/java/iuh/fit/controller/QL_NhanVien_controller.java:8390-9159\nsrc/main/resources/fxml/TraCuuTaiKhoan_gui.fxml:3311-4363\nsrc/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java:11178-11821\nsrc/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java:12709-13516\nsrc/main/resources/fxml/TraCuuNhanVien_gui.fxml:3337-4258\nsrc/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java:10062-10782\nsrc/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java:10782-11754\nsrc/main/java/iuh/fit/controller/TraCuu_controller.java:11471-12075\nsrc/main/java/iuh/fit/controller/TraCuu_controller.java:12075-12734\nsrc/main/java/iuh/fit/controller/TraCuu_controller.java:12734-13382\nsrc/main/java/iuh/fit/controller/TraCuu_controller.java:14328-15006\nsrc/main/java/iuh/fit/entities/TaiKhoan.java:184-934\nsrc/main/resources/fxml/QL_TaiKhoan_gui.fxml:2351-3378\nsrc/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java:11216-12033\nsrc/main/resources/fxml/QL_NhanVien_gui.fxml:2352-3305"}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"cl_maNV.setCellValueFactory(new PropertyValueFactory<>(\"maNV\")); sửa dòng này để lấy mã nhân viên từ nhân viên"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"D:/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"D:/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Để lấy mã nhân viên từ đối tượng nhân viên trong bảng, bạn cần sửa lại như sau:\n\n````java path=src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java mode=EDIT\ncl_maNV.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getNhanVien().getMaNV()));\n````\n\nThay vì sử dụng `PropertyValueFactory`, ta tạo một `SimpleStringProperty` mới và lấy mã nhân viên thông qua `getNhanVien().getMaNV()`. Điều này sẽ hiển thị mã nhân viên trong cột tương ứng của bảng.\n","workspace_file_chunks":[{"char_start":"6070","char_end":"6789","blob_name":"5b08b53c6bd11ecca4410cae8a2eced61d65e69baf71c5f4935153688836ad91","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"10256","char_end":"10724","blob_name":"5b08b53c6bd11ecca4410cae8a2eced61d65e69baf71c5f4935153688836ad91","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"10724","char_end":"11600","blob_name":"5b08b53c6bd11ecca4410cae8a2eced61d65e69baf71c5f4935153688836ad91","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"11600","char_end":"12274","blob_name":"5b08b53c6bd11ecca4410cae8a2eced61d65e69baf71c5f4935153688836ad91","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"12274","char_end":"13218","blob_name":"5b08b53c6bd11ecca4410cae8a2eced61d65e69baf71c5f4935153688836ad91","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"13525","char_end":"14203","blob_name":"5b08b53c6bd11ecca4410cae8a2eced61d65e69baf71c5f4935153688836ad91","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"6456","char_end":"7419","blob_name":"de5e1d5ea42d5e38c2b6768821fefe0288ad661775529986ce08610376f590ca","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java"}},{"char_start":"7419","char_end":"8304","blob_name":"de5e1d5ea42d5e38c2b6768821fefe0288ad661775529986ce08610376f590ca","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java"}},{"char_start":"8304","char_end":"9029","blob_name":"de5e1d5ea42d5e38c2b6768821fefe0288ad661775529986ce08610376f590ca","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java"}},{"char_start":"9029","char_end":"9776","blob_name":"de5e1d5ea42d5e38c2b6768821fefe0288ad661775529986ce08610376f590ca","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java"}},{"char_start":"9776","char_end":"10868","blob_name":"de5e1d5ea42d5e38c2b6768821fefe0288ad661775529986ce08610376f590ca","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java"}},{"char_start":"11681","char_end":"12344","blob_name":"de5e1d5ea42d5e38c2b6768821fefe0288ad661775529986ce08610376f590ca","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java"}},{"char_start":"7597","char_end":"8361","blob_name":"7c81b8b0dd594e7a189414884a1ac7521b0a672fb075d6eeb4f1a962544b05cb","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/QL_TaiKoan_controller.java"}},{"char_start":"8390","char_end":"9159","blob_name":"3fd2b5a08697fa181fb7b014195dfa2613a408c3cc56414598004142330d68a1","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/QL_NhanVien_controller.java"}},{"char_start":"3311","char_end":"4363","blob_name":"90d238635c82b3b73488c3c098eb55e80d92d51e4a7330eaf6903e11bf5b9f24","file":{"repoRoot":"","pathName":"src/main/resources/fxml/TraCuuTaiKhoan_gui.fxml"}},{"char_start":"11178","char_end":"11821","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"12709","char_end":"13516","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"3337","char_end":"4258","blob_name":"413e5c48e7381bffeb80011855a603a5ec0211f7d9284bc2997dd4c2ac175f71","file":{"repoRoot":"","pathName":"src/main/resources/fxml/TraCuuNhanVien_gui.fxml"}},{"char_start":"10062","char_end":"10782","blob_name":"7a8eb3566f8754ec0484d91bf6b9114ee5bf0b6dc14c44ab95984ce308aead03","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java"}},{"char_start":"10782","char_end":"11754","blob_name":"7a8eb3566f8754ec0484d91bf6b9114ee5bf0b6dc14c44ab95984ce308aead03","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java"}},{"char_start":"11471","char_end":"12075","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"12075","char_end":"12734","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"12734","char_end":"13382","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"14328","char_end":"15006","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"184","char_end":"934","blob_name":"51e00afadbc5de9ac4423ff097360325f8cb982542cdbef4111a4794067faa1f","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/entities/TaiKhoan.java"}},{"char_start":"2351","char_end":"3378","blob_name":"a6061534e83efac9dc61c74427c4dad7f1bfb70a6b33a116c1900f34a839937f","file":{"repoRoot":"","pathName":"src/main/resources/fxml/QL_TaiKhoan_gui.fxml"}},{"char_start":"11216","char_end":"12033","blob_name":"5fb0b428b1f75978069b60d40ed3db23f64821752faec99a0e93a242401750c9","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}},{"char_start":"2352","char_end":"3305","blob_name":"c1351c2638e133f02c0b22f51243aa17d2a9ae9fadbc9824302e7e63d1cb58bd","file":{"repoRoot":"","pathName":"src/main/resources/fxml/QL_NhanVien_gui.fxml"}}]},{"status":"success","request_id":"2f7af08d-ae82-4fe0-bdc4-faecb5fb5f14","request_message":"private void setupComboBoxHandler() {\r\n        ccb_GiaoDien.setOnAction(event -> {\r\n            String selectedValue = ccb_GiaoDien.getValue();\r\n            switch (selectedValue) {\r\n                case \"Sản phẩm\":\r\n                    try {\r\n                        App.setRoot(\"TraCuu_gui\");\r\n                    } catch (IOException e) {\r\n                        showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu sản phẩm\");\r\n                    }\r\n                    break;\r\n                case \"Tài khoản\":\r\n                    break;\r\n                case \"Hoá đơn\":\r\n                    try {\r\n                        App.setRoot(\"TraCuuHoaDon_gui\");\r\n                    } catch (IOException e) {\r\n                        showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu hóa đơn\");\r\n                    }\r\n                    break;\r\n                case \"Phiếu nhập\":\r\n                    try {\r\n                        App.setRoot(\"TraCuuPhieuNhap_gui\");\r\n                    } catch (IOException e) {\r\n                        showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu phiếu nhập\");\r\n                    }\r\n                    break;\r\n                case \"Nhân viên\":\r\n                    try {\r\n                        App.setRoot(\"TraCuuNhanVien_gui\");\r\n                    } catch (IOException e) {\r\n                        showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu nhân viên\");\r\n                    }\r\n                    break;\r\n                case \"Khách hàng\":\r\n                    try {\r\n                        App.setRoot(\"TraCuuKhachHang_gui\");\r\n                    } catch (IOException e) {\r\n                        showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu khách hàng\");\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n    }\n hàm này có vấn đề gì không tại sao nó không hoạt động","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"private void setupComboBoxHandler() {\r"},{"type":"hardBreak"},{"type":"text","text":"        ccb_GiaoDien.setOnAction(event -> {\r"},{"type":"hardBreak"},{"type":"text","text":"            String selectedValue = ccb_GiaoDien.getValue();\r"},{"type":"hardBreak"},{"type":"text","text":"            switch (selectedValue) {\r"},{"type":"hardBreak"},{"type":"text","text":"                case \"Sản phẩm\":\r"},{"type":"hardBreak"},{"type":"text","text":"                    try {\r"},{"type":"hardBreak"},{"type":"text","text":"                        App.setRoot(\"TraCuu_gui\");\r"},{"type":"hardBreak"},{"type":"text","text":"                    } catch (IOException e) {\r"},{"type":"hardBreak"},{"type":"text","text":"                        showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu sản phẩm\");\r"},{"type":"hardBreak"},{"type":"text","text":"                    }\r"},{"type":"hardBreak"},{"type":"text","text":"                    break;\r"},{"type":"hardBreak"},{"type":"text","text":"                case \"Tài khoản\":\r"},{"type":"hardBreak"},{"type":"text","text":"                    break;\r"},{"type":"hardBreak"},{"type":"text","text":"                case \"Hoá đơn\":\r"},{"type":"hardBreak"},{"type":"text","text":"                    try {\r"},{"type":"hardBreak"},{"type":"text","text":"                        App.setRoot(\"TraCuuHoaDon_gui\");\r"},{"type":"hardBreak"},{"type":"text","text":"                    } catch (IOException e) {\r"},{"type":"hardBreak"},{"type":"text","text":"                        showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu hóa đơn\");\r"},{"type":"hardBreak"},{"type":"text","text":"                    }\r"},{"type":"hardBreak"},{"type":"text","text":"                    break;\r"},{"type":"hardBreak"},{"type":"text","text":"                case \"Phiếu nhập\":\r"},{"type":"hardBreak"},{"type":"text","text":"                    try {\r"},{"type":"hardBreak"},{"type":"text","text":"                        App.setRoot(\"TraCuuPhieuNhap_gui\");\r"},{"type":"hardBreak"},{"type":"text","text":"                    } catch (IOException e) {\r"},{"type":"hardBreak"},{"type":"text","text":"                        showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu phiếu nhập\");\r"},{"type":"hardBreak"},{"type":"text","text":"                    }\r"},{"type":"hardBreak"},{"type":"text","text":"                    break;\r"},{"type":"hardBreak"},{"type":"text","text":"                case \"Nhân viên\":\r"},{"type":"hardBreak"},{"type":"text","text":"                    try {\r"},{"type":"hardBreak"},{"type":"text","text":"                        App.setRoot(\"TraCuuNhanVien_gui\");\r"},{"type":"hardBreak"},{"type":"text","text":"                    } catch (IOException e) {\r"},{"type":"hardBreak"},{"type":"text","text":"                        showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu nhân viên\");\r"},{"type":"hardBreak"},{"type":"text","text":"                    }\r"},{"type":"hardBreak"},{"type":"text","text":"                    break;\r"},{"type":"hardBreak"},{"type":"text","text":"                case \"Khách hàng\":\r"},{"type":"hardBreak"},{"type":"text","text":"                    try {\r"},{"type":"hardBreak"},{"type":"text","text":"                        App.setRoot(\"TraCuuKhachHang_gui\");\r"},{"type":"hardBreak"},{"type":"text","text":"                    } catch (IOException e) {\r"},{"type":"hardBreak"},{"type":"text","text":"                        showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu khách hàng\");\r"},{"type":"hardBreak"},{"type":"text","text":"                    }\r"},{"type":"hardBreak"},{"type":"text","text":"                    break;\r"},{"type":"hardBreak"},{"type":"text","text":"            }\r"},{"type":"hardBreak"},{"type":"text","text":"        });\r"},{"type":"hardBreak"},{"type":"text","text":"    }"},{"type":"hardBreak"},{"type":"text","text":" hàm này có vấn đề gì không tại sao nó không hoạt động"}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":0,"type":0,"content":"Sau khi xem xét code, tôi thấy có một số vấn đề tiềm ẩn:\n\n1. Case \"Tài khoản\" đang trống (chỉ có break), điều này có nghĩa là khi chọn \"Tài khoản\" sẽ không có hành động nào được thực hiện.\n\n2. Nếu bạn đang ở giao diện TraCuuTaiKhoan và chọn \"Tài khoản\", không cần phải chuyển giao diện.\n\nĐây là cách sửa:\n\n<augment_code_snippet path=\"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java\" mode=\"EDIT\">\n```java\nprivate void setupComboBoxHandler() {\n    ccb_GiaoDien.setOnAction(event -> {\n        String selectedValue = ccb_GiaoDien.getValue();\n        // Không làm gì nếu chọn giao diện hiện tại\n        if (selectedValue.equals(\"Tài khoản\")) {\n            return;\n        }\n        \n        try {\n            switch (selectedValue) {\n                case \"Sản phẩm\":\n                    App.setRoot(\"TraCuu_gui\");\n                    break;\n                case \"Hoá đơn\":\n                    App.setRoot(\"TraCuuHoaDon_gui\");\n                    break;\n                case \"Phiếu nhập\":\n                    App.setRoot(\"TraCuuPhieuNhap_gui\");\n                    break;\n                case \"Nhân viên\":\n                    App.setRoot(\"TraCuuNhanVien_gui\");\n                    break;\n                case \"Khách hàng\":\n                    App.setRoot(\"TraCuuKhachHang_gui\");\n                    break;\n            }\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n            // Reset combobox về giá trị \"Tài khoản\"\n            ccb_GiaoDien.setValue(\"Tài khoản\");\n        }\n    });\n}\n```\n</augment_code_snippet>\n\nNhững cải tiến trong code mới:\n\n1. Kiểm tra sớm nếu người dùng chọn giao diện hiện tại (\"Tài khoản\")\n2. Gom nhóm xử lý try-catch để code gọn gàng hơn\n3. Thông báo lỗi động theo loại giao diện được chọn\n4. Reset combobox về giá trị hiện tại nếu có lỗi\n\nNgoài ra, bạn cần kiểm tra:\n1. `App.setRoot()` có được cài đặt đúng không\n2. Các file FXML có tồn tại và đúng tên không\n3. Đường dẫn đến các file FXML có chính xác không\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:6176-6895\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:7919-8255\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:8255-9411\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:9411-10363\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:11697-12656\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:12656-13546\nsrc/main/java/iuh/fit/controller/TraCuu_controller.java:6639-7493\nsrc/main/java/iuh/fit/controller/TraCuu_controller.java:8499-8834\nsrc/main/java/iuh/fit/controller/TraCuu_controller.java:8834-10052\nsrc/main/java/iuh/fit/controller/TraCuu_controller.java:10052-11004\nsrc/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java:6029-6589\nsrc/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java:7619-7956\nsrc/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java:7956-9048\nsrc/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:9029-9776\nsrc/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:9776-10868\nsrc/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:11681-12344\nsrc/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java:6396-7272\nsrc/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java:8266-8600\nsrc/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java:8600-9760\nsrc/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java:12709-13516\nsrc/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java:8637-9729\nsrc/main/java/iuh/fit/controller/Login_controller.java:2525-3407\nsrc/main/java/iuh/fit/controller/QL_TaiKoan_controller.java:3405-3925"}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"private void setupComboBoxHandler() {\r\n        ccb_GiaoDien.setOnAction(event -> {\r\n            String selectedValue = ccb_GiaoDien.getValue();\r\n            switch (selectedValue) {\r\n                case \"Sản phẩm\":\r\n                    try {\r\n                        App.setRoot(\"TraCuu_gui\");\r\n                    } catch (IOException e) {\r\n                        showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu sản phẩm\");\r\n                    }\r\n                    break;\r\n                case \"Tài khoản\":\r\n                    break;\r\n                case \"Hoá đơn\":\r\n                    try {\r\n                        App.setRoot(\"TraCuuHoaDon_gui\");\r\n                    } catch (IOException e) {\r\n                        showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu hóa đơn\");\r\n                    }\r\n                    break;\r\n                case \"Phiếu nhập\":\r\n                    try {\r\n                        App.setRoot(\"TraCuuPhieuNhap_gui\");\r\n                    } catch (IOException e) {\r\n                        showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu phiếu nhập\");\r\n                    }\r\n                    break;\r\n                case \"Nhân viên\":\r\n                    try {\r\n                        App.setRoot(\"TraCuuNhanVien_gui\");\r\n                    } catch (IOException e) {\r\n                        showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu nhân viên\");\r\n                    }\r\n                    break;\r\n                case \"Khách hàng\":\r\n                    try {\r\n                        App.setRoot(\"TraCuuKhachHang_gui\");\r\n                    } catch (IOException e) {\r\n                        showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu khách hàng\");\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n    }\n hàm này có vấn đề gì không tại sao nó không hoạt động"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"D:/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"D:/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Sau khi xem xét code, tôi thấy có một số vấn đề tiềm ẩn:\n\n1. Case \"Tài khoản\" đang trống (chỉ có break), điều này có nghĩa là khi chọn \"Tài khoản\" sẽ không có hành động nào được thực hiện.\n\n2. Nếu bạn đang ở giao diện TraCuuTaiKhoan và chọn \"Tài khoản\", không cần phải chuyển giao diện.\n\nĐây là cách sửa:\n\n````java path=src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java mode=EDIT\nprivate void setupComboBoxHandler() {\n    ccb_GiaoDien.setOnAction(event -> {\n        String selectedValue = ccb_GiaoDien.getValue();\n        // Không làm gì nếu chọn giao diện hiện tại\n        if (selectedValue.equals(\"Tài khoản\")) {\n            return;\n        }\n        \n        try {\n            switch (selectedValue) {\n                case \"Sản phẩm\":\n                    App.setRoot(\"TraCuu_gui\");\n                    break;\n                case \"Hoá đơn\":\n                    App.setRoot(\"TraCuuHoaDon_gui\");\n                    break;\n                case \"Phiếu nhập\":\n                    App.setRoot(\"TraCuuPhieuNhap_gui\");\n                    break;\n                case \"Nhân viên\":\n                    App.setRoot(\"TraCuuNhanVien_gui\");\n                    break;\n                case \"Khách hàng\":\n                    App.setRoot(\"TraCuuKhachHang_gui\");\n                    break;\n            }\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n            // Reset combobox về giá trị \"Tài khoản\"\n            ccb_GiaoDien.setValue(\"Tài khoản\");\n        }\n    });\n}\n````\n\nNhững cải tiến trong code mới:\n\n1. Kiểm tra sớm nếu người dùng chọn giao diện hiện tại (\"Tài khoản\")\n2. Gom nhóm xử lý try-catch để code gọn gàng hơn\n3. Thông báo lỗi động theo loại giao diện được chọn\n4. Reset combobox về giá trị hiện tại nếu có lỗi\n\nNgoài ra, bạn cần kiểm tra:\n1. `App.setRoot()` có được cài đặt đúng không\n2. Các file FXML có tồn tại và đúng tên không\n3. Đường dẫn đến các file FXML có chính xác không\n","workspace_file_chunks":[{"char_start":"6176","char_end":"6895","blob_name":"129a55ca2e4b127acb386184d392a410ce688e6a60b0f5e7747ca807aa790f46","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"7919","char_end":"8255","blob_name":"129a55ca2e4b127acb386184d392a410ce688e6a60b0f5e7747ca807aa790f46","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"8255","char_end":"9411","blob_name":"129a55ca2e4b127acb386184d392a410ce688e6a60b0f5e7747ca807aa790f46","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"9411","char_end":"10363","blob_name":"129a55ca2e4b127acb386184d392a410ce688e6a60b0f5e7747ca807aa790f46","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"11697","char_end":"12656","blob_name":"129a55ca2e4b127acb386184d392a410ce688e6a60b0f5e7747ca807aa790f46","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"12656","char_end":"13546","blob_name":"129a55ca2e4b127acb386184d392a410ce688e6a60b0f5e7747ca807aa790f46","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"6639","char_end":"7493","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"8499","char_end":"8834","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"8834","char_end":"10052","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"10052","char_end":"11004","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"6029","char_end":"6589","blob_name":"7a8eb3566f8754ec0484d91bf6b9114ee5bf0b6dc14c44ab95984ce308aead03","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java"}},{"char_start":"7619","char_end":"7956","blob_name":"7a8eb3566f8754ec0484d91bf6b9114ee5bf0b6dc14c44ab95984ce308aead03","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java"}},{"char_start":"7956","char_end":"9048","blob_name":"7a8eb3566f8754ec0484d91bf6b9114ee5bf0b6dc14c44ab95984ce308aead03","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java"}},{"char_start":"9029","char_end":"9776","blob_name":"de5e1d5ea42d5e38c2b6768821fefe0288ad661775529986ce08610376f590ca","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java"}},{"char_start":"9776","char_end":"10868","blob_name":"de5e1d5ea42d5e38c2b6768821fefe0288ad661775529986ce08610376f590ca","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java"}},{"char_start":"11681","char_end":"12344","blob_name":"de5e1d5ea42d5e38c2b6768821fefe0288ad661775529986ce08610376f590ca","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java"}},{"char_start":"6396","char_end":"7272","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"8266","char_end":"8600","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"8600","char_end":"9760","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"12709","char_end":"13516","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"8637","char_end":"9729","blob_name":"5fb0b428b1f75978069b60d40ed3db23f64821752faec99a0e93a242401750c9","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}},{"char_start":"2525","char_end":"3407","blob_name":"6806d36fa991cb184e4b82ade77b9b207176900fbf56d080fb13a75eb40c037a","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/Login_controller.java"}},{"char_start":"3405","char_end":"3925","blob_name":"7c81b8b0dd594e7a189414884a1ac7521b0a672fb075d6eeb4f1a962544b05cb","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/QL_TaiKoan_controller.java"}}]},{"status":"success","request_id":"c2a04718-f0b5-4704-88eb-3d1029334735","request_message":"thông chuyển thành công nhưng giao diện không chuyển","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"thông chuyển thành công nhưng giao diện không chuyển"}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":0,"type":0,"content":"Vấn đề có thể nằm ở cách `App.setRoot()` được triển khai. Sau khi xem code trong `App.java`, tôi thấy có thể có vấn đề với biến `primaryScene`. \n\nĐây là cách sửa:\n\n1. Đầu tiên, sửa lại phương thức `setRoot` trong `App.java`:\n\n<augment_code_snippet path=\"src/main/java/iuh/fit/App.java\" mode=\"EDIT\">\n```java\npublic static void setRoot(String fxml) throws IOException {\n    try {\n        FXMLLoader loader = new FXMLLoader(App.class.getResource(\"/fxml/\" + fxml + \".fxml\"));\n        Scene scene = new Scene(loader.load());\n        stage.setScene(scene);\n        stage.show();\n    } catch (IOException ex) {\n        System.err.println(\"Không tìm thấy file: \" + fxml);\n        throw ex;\n    }\n}\n```\n</augment_code_snippet>\n\n2. Hoặc thay vì sử dụng `App.setRoot()`, bạn có thể sửa lại `setupComboBoxHandler` trong controller để chuyển scene trực tiếp:\n\n<augment_code_snippet path=\"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java\" mode=\"EDIT\">\n```java\nprivate void setupComboBoxHandler() {\n    ccb_GiaoDien.setOnAction(event -> {\n        String selectedValue = ccb_GiaoDien.getValue();\n        if (selectedValue.equals(\"Tài khoản\")) {\n            return;\n        }\n        \n        try {\n            String fxmlFile = switch (selectedValue) {\n                case \"Sản phẩm\" -> \"TraCuu_gui\";\n                case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n            };\n            \n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n            Scene scene = new Scene(loader.load());\n            Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n            stage.setScene(scene);\n            stage.show();\n            \n        } catch (Exception e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n            ccb_GiaoDien.setValue(\"Tài khoản\");\n        }\n    });\n}\n```\n</augment_code_snippet>\n\nCách thứ hai sẽ trực tiếp tạo scene mới và set cho stage hiện tại, không phụ thuộc vào `App.setRoot()`. Điều này có thể giúp tránh các vấn đề liên quan đến việc quản lý scene trong `App.java`.\n\nNgoài ra, hãy chắc chắn rằng:\n1. Các file FXML của bạn nằm đúng trong thư mục `/src/main/resources/fxml/`\n2. Tên file FXML khớp chính xác với tên được sử dụng trong code\n3. Các controller được khai báo đúng trong file FXML\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":"src/main/java/iuh/fit/controller/TraCuu_controller.java:5678-6441\nsrc/main/java/iuh/fit/controller/TraCuu_controller.java:6441-6639\nsrc/main/java/iuh/fit/controller/TraCuu_controller.java:8499-8834\nsrc/main/java/iuh/fit/controller/TraCuu_controller.java:8834-10052\nsrc/main/java/iuh/fit/controller/TraCuu_controller.java:10052-11004\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:6176-6895\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:8255-9411\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:9411-10363\nsrc/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java:8600-9760\nsrc/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java:9760-10712\nsrc/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:9776-10868\nsrc/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java:7956-9048\nsrc/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java:8637-9729\nsrc/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java:9729-10743\nsrc/main/java/iuh/fit/App.java:1785-2415\nsrc/main/java/iuh/fit/App.java:2415-3208\nsrc/main/java/iuh/fit/App.java:4667-5635\nsrc/main/java/iuh/fit/App.java:6708-7610\nsrc/main/java/iuh/fit/controller/Login_controller.java:2525-3407\nsrc/main/java/iuh/fit/controller/QL_TaiKoan_controller.java:3405-3925\nsrc/main/java/iuh/fit/controller/BanHang_controller.java:9679-10505"}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"thông chuyển thành công nhưng giao diện không chuyển"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"D:/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"D:/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Vấn đề có thể nằm ở cách `App.setRoot()` được triển khai. Sau khi xem code trong `App.java`, tôi thấy có thể có vấn đề với biến `primaryScene`. \n\nĐây là cách sửa:\n\n1. Đầu tiên, sửa lại phương thức `setRoot` trong `App.java`:\n\n````java path=src/main/java/iuh/fit/App.java mode=EDIT\npublic static void setRoot(String fxml) throws IOException {\n    try {\n        FXMLLoader loader = new FXMLLoader(App.class.getResource(\"/fxml/\" + fxml + \".fxml\"));\n        Scene scene = new Scene(loader.load());\n        stage.setScene(scene);\n        stage.show();\n    } catch (IOException ex) {\n        System.err.println(\"Không tìm thấy file: \" + fxml);\n        throw ex;\n    }\n}\n````\n\n2. Hoặc thay vì sử dụng `App.setRoot()`, bạn có thể sửa lại `setupComboBoxHandler` trong controller để chuyển scene trực tiếp:\n\n````java path=src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java mode=EDIT\nprivate void setupComboBoxHandler() {\n    ccb_GiaoDien.setOnAction(event -> {\n        String selectedValue = ccb_GiaoDien.getValue();\n        if (selectedValue.equals(\"Tài khoản\")) {\n            return;\n        }\n        \n        try {\n            String fxmlFile = switch (selectedValue) {\n                case \"Sản phẩm\" -> \"TraCuu_gui\";\n                case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n            };\n            \n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n            Scene scene = new Scene(loader.load());\n            Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n            stage.setScene(scene);\n            stage.show();\n            \n        } catch (Exception e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n            ccb_GiaoDien.setValue(\"Tài khoản\");\n        }\n    });\n}\n````\n\nCách thứ hai sẽ trực tiếp tạo scene mới và set cho stage hiện tại, không phụ thuộc vào `App.setRoot()`. Điều này có thể giúp tránh các vấn đề liên quan đến việc quản lý scene trong `App.java`.\n\nNgoài ra, hãy chắc chắn rằng:\n1. Các file FXML của bạn nằm đúng trong thư mục `/src/main/resources/fxml/`\n2. Tên file FXML khớp chính xác với tên được sử dụng trong code\n3. Các controller được khai báo đúng trong file FXML\n","workspace_file_chunks":[{"char_start":"5678","char_end":"6441","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"6441","char_end":"6639","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"8499","char_end":"8834","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"8834","char_end":"10052","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"10052","char_end":"11004","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"6176","char_end":"6895","blob_name":"129a55ca2e4b127acb386184d392a410ce688e6a60b0f5e7747ca807aa790f46","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"8255","char_end":"9411","blob_name":"129a55ca2e4b127acb386184d392a410ce688e6a60b0f5e7747ca807aa790f46","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"9411","char_end":"10363","blob_name":"129a55ca2e4b127acb386184d392a410ce688e6a60b0f5e7747ca807aa790f46","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"8600","char_end":"9760","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"9760","char_end":"10712","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"9776","char_end":"10868","blob_name":"de5e1d5ea42d5e38c2b6768821fefe0288ad661775529986ce08610376f590ca","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java"}},{"char_start":"7956","char_end":"9048","blob_name":"7a8eb3566f8754ec0484d91bf6b9114ee5bf0b6dc14c44ab95984ce308aead03","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java"}},{"char_start":"8637","char_end":"9729","blob_name":"5fb0b428b1f75978069b60d40ed3db23f64821752faec99a0e93a242401750c9","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}},{"char_start":"9729","char_end":"10743","blob_name":"5fb0b428b1f75978069b60d40ed3db23f64821752faec99a0e93a242401750c9","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}},{"char_start":"1785","char_end":"2415","blob_name":"687e66a50956974351635699d1c321202d59274df1dbaddc5456de8853129b46","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/App.java"}},{"char_start":"2415","char_end":"3208","blob_name":"687e66a50956974351635699d1c321202d59274df1dbaddc5456de8853129b46","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/App.java"}},{"char_start":"4667","char_end":"5635","blob_name":"687e66a50956974351635699d1c321202d59274df1dbaddc5456de8853129b46","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/App.java"}},{"char_start":"6708","char_end":"7610","blob_name":"687e66a50956974351635699d1c321202d59274df1dbaddc5456de8853129b46","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/App.java"}},{"char_start":"2525","char_end":"3407","blob_name":"6806d36fa991cb184e4b82ade77b9b207176900fbf56d080fb13a75eb40c037a","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/Login_controller.java"}},{"char_start":"3405","char_end":"3925","blob_name":"7c81b8b0dd594e7a189414884a1ac7521b0a672fb075d6eeb4f1a962544b05cb","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/QL_TaiKoan_controller.java"}},{"char_start":"9679","char_end":"10505","blob_name":"7c2c5e5a5a7eb38c48cc0586668dd1b876e826795b0b6db4564c955163a12c09","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/BanHang_controller.java"}}]},{"status":"success","request_id":"b3699c67-1f65-4853-abe0-c66eb82756f5","request_message":"dùng cách hai sửa trong TraCuu_controller","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"dùng cách hai sửa trong TraCuu_controller"}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":0,"type":0,"content":"Tôi sẽ sửa lại phương thức `setupComboBoxHandler` trong `TraCuu_controller.java`:\n\n<augment_code_snippet path=\"src/main/java/iuh/fit/controller/TraCuu_controller.java\" mode=\"EDIT\">\n```java\nprivate void setupComboBoxHandler() {\n    cbb_GiaoDien.setOnAction(event -> {\n        String selectedValue = cbb_GiaoDien.getValue();\n        if (selectedValue.equals(\"Sản phẩm\")) {\n            return;\n        }\n        \n        try {\n            String fxmlFile = switch (selectedValue) {\n                case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n            };\n            \n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n            Scene scene = new Scene(loader.load());\n            Stage stage = (Stage) cbb_GiaoDien.getScene().getWindow();\n            stage.setScene(scene);\n            stage.show();\n            \n        } catch (Exception e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n            cbb_GiaoDien.setValue(\"Sản phẩm\");\n        }\n    });\n}\n```\n</augment_code_snippet>\n\nNhững thay đổi chính:\n1. Sử dụng `cbb_GiaoDien` thay vì `ccb_GiaoDien` (theo tên biến trong controller của bạn)\n2. Kiểm tra nếu đang ở giao diện \"Sản phẩm\" thì không làm gì\n3. Sử dụng switch expression để map tên giao diện với tên file FXML\n4. Trực tiếp tạo scene mới và set cho stage hiện tại\n5. Nếu có lỗi, reset combobox về \"Sản phẩm\"\n\nCách này sẽ trực tiếp chuyển scene mà không cần thông qua `App.setRoot()`, có thể giúp giải quyết vấn đề giao diện không chuyển.\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":"src/main/java/iuh/fit/controller/TraCuu_controller.java:6639-7493\nsrc/main/java/iuh/fit/controller/TraCuu_controller.java:8834-10052\nsrc/main/java/iuh/fit/controller/TraCuu_controller.java:10052-11004\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:6176-6895\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:8255-9411\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:9411-10363\nsrc/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java:6396-7272\nsrc/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java:8600-9760\nsrc/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:9776-10868\nsrc/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java:7956-9048\nsrc/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java:8637-9729\nsrc/main/java/iuh/fit/controller/Login_controller.java:2525-3407\nsrc/main/java/iuh/fit/controller/QL_TaiKoan_controller.java:3405-3925\nsrc/main/resources/fxml/TraCuu_gui.fxml:621-1423\nsrc/main/java/iuh/fit/App.java:6708-7610"}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"dùng cách hai sửa trong TraCuu_controller"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"D:/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"D:/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Tôi sẽ sửa lại phương thức `setupComboBoxHandler` trong `TraCuu_controller.java`:\n\n````java path=src/main/java/iuh/fit/controller/TraCuu_controller.java mode=EDIT\nprivate void setupComboBoxHandler() {\n    cbb_GiaoDien.setOnAction(event -> {\n        String selectedValue = cbb_GiaoDien.getValue();\n        if (selectedValue.equals(\"Sản phẩm\")) {\n            return;\n        }\n        \n        try {\n            String fxmlFile = switch (selectedValue) {\n                case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n            };\n            \n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n            Scene scene = new Scene(loader.load());\n            Stage stage = (Stage) cbb_GiaoDien.getScene().getWindow();\n            stage.setScene(scene);\n            stage.show();\n            \n        } catch (Exception e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n            cbb_GiaoDien.setValue(\"Sản phẩm\");\n        }\n    });\n}\n````\n\nNhững thay đổi chính:\n1. Sử dụng `cbb_GiaoDien` thay vì `ccb_GiaoDien` (theo tên biến trong controller của bạn)\n2. Kiểm tra nếu đang ở giao diện \"Sản phẩm\" thì không làm gì\n3. Sử dụng switch expression để map tên giao diện với tên file FXML\n4. Trực tiếp tạo scene mới và set cho stage hiện tại\n5. Nếu có lỗi, reset combobox về \"Sản phẩm\"\n\nCách này sẽ trực tiếp chuyển scene mà không cần thông qua `App.setRoot()`, có thể giúp giải quyết vấn đề giao diện không chuyển.\n","workspace_file_chunks":[{"char_start":"6639","char_end":"7493","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"8834","char_end":"10052","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"10052","char_end":"11004","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"6176","char_end":"6895","blob_name":"129a55ca2e4b127acb386184d392a410ce688e6a60b0f5e7747ca807aa790f46","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"8255","char_end":"9411","blob_name":"129a55ca2e4b127acb386184d392a410ce688e6a60b0f5e7747ca807aa790f46","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"9411","char_end":"10363","blob_name":"129a55ca2e4b127acb386184d392a410ce688e6a60b0f5e7747ca807aa790f46","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"6396","char_end":"7272","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"8600","char_end":"9760","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"9776","char_end":"10868","blob_name":"de5e1d5ea42d5e38c2b6768821fefe0288ad661775529986ce08610376f590ca","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java"}},{"char_start":"7956","char_end":"9048","blob_name":"7a8eb3566f8754ec0484d91bf6b9114ee5bf0b6dc14c44ab95984ce308aead03","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java"}},{"char_start":"8637","char_end":"9729","blob_name":"5fb0b428b1f75978069b60d40ed3db23f64821752faec99a0e93a242401750c9","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}},{"char_start":"2525","char_end":"3407","blob_name":"6806d36fa991cb184e4b82ade77b9b207176900fbf56d080fb13a75eb40c037a","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/Login_controller.java"}},{"char_start":"3405","char_end":"3925","blob_name":"7c81b8b0dd594e7a189414884a1ac7521b0a672fb075d6eeb4f1a962544b05cb","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/QL_TaiKoan_controller.java"}},{"char_start":"621","char_end":"1423","blob_name":"09bb95eb8f94fae8ac6294431e4cf0b19e192ffaa69242b52e434d60c232867f","file":{"repoRoot":"","pathName":"src/main/resources/fxml/TraCuu_gui.fxml"}},{"char_start":"6708","char_end":"7610","blob_name":"687e66a50956974351635699d1c321202d59274df1dbaddc5456de8853129b46","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/App.java"}}]},{"status":"cancelled","request_id":"310d2f43-f1f5-478e-bb69-a9142d597dd0","request_message":"sửa lớp này","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"sửa lớp này"}]}]},"mentioned_items":[],"structured_output_nodes":[],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"sửa lớp này"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"D:/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"D:/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Tôi sẽ sửa lại toàn bộ lớp `TraCuu_controller.java` để đảm bảo hoạt động tốt:\n\n````java path=src/main/java/iuh/fit/controller/TraCuu_controller.java mode=EDIT\npublic class TraCuu_controller implements Initializable {\n    @FXML\n    private ComboBox<String> cbb_GiaoDien;\n    @FXML\n    private Label lb_maSP;\n    @FXML\n    private Label lb_tenSP;\n    @FXML\n    private Label lb_ncc;\n    @FXML\n    private Label lb_slt;\n    @FXML\n    private Label lb_giaNhap;\n    @FXML\n    private Label lb_giaBan;\n    @FXML\n    private Label lb_nsx;\n    @FXML\n    private Label lb_hsd;\n    @FXML\n    private Label lb_tgcn;\n    @FXML\n    private Label lb_loaiHang;\n    @FXML\n    private TextField txt_maSP;\n    @FXML\n    private TableView<SanPham> tableSanPham;\n\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n        // Khởi tạo ComboBox\n        initializeComboBox();\n\n        // Khởi tạo các cột cho bảng\n        initializeTableColumns();\n\n        // Load dữ liệu vào bảng\n        loadTableData();\n\n        // Thêm sự kiện click cho bảng\n        setupTableClickEvent();\n    }\n\n    private void initializeComboBox() {\n        ObservableList<String> list = FXCollections.observableArrayList(\n            \"Sản phẩm\", \"Tài khoản\", \"Hoá đơn\", \"Phiếu nhập\", \"Nhân viên\", \"Khách hàng\"\n        );\n        cbb_GiaoDien.","workspace_file_chunks":[{"char_start":"6639","char_end":"7493","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"8834","char_end":"10052","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"10052","char_end":"11004","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"6396","char_end":"7272","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"8600","char_end":"9760","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"9776","char_end":"10868","blob_name":"de5e1d5ea42d5e38c2b6768821fefe0288ad661775529986ce08610376f590ca","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java"}},{"char_start":"6176","char_end":"6895","blob_name":"129a55ca2e4b127acb386184d392a410ce688e6a60b0f5e7747ca807aa790f46","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"8255","char_end":"9411","blob_name":"129a55ca2e4b127acb386184d392a410ce688e6a60b0f5e7747ca807aa790f46","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"6410","char_end":"7257","blob_name":"5fb0b428b1f75978069b60d40ed3db23f64821752faec99a0e93a242401750c9","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}},{"char_start":"8637","char_end":"9729","blob_name":"5fb0b428b1f75978069b60d40ed3db23f64821752faec99a0e93a242401750c9","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}},{"char_start":"7956","char_end":"9048","blob_name":"7a8eb3566f8754ec0484d91bf6b9114ee5bf0b6dc14c44ab95984ce308aead03","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java"}},{"char_start":"9048","char_end":"10062","blob_name":"7a8eb3566f8754ec0484d91bf6b9114ee5bf0b6dc14c44ab95984ce308aead03","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java"}}]},{"request_id":"4160cb9b-ed8b-4804-b817-9c78b64e5098","status":"cancelled","chatItemType":"agentic-turn-delimiter"},{"status":"success","request_id":"2676e6b5-6ddd-4026-9fe2-f8c6ceb821fd","request_message":"sửa trong TraCuuHoaDon","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"sửa trong TraCuuHoaDon"}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":0,"type":0,"content":"Tôi sẽ sửa lại phương thức `setupComboBoxHandler` trong `TraCuuHoaDon_controller.java`:\n\n<augment_code_snippet path=\"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java\" mode=\"EDIT\">\n```java\nprivate void setupComboBoxHandler() {\n    ccb_GiaoDien.setOnAction(event -> {\n        String selectedValue = ccb_GiaoDien.getValue();\n        if (selectedValue.equals(\"Hoá đơn\")) {\n            return;\n        }\n        \n        try {\n            String fxmlFile = switch (selectedValue) {\n                case \"Sản phẩm\" -> \"TraCuu_gui\";\n                case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n            };\n            \n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n            Scene scene = new Scene(loader.load());\n            Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n            stage.setScene(scene);\n            stage.show();\n            \n        } catch (Exception e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n            ccb_GiaoDien.setValue(\"Hoá đơn\");\n        }\n    });\n}\n```\n</augment_code_snippet>\n\nNhững thay đổi chính:\n1. Kiểm tra nếu đang ở giao diện \"Hoá đơn\" thì không làm gì\n2. Sử dụng switch expression để map tên giao diện với tên file FXML\n3. Trực tiếp tạo scene mới và set cho stage hiện tại\n4. Nếu có lỗi, reset combobox về \"Hoá đơn\"\n\nCách này sẽ trực tiếp chuyển scene mà không cần thông qua `App.setRoot()`, giúp giải quyết vấn đề giao diện không chuyển.\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java:6396-7272\nsrc/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java:7272-8266\nsrc/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java:8600-9760\nsrc/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java:9760-10712\nsrc/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java:11821-12709\nsrc/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java:12709-13516\nsrc/main/java/iuh/fit/controller/TraCuu_controller.java:6639-7493\nsrc/main/java/iuh/fit/controller/TraCuu_controller.java:8834-10052\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:8255-9411\nsrc/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java:7956-9048\nsrc/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java:6410-7257\nsrc/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java:8637-9729"}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"sửa trong TraCuuHoaDon"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"D:/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"D:/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Tôi sẽ sửa lại phương thức `setupComboBoxHandler` trong `TraCuuHoaDon_controller.java`:\n\n````java path=src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java mode=EDIT\nprivate void setupComboBoxHandler() {\n    ccb_GiaoDien.setOnAction(event -> {\n        String selectedValue = ccb_GiaoDien.getValue();\n        if (selectedValue.equals(\"Hoá đơn\")) {\n            return;\n        }\n        \n        try {\n            String fxmlFile = switch (selectedValue) {\n                case \"Sản phẩm\" -> \"TraCuu_gui\";\n                case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n            };\n            \n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n            Scene scene = new Scene(loader.load());\n            Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n            stage.setScene(scene);\n            stage.show();\n            \n        } catch (Exception e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n            ccb_GiaoDien.setValue(\"Hoá đơn\");\n        }\n    });\n}\n````\n\nNhững thay đổi chính:\n1. Kiểm tra nếu đang ở giao diện \"Hoá đơn\" thì không làm gì\n2. Sử dụng switch expression để map tên giao diện với tên file FXML\n3. Trực tiếp tạo scene mới và set cho stage hiện tại\n4. Nếu có lỗi, reset combobox về \"Hoá đơn\"\n\nCách này sẽ trực tiếp chuyển scene mà không cần thông qua `App.setRoot()`, giúp giải quyết vấn đề giao diện không chuyển.\n","workspace_file_chunks":[{"char_start":"6396","char_end":"7272","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"7272","char_end":"8266","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"8600","char_end":"9760","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"9760","char_end":"10712","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"11821","char_end":"12709","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"12709","char_end":"13516","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"6639","char_end":"7493","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"8834","char_end":"10052","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"8255","char_end":"9411","blob_name":"129a55ca2e4b127acb386184d392a410ce688e6a60b0f5e7747ca807aa790f46","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"7956","char_end":"9048","blob_name":"7a8eb3566f8754ec0484d91bf6b9114ee5bf0b6dc14c44ab95984ce308aead03","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java"}},{"char_start":"6410","char_end":"7257","blob_name":"5fb0b428b1f75978069b60d40ed3db23f64821752faec99a0e93a242401750c9","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}},{"char_start":"8637","char_end":"9729","blob_name":"5fb0b428b1f75978069b60d40ed3db23f64821752faec99a0e93a242401750c9","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}}]},{"status":"success","request_id":"7a1dc10c-2a7f-4fd4-97d2-eb642786c1d1","request_message":"sửa trong TraCuuKhachHang","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"sửa trong TraCuuKhachHang"}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":0,"type":0,"content":"Tôi sẽ sửa lại phương thức `setupComboBoxHandler` trong `TraCuuKhachHang_controller.java`:\n\n<augment_code_snippet path=\"src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java\" mode=\"EDIT\">\n```java\nprivate void setupComboBoxHandler() {\n    ccb_GiaoDien.setOnAction(event -> {\n        String selectedValue = ccb_GiaoDien.getValue();\n        if (selectedValue.equals(\"Khách hàng\")) {\n            return;\n        }\n        \n        try {\n            String fxmlFile = switch (selectedValue) {\n                case \"Sản phẩm\" -> \"TraCuu_gui\";\n                case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n            };\n            \n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n            Scene scene = new Scene(loader.load());\n            Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n            stage.setScene(scene);\n            stage.show();\n            \n        } catch (Exception e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n            ccb_GiaoDien.setValue(\"Khách hàng\");\n        }\n    });\n}\n```\n</augment_code_snippet>\n\nNhững thay đổi chính:\n1. Kiểm tra nếu đang ở giao diện \"Khách hàng\" thì không làm gì\n2. Sử dụng switch expression để map tên giao diện với tên file FXML\n3. Trực tiếp tạo scene mới và set cho stage hiện tại\n4. Nếu có lỗi, reset combobox về \"Khách hàng\"\n\nCách này sẽ trực tiếp chuyển scene mà không cần thông qua `App.setRoot()`, giúp giải quyết vấn đề giao diện không chuyển.\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":"src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java:6029-6589\nsrc/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java:6589-7619\nsrc/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java:7619-7956\nsrc/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java:7956-9048\nsrc/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java:10782-11754\nsrc/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java:11754-12412\nsrc/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java:6396-7272\nsrc/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java:8600-9760\nsrc/main/java/iuh/fit/controller/TraCuu_controller.java:6639-7493\nsrc/main/java/iuh/fit/controller/TraCuu_controller.java:8834-10052\nsrc/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:9776-10868\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:8255-9411\nsrc/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java:8637-9729"}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"sửa trong TraCuuKhachHang"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"D:/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"D:/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Tôi sẽ sửa lại phương thức `setupComboBoxHandler` trong `TraCuuKhachHang_controller.java`:\n\n````java path=src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java mode=EDIT\nprivate void setupComboBoxHandler() {\n    ccb_GiaoDien.setOnAction(event -> {\n        String selectedValue = ccb_GiaoDien.getValue();\n        if (selectedValue.equals(\"Khách hàng\")) {\n            return;\n        }\n        \n        try {\n            String fxmlFile = switch (selectedValue) {\n                case \"Sản phẩm\" -> \"TraCuu_gui\";\n                case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n            };\n            \n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n            Scene scene = new Scene(loader.load());\n            Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n            stage.setScene(scene);\n            stage.show();\n            \n        } catch (Exception e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n            ccb_GiaoDien.setValue(\"Khách hàng\");\n        }\n    });\n}\n````\n\nNhững thay đổi chính:\n1. Kiểm tra nếu đang ở giao diện \"Khách hàng\" thì không làm gì\n2. Sử dụng switch expression để map tên giao diện với tên file FXML\n3. Trực tiếp tạo scene mới và set cho stage hiện tại\n4. Nếu có lỗi, reset combobox về \"Khách hàng\"\n\nCách này sẽ trực tiếp chuyển scene mà không cần thông qua `App.setRoot()`, giúp giải quyết vấn đề giao diện không chuyển.\n","workspace_file_chunks":[{"char_start":"6029","char_end":"6589","blob_name":"7a8eb3566f8754ec0484d91bf6b9114ee5bf0b6dc14c44ab95984ce308aead03","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java"}},{"char_start":"6589","char_end":"7619","blob_name":"7a8eb3566f8754ec0484d91bf6b9114ee5bf0b6dc14c44ab95984ce308aead03","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java"}},{"char_start":"7619","char_end":"7956","blob_name":"7a8eb3566f8754ec0484d91bf6b9114ee5bf0b6dc14c44ab95984ce308aead03","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java"}},{"char_start":"7956","char_end":"9048","blob_name":"7a8eb3566f8754ec0484d91bf6b9114ee5bf0b6dc14c44ab95984ce308aead03","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java"}},{"char_start":"10782","char_end":"11754","blob_name":"7a8eb3566f8754ec0484d91bf6b9114ee5bf0b6dc14c44ab95984ce308aead03","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java"}},{"char_start":"11754","char_end":"12412","blob_name":"7a8eb3566f8754ec0484d91bf6b9114ee5bf0b6dc14c44ab95984ce308aead03","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java"}},{"char_start":"6396","char_end":"7272","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"8600","char_end":"9760","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"6639","char_end":"7493","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"8834","char_end":"10052","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"9776","char_end":"10868","blob_name":"de5e1d5ea42d5e38c2b6768821fefe0288ad661775529986ce08610376f590ca","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java"}},{"char_start":"8255","char_end":"9411","blob_name":"129a55ca2e4b127acb386184d392a410ce688e6a60b0f5e7747ca807aa790f46","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"8637","char_end":"9729","blob_name":"5fb0b428b1f75978069b60d40ed3db23f64821752faec99a0e93a242401750c9","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}}]},{"status":"success","request_id":"b005e532-dcdd-4862-82d3-3b487fe64cc5","request_message":"sửa trong TraCuuPhieuNha","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"sửa trong TraCuuPhieuNha"}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":0,"type":0,"content":"Tôi sẽ sửa lại phương thức `setupComboBoxHandler` trong `TraCuuPhieuNhap_controller.java`:\n\n<augment_code_snippet path=\"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java\" mode=\"EDIT\">\n```java\nprivate void setupComboBoxHandler() {\n    ccb_GiaoDien.setOnAction(event -> {\n        String selectedValue = ccb_GiaoDien.getValue();\n        if (selectedValue.equals(\"Phiếu nhập\")) {\n            return;\n        }\n        \n        try {\n            String fxmlFile = switch (selectedValue) {\n                case \"Sản phẩm\" -> \"TraCuu_gui\";\n                case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n            };\n            \n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n            Scene scene = new Scene(loader.load());\n            Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n            stage.setScene(scene);\n            stage.show();\n            \n        } catch (Exception e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n            ccb_GiaoDien.setValue(\"Phiếu nhập\");\n        }\n    });\n}\n```\n</augment_code_snippet>\n\nNhững thay đổi chính:\n1. Kiểm tra nếu đang ở giao diện \"Phiếu nhập\" thì không làm gì\n2. Sử dụng switch expression để map tên giao diện với tên file FXML\n3. Trực tiếp tạo scene mới và set cho stage hiện tại\n4. Nếu có lỗi, reset combobox về \"Phiếu nhập\"\n\nCách này sẽ trực tiếp chuyển scene mà không cần thông qua `App.setRoot()`, giúp giải quyết vấn đề giao diện không chuyển.\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java:916-1788\nsrc/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java:3634-4557\nsrc/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java:5499-6410\nsrc/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java:6410-7257\nsrc/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java:7257-8300\nsrc/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java:8637-9729\nsrc/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java:12034-12713\nsrc/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java:12713-13493\nsrc/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java:13493-13972\nsrc/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java:6396-7272\nsrc/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java:8600-9760\nsrc/main/java/iuh/fit/controller/TraCuu_controller.java:6639-7493\nsrc/main/java/iuh/fit/controller/QL_PhieuNhap_controller.java:3349-4101\nsrc/main/resources/fxml/TraCuuPhieuNhap_gui.fxml:3321-4257\nsrc/main/resources/fxml/TraCuuPhieuNhap_gui.fxml:9948-11356\nsrc/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:9776-10868"}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"sửa trong TraCuuPhieuNha"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"D:/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"D:/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Tôi sẽ sửa lại phương thức `setupComboBoxHandler` trong `TraCuuPhieuNhap_controller.java`:\n\n````java path=src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java mode=EDIT\nprivate void setupComboBoxHandler() {\n    ccb_GiaoDien.setOnAction(event -> {\n        String selectedValue = ccb_GiaoDien.getValue();\n        if (selectedValue.equals(\"Phiếu nhập\")) {\n            return;\n        }\n        \n        try {\n            String fxmlFile = switch (selectedValue) {\n                case \"Sản phẩm\" -> \"TraCuu_gui\";\n                case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n            };\n            \n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n            Scene scene = new Scene(loader.load());\n            Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n            stage.setScene(scene);\n            stage.show();\n            \n        } catch (Exception e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n            ccb_GiaoDien.setValue(\"Phiếu nhập\");\n        }\n    });\n}\n````\n\nNhững thay đổi chính:\n1. Kiểm tra nếu đang ở giao diện \"Phiếu nhập\" thì không làm gì\n2. Sử dụng switch expression để map tên giao diện với tên file FXML\n3. Trực tiếp tạo scene mới và set cho stage hiện tại\n4. Nếu có lỗi, reset combobox về \"Phiếu nhập\"\n\nCách này sẽ trực tiếp chuyển scene mà không cần thông qua `App.setRoot()`, giúp giải quyết vấn đề giao diện không chuyển.\n","workspace_file_chunks":[{"char_start":"916","char_end":"1788","blob_name":"feb653ebc691fa43c2c838f2b6521c8661554f408b809dad6c985724287ebac7","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}},{"char_start":"3634","char_end":"4557","blob_name":"feb653ebc691fa43c2c838f2b6521c8661554f408b809dad6c985724287ebac7","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}},{"char_start":"5499","char_end":"6410","blob_name":"feb653ebc691fa43c2c838f2b6521c8661554f408b809dad6c985724287ebac7","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}},{"char_start":"6410","char_end":"7257","blob_name":"feb653ebc691fa43c2c838f2b6521c8661554f408b809dad6c985724287ebac7","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}},{"char_start":"7257","char_end":"8300","blob_name":"feb653ebc691fa43c2c838f2b6521c8661554f408b809dad6c985724287ebac7","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}},{"char_start":"8637","char_end":"9729","blob_name":"feb653ebc691fa43c2c838f2b6521c8661554f408b809dad6c985724287ebac7","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}},{"char_start":"12034","char_end":"12713","blob_name":"feb653ebc691fa43c2c838f2b6521c8661554f408b809dad6c985724287ebac7","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}},{"char_start":"12713","char_end":"13493","blob_name":"feb653ebc691fa43c2c838f2b6521c8661554f408b809dad6c985724287ebac7","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}},{"char_start":"13493","char_end":"13972","blob_name":"feb653ebc691fa43c2c838f2b6521c8661554f408b809dad6c985724287ebac7","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}},{"char_start":"6396","char_end":"7272","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"8600","char_end":"9760","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"6639","char_end":"7493","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"3349","char_end":"4101","blob_name":"f37da03f4e786409acafd63d89e3dc7df80d2627fef711c339aeab8b28a8260d","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/QL_PhieuNhap_controller.java"}},{"char_start":"3321","char_end":"4257","blob_name":"2d24bebf4f064a80afc9a9479eb583df4c9f881fc26b100752ba8f6b44d1b3e3","file":{"repoRoot":"","pathName":"src/main/resources/fxml/TraCuuPhieuNhap_gui.fxml"}},{"char_start":"9948","char_end":"11356","blob_name":"2d24bebf4f064a80afc9a9479eb583df4c9f881fc26b100752ba8f6b44d1b3e3","file":{"repoRoot":"","pathName":"src/main/resources/fxml/TraCuuPhieuNhap_gui.fxml"}},{"char_start":"9776","char_end":"10868","blob_name":"de5e1d5ea42d5e38c2b6768821fefe0288ad661775529986ce08610376f590ca","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java"}}]},{"status":"success","request_id":"6d0074e4-24c6-4307-8cfd-b9fc33d5e17a","request_message":"sửa trong TraCuuTaiKhoan","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"sửa trong TraCuuTaiKhoan"}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":0,"type":0,"content":"Tôi sẽ sửa lại phương thức `setupComboBoxHandler` trong `TraCuuTaiKhoan_controller.java`:\n\n<augment_code_snippet path=\"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java\" mode=\"EDIT\">\n```java\nprivate void setupComboBoxHandler() {\n    ccb_GiaoDien.setOnAction(event -> {\n        String selectedValue = ccb_GiaoDien.getValue();\n        if (selectedValue.equals(\"Tài khoản\")) {\n            return;\n        }\n        \n        try {\n            String fxmlFile = switch (selectedValue) {\n                case \"Sản phẩm\" -> \"TraCuu_gui\";\n                case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n            };\n            \n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n            Scene scene = new Scene(loader.load());\n            Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n            stage.setScene(scene);\n            stage.show();\n            \n        } catch (Exception e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n            ccb_GiaoDien.setValue(\"Tài khoản\");\n        }\n    });\n}\n```\n</augment_code_snippet>\n\nNhững thay đổi chính:\n1. Kiểm tra nếu đang ở giao diện \"Tài khoản\" thì không làm gì\n2. Sử dụng switch expression để map tên giao diện với tên file FXML\n3. Trực tiếp tạo scene mới và set cho stage hiện tại\n4. Nếu có lỗi, reset combobox về \"Tài khoản\"\n\nCách này sẽ trực tiếp chuyển scene mà không cần thông qua `App.setRoot()`, giúp giải quyết vấn đề giao diện không chuyển.\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:5499-6261\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:6261-6980\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:6980-8004\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:8340-9417\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:11260-12219\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:12219-13109\nsrc/main/java/iuh/fit/controller/TraCuu_controller.java:8834-10052\nsrc/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java:6410-7257\nsrc/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java:8637-9729\nsrc/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java:7956-9048\nsrc/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:9776-10868\nsrc/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java:8600-9760\nsrc/main/java/iuh/fit/controller/Login_controller.java:2525-3407"}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"sửa trong TraCuuTaiKhoan"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"D:/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"D:/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Tôi sẽ sửa lại phương thức `setupComboBoxHandler` trong `TraCuuTaiKhoan_controller.java`:\n\n````java path=src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java mode=EDIT\nprivate void setupComboBoxHandler() {\n    ccb_GiaoDien.setOnAction(event -> {\n        String selectedValue = ccb_GiaoDien.getValue();\n        if (selectedValue.equals(\"Tài khoản\")) {\n            return;\n        }\n        \n        try {\n            String fxmlFile = switch (selectedValue) {\n                case \"Sản phẩm\" -> \"TraCuu_gui\";\n                case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n            };\n            \n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n            Scene scene = new Scene(loader.load());\n            Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n            stage.setScene(scene);\n            stage.show();\n            \n        } catch (Exception e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n            ccb_GiaoDien.setValue(\"Tài khoản\");\n        }\n    });\n}\n````\n\nNhững thay đổi chính:\n1. Kiểm tra nếu đang ở giao diện \"Tài khoản\" thì không làm gì\n2. Sử dụng switch expression để map tên giao diện với tên file FXML\n3. Trực tiếp tạo scene mới và set cho stage hiện tại\n4. Nếu có lỗi, reset combobox về \"Tài khoản\"\n\nCách này sẽ trực tiếp chuyển scene mà không cần thông qua `App.setRoot()`, giúp giải quyết vấn đề giao diện không chuyển.\n","workspace_file_chunks":[{"char_start":"5499","char_end":"6261","blob_name":"7db176e12790ce69f77d61ad07d8ed1c7be7cb98cee332be728358def09084ae","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"6261","char_end":"6980","blob_name":"7db176e12790ce69f77d61ad07d8ed1c7be7cb98cee332be728358def09084ae","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"6980","char_end":"8004","blob_name":"7db176e12790ce69f77d61ad07d8ed1c7be7cb98cee332be728358def09084ae","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"8340","char_end":"9417","blob_name":"7db176e12790ce69f77d61ad07d8ed1c7be7cb98cee332be728358def09084ae","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"11260","char_end":"12219","blob_name":"7db176e12790ce69f77d61ad07d8ed1c7be7cb98cee332be728358def09084ae","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"12219","char_end":"13109","blob_name":"7db176e12790ce69f77d61ad07d8ed1c7be7cb98cee332be728358def09084ae","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"8834","char_end":"10052","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"6410","char_end":"7257","blob_name":"feb653ebc691fa43c2c838f2b6521c8661554f408b809dad6c985724287ebac7","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}},{"char_start":"8637","char_end":"9729","blob_name":"feb653ebc691fa43c2c838f2b6521c8661554f408b809dad6c985724287ebac7","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}},{"char_start":"7956","char_end":"9048","blob_name":"7a8eb3566f8754ec0484d91bf6b9114ee5bf0b6dc14c44ab95984ce308aead03","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java"}},{"char_start":"9776","char_end":"10868","blob_name":"de5e1d5ea42d5e38c2b6768821fefe0288ad661775529986ce08610376f590ca","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java"}},{"char_start":"8600","char_end":"9760","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"2525","char_end":"3407","blob_name":"6806d36fa991cb184e4b82ade77b9b207176900fbf56d080fb13a75eb40c037a","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/Login_controller.java"}}]},{"status":"success","request_id":"01becfa5-5f7f-4805-ba14-09d0928e6c48","request_message":"sửa trong TraCuuNhanVien","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"sửa trong TraCuuNhanVien"}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":0,"type":0,"content":"Tôi sẽ sửa lại phương thức `setupComboBoxHandler` trong `TraCuuNhanVien_controller.java`:\n\n<augment_code_snippet path=\"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java\" mode=\"EDIT\">\n```java\nprivate void setupComboBoxHandler() {\n    ccb_GiaoDien.setOnAction(event -> {\n        String selectedValue = ccb_GiaoDien.getValue();\n        if (selectedValue.equals(\"Nhân viên\")) {\n            return;\n        }\n        \n        try {\n            String fxmlFile = switch (selectedValue) {\n                case \"Sản phẩm\" -> \"TraCuu_gui\";\n                case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n            };\n            \n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n            Scene scene = new Scene(loader.load());\n            Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n            stage.setScene(scene);\n            stage.show();\n            \n        } catch (Exception e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n            ccb_GiaoDien.setValue(\"Nhân viên\");\n        }\n    });\n}\n```\n</augment_code_snippet>\n\nNhững thay đổi chính:\n1. Kiểm tra nếu đang ở giao diện \"Nhân viên\" thì không làm gì\n2. Sử dụng switch expression để map tên giao diện với tên file FXML\n3. Trực tiếp tạo scene mới và set cho stage hiện tại\n4. Nếu có lỗi, reset combobox về \"Nhân viên\"\n\nCách này sẽ trực tiếp chuyển scene mà không cần thông qua `App.setRoot()`, giúp giải quyết vấn đề giao diện không chuyển.\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:5694-6456\nsrc/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:8304-9029\nsrc/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:9029-9776\nsrc/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:9776-10868\nsrc/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:10868-11681\nsrc/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:11681-12344\nsrc/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java:8340-9417\nsrc/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java:6410-7257\nsrc/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java:8637-9729\nsrc/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java:7956-9048\nsrc/main/java/iuh/fit/controller/TraCuu_controller.java:8834-10052\nsrc/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java:8600-9760\nsrc/main/java/iuh/fit/controller/QL_NhanVien_controller.java:3486-4279"}],"seen_state":"unseen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"sửa trong TraCuuNhanVien"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"D:/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"D:/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Tôi sẽ sửa lại phương thức `setupComboBoxHandler` trong `TraCuuNhanVien_controller.java`:\n\n````java path=src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java mode=EDIT\nprivate void setupComboBoxHandler() {\n    ccb_GiaoDien.setOnAction(event -> {\n        String selectedValue = ccb_GiaoDien.getValue();\n        if (selectedValue.equals(\"Nhân viên\")) {\n            return;\n        }\n        \n        try {\n            String fxmlFile = switch (selectedValue) {\n                case \"Sản phẩm\" -> \"TraCuu_gui\";\n                case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n            };\n            \n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n            Scene scene = new Scene(loader.load());\n            Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n            stage.setScene(scene);\n            stage.show();\n            \n        } catch (Exception e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n            ccb_GiaoDien.setValue(\"Nhân viên\");\n        }\n    });\n}\n````\n\nNhững thay đổi chính:\n1. Kiểm tra nếu đang ở giao diện \"Nhân viên\" thì không làm gì\n2. Sử dụng switch expression để map tên giao diện với tên file FXML\n3. Trực tiếp tạo scene mới và set cho stage hiện tại\n4. Nếu có lỗi, reset combobox về \"Nhân viên\"\n\nCách này sẽ trực tiếp chuyển scene mà không cần thông qua `App.setRoot()`, giúp giải quyết vấn đề giao diện không chuyển.\n","workspace_file_chunks":[{"char_start":"5694","char_end":"6456","blob_name":"de5e1d5ea42d5e38c2b6768821fefe0288ad661775529986ce08610376f590ca","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java"}},{"char_start":"8304","char_end":"9029","blob_name":"de5e1d5ea42d5e38c2b6768821fefe0288ad661775529986ce08610376f590ca","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java"}},{"char_start":"9029","char_end":"9776","blob_name":"de5e1d5ea42d5e38c2b6768821fefe0288ad661775529986ce08610376f590ca","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java"}},{"char_start":"9776","char_end":"10868","blob_name":"de5e1d5ea42d5e38c2b6768821fefe0288ad661775529986ce08610376f590ca","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java"}},{"char_start":"10868","char_end":"11681","blob_name":"de5e1d5ea42d5e38c2b6768821fefe0288ad661775529986ce08610376f590ca","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java"}},{"char_start":"11681","char_end":"12344","blob_name":"de5e1d5ea42d5e38c2b6768821fefe0288ad661775529986ce08610376f590ca","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java"}},{"char_start":"8340","char_end":"9417","blob_name":"7db176e12790ce69f77d61ad07d8ed1c7be7cb98cee332be728358def09084ae","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java"}},{"char_start":"6410","char_end":"7257","blob_name":"feb653ebc691fa43c2c838f2b6521c8661554f408b809dad6c985724287ebac7","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}},{"char_start":"8637","char_end":"9729","blob_name":"feb653ebc691fa43c2c838f2b6521c8661554f408b809dad6c985724287ebac7","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java"}},{"char_start":"7956","char_end":"9048","blob_name":"7a8eb3566f8754ec0484d91bf6b9114ee5bf0b6dc14c44ab95984ce308aead03","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java"}},{"char_start":"8834","char_end":"10052","blob_name":"711a5a3e130d93f19309f5d4d0594f2b6c72d5f79621d2d7a1238b9362445c3e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuu_controller.java"}},{"char_start":"8600","char_end":"9760","blob_name":"cb1db5f0e69e55212dece30605d0cb154a9840d25f4974e53ac736aeada3cf5e","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java"}},{"char_start":"3486","char_end":"4279","blob_name":"3fd2b5a08697fa181fb7b014195dfa2613a408c3cc56414598004142330d68a1","file":{"repoRoot":"","pathName":"src/main/java/iuh/fit/controller/QL_NhanVien_controller.java"}}]}],"feedbackStates":{"temp-fe-1f7476d2-31e2-46b1-891f-8961a1a98659":{"selectedRating":0,"feedbackNote":""},"temp-fe-bc139fe0-1ccb-4fd7-af43-eedfcacc6d20":{"selectedRating":0,"feedbackNote":""},"temp-fe-f0132b7b-c3cd-4d6b-8240-9cd28c447b66":{"selectedRating":0,"feedbackNote":""},"temp-fe-52fee058-5928-414f-8fc8-60e299448137":{"selectedRating":0,"feedbackNote":""},"temp-fe-33ce079d-f133-45f0-b940-9b274ecd71f3":{"selectedRating":0,"feedbackNote":""},"temp-fe-a7062817-0d8e-43e0-9ce1-c31f0100a7b9":{"selectedRating":0,"feedbackNote":""},"temp-fe-d7a7dcf6-b4c2-4c27-a305-d74513fdd041":{"selectedRating":0,"feedbackNote":""},"temp-fe-466d6d2f-4e39-44de-9a24-d2d97fc081ee":{"selectedRating":0,"feedbackNote":""},"temp-fe-3d5e3645-aa7d-4534-9857-145d6a5d78b4":{"selectedRating":0,"feedbackNote":""},"temp-fe-96238674-6fbe-40e4-a164-2b40159467fd":{"selectedRating":0,"feedbackNote":""},"temp-fe-6fd252f7-f812-468c-a5bf-201d01817d47":{"selectedRating":0,"feedbackNote":""}},"toolUseStates":{},"draftExchange":{"request_message":"","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph"}]},"mentioned_items":[],"status":"draft"},"requestIds":[],"isPinned":false,"isShareable":true,"extraData":{"hasDirtyEdits":false},"personaType":0,"draftActiveContextIds":["C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client/src/main/java/iuh/fit/controller/QL_HoaDon_controller.java","C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Clientfalsefalse"]},"4ffd5ec4-9880-4140-9bac-ec3cab2c53f7":{"id":"4ffd5ec4-9880-4140-9bac-ec3cab2c53f7","name":"Welcome to the Augment Agent","createdAtIso":"2025-04-18T08:54:19.962Z","lastInteractedAtIso":"2025-04-18T09:32:52.049Z","chatHistory":[{"request_id":"2c50df4f-7731-432c-b432-24ab09ffde9c","uuid":"eb976e12-1937-49c1-8cf6-a8995b8b095a","chatItemType":"agentic-checkpoint-delimiter","status":"success","fromTimestamp":0,"toTimestamp":1744966459963,"seen_state":"seen"},{"status":"success","request_id":"1f75ab93-9a35-418d-97e9-ef8f1c712d22","request_message":"hey","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"hey"}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":0,"type":0,"content":"Hello! How can I help you today? I see you have a file open in your workspace. Is there something specific you'd like me to help you with regarding your Java project?\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"hey"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Hello! How can I help you today? I see you have a file open in your workspace. Is there something specific you'd like me to help you with regarding your Java project?\n","workspace_file_chunks":[]},{"request_id":"4868349d-ad22-4c8f-87b8-6a45647e5b7d","status":"cancelled","chatItemType":"agentic-turn-delimiter"},{"status":"success","request_id":"1f271c94-3772-4bfe-bfcd-1794f81c7cf7","request_message":"HÃY SỬA CÁC Nối giao diện lẫn nhau trong toàn bộ project","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"HÃY SỬA CÁC Nối giao diện lẫn nhau trong toàn bộ project"}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_013tL4KxbFkj36pnoWewEMoe","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Find all controller classes that have navigation methods (like toQLSanPham, toQLTaiKhoan, etc.) and the loadFXML method implementation. Also find the main structure of the application and how FXML files are loaded.\"}"}},{"id":0,"type":0,"content":"I'll help you fix the navigation between interfaces throughout the project. Let me first understand the current structure of your project and how the interfaces are connected.\n\n## Information Gathering\n\nLet me examine the codebase to understand how the interfaces are currently connected.\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"HÃY SỬA CÁC Nối giao diện lẫn nhau trong toàn bộ project"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"I'll help you fix the navigation between interfaces throughout the project. Let me first understand the current structure of your project and how the interfaces are connected.\n\n## Information Gathering\n\nLet me examine the codebase to understand how the interfaces are currently connected.\n","workspace_file_chunks":[]},{"status":"success","request_id":"420d66c4-884d-4776-a4b9-5c909ee0790f","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01Gvud9iXC981CsveJAUsoPr","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Find all implementations of the loadFXML method in different controller classes. I need to see how this method is implemented in each controller.\"}"}},{"id":0,"type":0,"content":"Let me get more information about the loadFXML method implementation in the controllers:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: src/main/java/iuh/fit/controller/QL_SanPham_controller.java\n...\n\n    @FXML\n    private Label lb_thongKe;\n\n    @FXML\n    private Label lb_thongKeDoanhThu;\n\n    @FXML\n    private Label lb_thongKeSanPham;\n\n    @FXML\n    private Label lb_timKiem;\n\n    @FXML\n    private TableColumn<?, ?> lc_giaNhap;\n\n    @FXML\n    private Pane p_HoaDon;\n\n    @FXML\n    private Pane p_gioHang;\n\n    @FXML\n    private Pane p_hoaDon;\n\n    @FXML\n    private Pane p_nhanVien;\n\n    @FXML\n    private Pane p_phieuNhap;\n\n    @FXML\n    private Pane p_quanLy;\n\n    @FXML\n    private Pane p_sanPham;\n\n    @FXML\n    private Pane p_taiKhoan;\n\n    @FXML\n    private Pane p_thongKe;\n\n    @FXML\n    private Pane p_thongKeDoanhThu;\n\n    @FXML\n    private Pane p_thongKeSanPham;\n\n    @FXML\n    private Pane p_timKiem;\n\n    @FXML\n    private VBox quanLySubMenuList;\n\n    @FXML\n    private VBox quanLySubVBox;\n\n    @FXML\n    private TableView<SanPham> table_SP;\n\n    @FXML\n    private VBox thongKeSubMenuList;\n...\n\n    @FXML\n    void handleTimKiemClick(MouseEvent event) {\n        try {\n            loadFXML(\"/fxml/TraCuu_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu!\");\n        }\n    }\n\n    @FXML\n    void moGiaoDienTimKiemSP(MouseEvent event) {\n        try {\n            loadFXML(\"/fxml/TraCuu_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu!\");\n        }\n    }\n...\n\n    @FXML\n    void toQLPhieuNhap(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý phiếu nhập\n            loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n        }\n    }\n\n    @FXML\n    void toQLSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý sản phẩm\n            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n        }\n    }\n...\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê sản phẩm\n            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n        }\n    }\n    private void showAlert(Alert.AlertType alertType, String title, String content) {\n        Alert alert = new Alert(alertType);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n\n\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n...\nPath: src/main/java/iuh/fit/controller/QL_TaiKoan_controller.java\n...\n\n    @FXML\n    private VBox vBox;\n\n    @FXML\n    void handleGioHangClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleQuanLyClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleThongKeClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleTimKiemClick(MouseEvent event) {\n        try {\n            loadFXML(\"/fxml/TraCuu_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu!\");\n        }\n    }\n...\nPath: src/main/java/iuh/fit/controller/QL_KhachHang_controller.java\n...\n\n    @FXML\n    void toQLPhieuNhap(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý phiếu nhập\n            loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n        }\n    }\n\n    @FXML\n    void toQLSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý sản phẩm\n            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n        }\n    }\n...\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê sản phẩm\n            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n        }\n    }\n    private void showAlert(Alert.AlertType alertType, String title, String content) {\n        Alert alert = new Alert(alertType);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n\n    @FXML\n    void moGiaoDienTimKiemKH(MouseEvent event) {\n        try{\n            loadFXML(\"/fxml/TraCuuKhachHang_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tìm kiếm khách hàng!\");\n        }\n    }\n...\nPath: src/main/java/iuh/fit/controller/QL_HoaDon_controller.java\n...\n\n    @FXML\n    void handleGioHangClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleQuanLyClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleThongKeClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleTimKiemClick(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện tìm kiếm\n            loadFXML(\"/fxml/TraCuu_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu!\");\n        }\n    }\n\n    @FXML\n    void toQLHoaDon(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý hóa đơn\n            loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý hóa đơn!\");\n        }\n    }\n...\n\n    @FXML\n    void toQLPhieuNhap(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý phếu nhập\n            loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n        }\n    }\n\n    @FXML\n    void toQLSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý sản phẩm\n            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n        }\n    }\n...\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê sản phẩm\n            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n        }\n    }\n    private void showAlert(Alert.AlertType alertType, String title, String content) {\n        Alert alert = new Alert(alertType);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n...\nPath: src/main/java/iuh/fit/controller/QL_PhieuNhap_controller.java\n...\n\n    @FXML\n    private TextField txt_MaPhieuNhap;\n\n    @FXML\n    private TextField txt_SoSP;\n\n    @FXML\n    private TextField txt_TenNV;\n\n    @FXML\n    private TextField txt_ThanhTien;\n\n    @FXML\n    private TextField txt_ThoiGian;\n\n    @FXML\n    private VBox vBox;\n\n    @FXML\n    void handleGioHangClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleQuanLyClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleThongKeClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleTimKiemClick(MouseEvent event) {\n        try {\n            loadFXML(\"/fxml/TraCuu_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu!\");\n        }\n    }\n...\n\n    @FXML\n    void toQLSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý sản phẩm\n            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n        }\n    }\n\n    @FXML\n    void toQLTaiKhoan(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý tài khoản\n            loadFXML(\"/fxml/QL_TaiKhoan_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý tài khoản!\");\n        }\n    }\n...\nPath: src/main/java/iuh/fit/controller/BanHang_controller.java\n...\n\n    @FXML\n    void toQLPhieuNhap(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý phiếu nhập\n            loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n        }\n    }\n\n    @FXML\n    void toQLSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý sản phẩm\n            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n        }\n    }\n...\nPath: src/main/java/iuh/fit/App.java\npackage iuh.fit;\n\nimport java.io.IOException;\nimport java.net.URL;\nimport java.time.LocalDateTime;\nimport java.util.List;\n\nimport iuh.fit.daos.HoaDon_dao;\nimport iuh.fit.daos.SanPham_dao;\nimport iuh.fit.daos.TaiKhoan_dao;\nimport iuh.fit.entities.HoaDon;\nimport iuh.fit.entities.SanPham;\nimport iuh.fit.entities.TaiKhoan;\nimport javafx.application.Application;\nimport javafx.application.Platform;\nimport javafx.fxml.FXMLLoader;\nimport javafx.geometry.Rectangle2D;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.stage.Modality;\nimport javafx.stage.Screen;\nimport javafx.stage.Stage;\nimport jakarta.persistence.EntityManagerFactory;\nimport jakarta.persistence.Persistence;\n\n/**\n * Lớp chính của ứng dụng\n */\npublic class App extends Application {\n//    public static final int widthModalLogin = 600;\n//    public static final int heightModalLogin = 400;\n    public static Stage stage;\n    public static Scene primaryScene;\n    public static String user;\n    public static String ma;\n    public static TaiKhoan taiKhoan;\n    public static String maTraCuu;\n\n    // Biến để theo dõi trạng thái đăng nhập\n    private static boolean loginScreenOpened = false;\n\n    public static void main(String[] args) {\n        System.setProperty(\"javafx.preloader\", AppPreloader.class.getName());\n        launch(args);\n    }\n\n    @Override\n    public void init() throws Exception {\n        try {\n            // Kết nối đến cơ sở dữ liệu\n            EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"mariadb\");\n\n            // Kiểm tra và cập nhật dữ liệu khi khởi động ứng dụng\n            checkSanPham();\n        } catch (Exception e) {\n            System.err.println(\"Lỗi khi khởi tạo ứng dụng: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n        System.out.println(\"App.start() called\");\n        stage = primaryStage;\n\n        // Thiết lập sự kiện khi đóng cửa sổ chính\n        stage.setOnCloseRequest(event -> {\n            System.out.println(\"Application is closing\");\n            Platform.exit();\n            System.exit(0);\n        });\n\n        // Chỉ mở giao diện đăng nhập nếu không có splash screen\n        if (AppPreloader.splashStage == null) {\n            System.out.println(\"No splash screen detected, opening login screen directly\");\n//            openLoginGUI();\n        }\n    }\n\n    /**\n     * Mở giao diện chính của ứng dụng\n     */\n    public static void openMainGUI() throws IOException {\n        try {\n            // Load the main GUI\n            Parent root = FXMLLoader.load(App.class.getResource(\"/fxml/BanHang_gui.fxml\"));\n            Scene scene = new Scene(root);\n            scene.getStylesheets().add(App.class.getResource(\"/styles/menu.css\").toExternalForm());\n\n            // Set the new scene for the stage\n            stage.setScene(scene);\n            stage.setMaximized(true);\n            stage.setTitle(\"Hệ thống quản lý bán hàng\");\n\n            // Show the main GUI\n            stage.show();\n        } catch (IOException ex) {\n            System.err.println(\"Error loading BanHang_gui.fxml: \" + ex.getMessage());\n            throw ex;\n        }\n    }\n...\n\n//            if (loginFxmlUrl == null) {\n//                System.err.println(\"Login_gui.fxml not found! Trying to open BanHang_gui.fxml instead.\");\n//                openMainGUI();\n//                return;\n//            }\n\n            // Load giao diện đăng nhập\n            FXMLLoader fxmlLoader = new FXMLLoader(loginFxmlUrl);\n            Parent root = fxmlLoader.load();\n\n            // Tạo scene mới\n            Scene scene = new Scene(root);\n            stage.setScene(scene);\n            stage.setTitle(\"Đăng nhập\");\n            stage.setMaximized(true);\n\n            // Đặt kích thước và vị trí của cửa sổ\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n            stage.setX((primaryScreenBounds.getWidth() - root.prefWidth(-1)) / 2);\n            stage.setY((primaryScreenBounds.getHeight() - root.prefHeight(-1)) / 2);\n...\nPath: src/main/java/iuh/fit/MainApp.java\npackage iuh.fit;\n\nimport javafx.application.Application;\nimport javafx.fxml.FXMLLoader;\nimport javafx.geometry.Rectangle2D;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.stage.Screen;\nimport javafx.stage.Stage;\n\n/**\n * Lớp để chạy ứng dụng trực tiếp từ màn hình bán hàng\n */\npublic class MainApp extends Application {\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n        try {\n            System.out.println(\"MainApp: Loading BanHang_gui.fxml\");\n            \n            // Load giao diện bán hàng\n            Parent root = FXMLLoader.load(getClass().getResource(\"/fxml/BanHang_gui.fxml\"));\n            Scene scene = new Scene(root);\n            \n            // Thêm stylesheet nếu có\n            try {\n                scene.getStylesheets().add(getClass().getResource(\"/styles/menu.css\").toExternalForm());\n            } catch (Exception e) {\n                System.err.println(\"MainApp: Could not load stylesheet: \" + e.getMessage());\n            }\n            \n            // Thiết lập stage\n            primaryStage.setScene(scene);\n            primaryStage.setTitle(\"Hệ thống quản lý bán hàng\");\n            \n            // Thiết lập kích thước stage theo màn hình chính\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n            primaryStage.setX(primaryScreenBounds.getMinX());\n            primaryStage.setY(primaryScreenBounds.getMinY());\n            primaryStage.setWidth(primaryScreenBounds.getWidth());\n            primaryStage.setHeight(primaryScreenBounds.getHeight());\n            \n            // Hiển thị stage\n            primaryStage.show();\n            \n            System.out.println(\"MainApp: Main screen opened successfully\");\n        } catch (Exception e) {\n            System.err.println(\"MainApp: Error loading BanHang_gui.fxml: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n...\nPath: src/main/java/iuh/fit/controller/Login_controller.java\npackage iuh.fit.controller;\n\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.ResourceBundle;\n\nimport iuh.fit.App;\nimport iuh.fit.daos.TaiKhoan_dao;\nimport iuh.fit.entities.TaiKhoan;\nimport javafx.event.ActionEvent;\nimport javafx.fxml.FXML;\nimport javafx.fxml.Initializable;\nimport javafx.scene.control.Alert;\nimport javafx.scene.control.Alert.AlertType;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.Hyperlink;\nimport javafx.scene.control.PasswordField;\nimport javafx.scene.control.TextField;\nimport javafx.scene.input.KeyCode;\nimport javafx.scene.input.KeyEvent;\n\n/**\n * Controller cho màn hình đăng nhập\n */\npublic class Login_controller implements Initializable {\n\n    @FXML\n    private TextField txtUsername;\n\n    @FXML\n    private PasswordField txtPassword;\n\n    @FXML\n    private Button btnLogin;\n\n    @FXML\n    private Hyperlink linkForgotPassword;\n\n    private TaiKhoan_dao taiKhoanDao;\n\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n        // Khởi tạo DAO\n        taiKhoanDao = new TaiKhoan_dao();\n\n        // Thêm sự kiện Enter cho các trường nhập liệu\n        txtUsername.setOnKeyPressed(this::handleEnterKey);\n        txtPassword.setOnKeyPressed(this::handleEnterKey);\n    }\n\n    /**\n     * Xử lý sự kiện nhấn Enter\n     */\n    private void handleEnterKey(KeyEvent event) {\n        if (event.getCode() == KeyCode.ENTER) {\n            login();\n        }\n    }\n\n    /**\n     * Xử lý sự kiện nhấn nút đăng nhập\n     */\n    @FXML\n    private void handleLoginButtonAction(ActionEvent event) {\n        login();\n    }\n\n    /**\n     * Xử lý sự kiện quên mật khẩu\n     */\n    @FXML\n    private void handleForgotPasswordAction(ActionEvent event) {\n        try {\n            App.openQuenMK();\n        } catch (IOException e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quên mật khẩu!\");\n        }\n    }\n\n    /**\n     * Thực hiện đăng nhập\n     */\n    private void login() {\n        String username = txtUsername.getText().trim();\n        String password = txtPassword.getText().trim();\n\n        // Validate input\n        if (username.isEmpty()) {\n            showAlert(AlertType.WARNING, \"Cảnh báo\", \"Vui lòng nhập tên đăng nhập!\");\n            txtUsername.requestFocus();\n            return;\n        }\n\n        if (password.isEmpty()) {\n            showAlert(AlertType.WARNING, \"Cảnh báo\", \"Vui lòng nhập mật khẩu!\");\n            txtPassword.requestFocus();\n            return;\n        }\n\n        // Check login\n        try {\n            TaiKhoan taiKhoan = taiKhoanDao.findByUsernameandPassword(username, password);\n            if (taiKhoan != null) {\n                // Save login information\n                App.taiKhoan = taiKhoan;\n                App.user = username;\n                App.ma = taiKhoan.getMaTaiKhoan();\n                txtUsername.getScene().getWindow().hide();\n                // Close the login screen and open the main GUI\n                App.openMainGUI();\n            } else {\n                showAlert(AlertType.ERROR, \"Lỗi đăng nhập\", \"Tên đăng nhập hoặc mật khẩu không đúng!\");\n                txtPassword.clear();\n                txtPassword.requestFocus();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\"...","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_013tL4KxbFkj36pnoWewEMoe"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Let me get more information about the loadFXML method implementation in the controllers:\n","workspace_file_chunks":[]},{"status":"success","request_id":"5ac2c121-ebb4-4271-9660-c073b217609f","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01HE1PGeCyHumvvBG9TXXDXU","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Find all navigation methods in the controllers that use App.setRoot or similar methods instead of loadFXML. Also find any base controller or utility class that might be used for navigation.\"}"}},{"id":0,"type":0,"content":"Let me check for any additional navigation methods in the controllers:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: src/main/java/iuh/fit/controller/QL_SanPham_controller.java\n...\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê sản phẩm\n            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n        }\n    }\n    private void showAlert(Alert.AlertType alertType, String title, String content) {\n        Alert alert = new Alert(alertType);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n\n\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n...\nPath: src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Phiếu nhập\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/QL_TaiKoan_controller.java\n...\n\n    @FXML\n    private VBox vBox;\n\n    @FXML\n    void handleGioHangClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleQuanLyClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleThongKeClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleTimKiemClick(MouseEvent event) {\n        try {\n            loadFXML(\"/fxml/TraCuu_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu!\");\n        }\n    }\n...\n\n    @FXML\n    void xoaNV(MouseEvent event) {\n\n    }\n\n    @FXML\n    void xoaTrang(MouseEvent event) {\n\n    }\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n...\nPath: src/main/java/iuh/fit/controller/QL_KhachHang_controller.java\n...\n\n    @FXML\n    void handleQuanLyClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleThongKeClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleTimKiemClick(MouseEvent event) {\n        try {\n            loadFXML(\"/fxml/TraCuu_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu!\");\n        }\n    }\n\n\n    @FXML\n    void toQLHoaDon(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý hóa đơn\n            loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý hóa đơn!\");\n        }\n    }\n...\n\n    @FXML\n    void toQLPhieuNhap(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý phiếu nhập\n            loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n        }\n    }\n\n    @FXML\n    void toQLSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý sản phẩm\n            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n        }\n    }\n...\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê sản phẩm\n            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n        }\n    }\n    private void showAlert(Alert.AlertType alertType, String title, String content) {\n        Alert alert = new Alert(alertType);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n\n    @FXML\n    void moGiaoDienTimKiemKH(MouseEvent event) {\n        try{\n            loadFXML(\"/fxml/TraCuuKhachHang_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tìm kiếm khách hàng!\");\n        }\n    }\n...\n\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n...\nPath: src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Khách hàng\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/QL_HoaDon_controller.java\n...\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê sản phẩm\n            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n        }\n    }\n    private void showAlert(Alert.AlertType alertType, String title, String content) {\n        Alert alert = new Alert(alertType);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n...\nPath: src/main/java/iuh/fit/controller/QL_PhieuNhap_controller.java\n...\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n    private void loadTableData() {\n        try {\n            // Tạo DAO object\n            PhieuNhapHang_dao pNhapDAO = new PhieuNhapHang_dao();\n\n            // Xóa dữ liệu cũ trong table\n            table_PNhap.getItems().clear();\n...\nPath: src/main/java/iuh/fit/controller/TraCuu_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        cbb_GiaoDien.setOnAction(event -> {\n            String selectedValue = cbb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Sản phẩm\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) cbb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/Login_controller.java\npackage iuh.fit.controller;\n\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.ResourceBundle;\n\nimport iuh.fit.App;\nimport iuh.fit.daos.TaiKhoan_dao;\nimport iuh.fit.entities.TaiKhoan;\nimport javafx.event.ActionEvent;\nimport javafx.fxml.FXML;\nimport javafx.fxml.Initializable;\nimport javafx.scene.control.Alert;\nimport javafx.scene.control.Alert.AlertType;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.Hyperlink;\nimport javafx.scene.control.PasswordField;\nimport javafx.scene.control.TextField;\nimport javafx.scene.input.KeyCode;\nimport javafx.scene.input.KeyEvent;\n\n/**\n * Controller cho màn hình đăng nhập\n */\npublic class Login_controller implements Initializable {\n\n    @FXML\n    private TextField txtUsername;\n\n    @FXML\n    private PasswordField txtPassword;\n\n    @FXML\n    private Button btnLogin;\n\n    @FXML\n    private Hyperlink linkForgotPassword;\n\n    private TaiKhoan_dao taiKhoanDao;\n\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n        // Khởi tạo DAO\n        taiKhoanDao = new TaiKhoan_dao();\n\n        // Thêm sự kiện Enter cho các trường nhập liệu\n        txtUsername.setOnKeyPressed(this::handleEnterKey);\n        txtPassword.setOnKeyPressed(this::handleEnterKey);\n    }\n\n    /**\n     * Xử lý sự kiện nhấn Enter\n     */\n    private void handleEnterKey(KeyEvent event) {\n        if (event.getCode() == KeyCode.ENTER) {\n            login();\n        }\n    }\n\n    /**\n     * Xử lý sự kiện nhấn nút đăng nhập\n     */\n    @FXML\n    private void handleLoginButtonAction(ActionEvent event) {\n        login();\n    }\n\n    /**\n     * Xử lý sự kiện quên mật khẩu\n     */\n    @FXML\n    private void handleForgotPasswordAction(ActionEvent event) {\n        try {\n            App.openQuenMK();\n        } catch (IOException e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quên mật khẩu!\");\n        }\n    }\n\n    /**\n     * Thực hiện đăng nhập\n     */\n    private void login() {\n        String username = txtUsername.getText().trim();\n        String password = txtPassword.getText().trim();\n\n        // Validate input\n        if (username.isEmpty()) {\n            showAlert(AlertType.WARNING, \"Cảnh báo\", \"Vui lòng nhập tên đăng nhập!\");\n            txtUsername.requestFocus();\n            return;\n        }\n\n        if (password.isEmpty()) {\n            showAlert(AlertType.WARNING, \"Cảnh báo\", \"Vui lòng nhập mật khẩu!\");\n            txtPassword.requestFocus();\n            return;\n        }\n\n        // Check login\n        try {\n            TaiKhoan taiKhoan = taiKhoanDao.findByUsernameandPassword(username, password);\n            if (taiKhoan != null) {\n                // Save login information\n                App.taiKhoan = taiKhoan;\n                App.user = username;\n                App.ma = taiKhoan.getMaTaiKhoan();\n                txtUsername.getScene().getWindow().hide();\n                // Close the login screen and open the main GUI\n                App.openMainGUI();\n            } else {\n                showAlert(AlertType.ERROR, \"Lỗi đăng nhập\", \"Tên đăng nhập hoặc mật khẩu không đúng!\");\n                txtPassword.clear();\n                txtPassword.requestFocus();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Lỗi khi đăng nhập: \" + e.getMessage());\n        }\n    }\n...\nPath: src/main/java/iuh/fit/controller/BanHang_controller.java\n...\n\n    @FXML\n    void toQLKhachHang(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý khách hàng\n            loadFXML(\"/fxml/QL_KhachHang_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý khách hàng!\");\n        }\n    }\n\n    @FXML\n    void toQLNhanVien(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý nhân viên\n            loadFXML(\"/fxml/QL_NhanVien_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý nhân viên!\");\n        }\n    }\n\n    @FXML\n    void toQLPhieuNhap(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý phiếu nhập\n            loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n        }\n    }\n\n    @FXML\n    void toQLSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý sản phẩm\n            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n        }\n    }\n\n    @FXML\n    void toQLTaiKhoan(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý tài khoản\n            loadFXML(\"/fxml/QL_TaiKhoan_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý tài khoản!\");\n        }\n    }\n\n    @FXML\n    void toTKDoanhThu(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê doanh thu\n            loadFXML(\"/fxml/ThongKeDoanhThu_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê doanh thu!\");\n        }\n    }\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê sản phẩm\n            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n        }\n    }\n...\n\n    /**\n     * Hiển thị thông báo\n     */\n    private void showAlert(AlertType alertType, String title, String content) {\n        Alert alert = new Alert(alertType);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n\n    /**\n     * Load FXML file\n     */\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n...\nPath: src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java\n...\n\n    private void loadTableData() {\n        try {\n            NhanVien_dao nhanVienDao = new NhanVien_dao();\n            List<NhanVien> dsnv = nhanVienDao.readAllNhanVien();\n            ObservableList<NhanVien> data = FXCollections.observableArrayList(dsnv);\n            tableNhanVien.setItems(data);\n        } catch (Exception e) {\n            showError(\"Lỗi\", \"Không thể tải dữ liệu nhân viên\");\n        }\n    }\n\n    private void setupTableClickEvent() {\n        tableNhanVien.setOnMouseClicked(event -> {\n            NhanVien selectedNhanVien = tableNhanVien.getSelectionModel().getSelectedItem();\n            if (selectedNhanVien != null) {\n                updateLabels(selectedNhanVien);\n            }\n        });\n    }\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Nhân viên\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n                \n            } catch (Exception e) {\n                showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n                ccb_GiaoDien.setValue(\"Nhân viên\");\n            }\n        });\n    }\n\n    @FXML\n    void timKiem(MouseEvent event) {\n        String maNhanVien = txt_maNV.getText();\n        App.maTraCuu = maNhanVien;\n        NhanVien nhanVien = new NhanVien_dao().readNhanVien(maNhanVien);\n        lb_maNV.setText(nhanVien.getMaNV());\n        lb_tenNV.setText(nhanVien.getTenNV());\n        lb_cccd.setText(nhanVien.getCccd());\n        lb_sdt.setText(nhanVien.getSdt());\n        lb_email.setText(nhanVien.getEmail());\n        lb_diaChi.setText(nhanVien.getDiaChi());\n        lb_chucVu.setText(nhanVien.getChucVu().toString());\n        lb_ngaySinh.setText(nhanVien.getNgaySinh().format(dateFormatter));\n        highlightMatchingRow(maNhanVien);\n    }\n...\n\n    @FXML\n    void toQLHoaDon(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyHoaDon_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý hóa đơn\");\n        }\n    }\n\n    @FXML\n    void toQLKhachHang(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyKhachHang_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý khách hàng\");\n        }\n    }\n\n    @FXML\n    void toQLNhanVien(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyNhanVien_gui\");\n        } catch (IOException e) {\n            showErro...","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01Gvud9iXC981CsveJAUsoPr"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Let me check for any additional navigation methods in the controllers:\n","workspace_file_chunks":[]},{"status":"success","request_id":"f0287184-7e58-4865-a833-21a572d26e20","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01A2AYKyJZgBnAAuk53DLSMu","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Find any abstract controller or base controller class that might be used as a parent for other controllers. Also check for any utility class that might be used for navigation.\"}"}},{"id":0,"type":0,"content":"Let me check for any abstract controller or base controller class that might be used:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java\n...\n\n    @FXML\n    private VBox thongKeSubMenuList;\n\n    @FXML\n    private VBox thongKeSubVBox;\n\n    @FXML\n    private VBox timKiemSubMenuList;\n\n    @FXML\n    private VBox timKiemSubVBox;\n\n    @FXML\n    private TextField txt_maPN;\n\n    @FXML\n    private TableView<PhieuNhapHang> tablePhieuNhap;\n\n    @FXML\n    private VBox vBox;\n\n    Map<VBox,VBox> map = new HashMap<VBox,VBox>();\n    public void addMenusToMap() {\n        addMenusToMapImpl();\n    }\n\n    private void addMenusToMapImpl() {\n        map.put(banHangSubVBox, banHangSubMenuList);\n        map.put(quanLySubVBox, quanLySubMenuList);\n        map.put(timKiemSubVBox, timKiemSubMenuList);\n        map.put(thongKeSubVBox,thongKeSubMenuList);\n\n        /**\n         * Remove the components from VBox on load of stage\n         */\n        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n            entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Phiếu nhập\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/App.java\n...\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n        System.out.println(\"App.start() called\");\n        stage = primaryStage;\n\n        // Thiết lập sự kiện khi đóng cửa sổ chính\n        stage.setOnCloseRequest(event -> {\n            System.out.println(\"Application is closing\");\n            Platform.exit();\n            System.exit(0);\n        });\n\n        // Chỉ mở giao diện đăng nhập nếu không có splash screen\n        if (AppPreloader.splashStage == null) {\n            System.out.println(\"No splash screen detected, opening login screen directly\");\n//            openLoginGUI();\n        }\n    }\n\n    /**\n     * Mở giao diện chính của ứng dụng\n     */\n    public static void openMainGUI() throws IOException {\n        try {\n            // Load the main GUI\n            Parent root = FXMLLoader.load(App.class.getResource(\"/fxml/BanHang_gui.fxml\"));\n            Scene scene = new Scene(root);\n            scene.getStylesheets().add(App.class.getResource(\"/styles/menu.css\").toExternalForm());\n\n            // Set the new scene for the stage\n            stage.setScene(scene);\n            stage.setMaximized(true);\n            stage.setTitle(\"Hệ thống quản lý bán hàng\");\n\n            // Show the main GUI\n            stage.show();\n        } catch (IOException ex) {\n            System.err.println(\"Error loading BanHang_gui.fxml: \" + ex.getMessage());\n            throw ex;\n        }\n    }\n...\n\n//            if (loginFxmlUrl == null) {\n//                System.err.println(\"Login_gui.fxml not found! Trying to open BanHang_gui.fxml instead.\");\n//                openMainGUI();\n//                return;\n//            }\n\n            // Load giao diện đăng nhập\n            FXMLLoader fxmlLoader = new FXMLLoader(loginFxmlUrl);\n            Parent root = fxmlLoader.load();\n\n            // Tạo scene mới\n            Scene scene = new Scene(root);\n            stage.setScene(scene);\n            stage.setTitle(\"Đăng nhập\");\n            stage.setMaximized(true);\n\n            // Đặt kích thước và vị trí của cửa sổ\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n            stage.setX((primaryScreenBounds.getWidth() - root.prefWidth(-1)) / 2);\n            stage.setY((primaryScreenBounds.getHeight() - root.prefHeight(-1)) / 2);\n\n            // Hiển thị cửa sổ\n            stage.show();\n            System.out.println(1);\n            System.out.println(\"Login GUI opened successfully\");\n        } catch (Exception ex) {\n            System.err.println(\"Error opening Login_gui.fxml: \" + ex.getMessage());\n            ex.printStackTrace();\n        }\n    }\n\n    /**\n     * Mở giao diện quên mật khẩu\n     */\n    public static void openQuenMK() throws IOException {\n        try {\n            FXMLLoader fxmlLoader = new FXMLLoader(App.class.getResource(\"/fxml/QuenMatKhau_gui.fxml\"));\n            Parent root = fxmlLoader.load();\n            Scene scene = new Scene(root, 600, 400);\n            stage.setScene(scene);\n            stage.setTitle(\"Quên mật khẩu\");\n            stage.show();\n        } catch (NullPointerException ex) {\n            System.err.println(\"Không tìm thấy file QuenMatKhau_gui.fxml: \" + ex.getMessage());\n            ex.printStackTrace();\n            throw ex;\n        }\n    }\n...\n\n    /**\n     * Thay đổi root của scene\n     */\n    public static void setRoot(String fxml) throws IOException {\n        FXMLLoader loader = new FXMLLoader(App.class.getResource(\"/fxml/\" + fxml + \".fxml\"));\n        System.out.println(\"Loading FXML: \" + loader.getLocation());\n        try {\n            Parent newRoot = loader.load();\n            if (primaryScene != null)\n                primaryScene.setRoot(newRoot);\n            stage.setScene(primaryScene);\n            stage.sizeToScene();\n            stage.show();\n        } catch (IOException ex) {\n            System.err.println(\"Không tìm thấy file: \" + fxml);\n            throw ex;\n        }\n    }\n\n    /**\n     * Load FXML file\n     */\n    public static Parent loadFXML(String fxml) throws IOException {\n        FXMLLoader fxmlLoader = new FXMLLoader(App.class.getResource(\"/fxml/\" + fxml + \".fxml\"));\n        return fxmlLoader.load();\n    }\n...\nPath: src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Khách hàng\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Hoá đơn\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/TraCuu_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        cbb_GiaoDien.setOnAction(event -> {\n            String selectedValue = cbb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Sản phẩm\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) cbb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Nhân viên\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Tài khoản\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/QL_TaiKoan_controller.java\n...\n\n    @FXML\n    private VBox vBox;\n\n    @FXML\n    void handleGioHangClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleQuanLyClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleThongKeClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleTimKiemClick(MouseEvent event) {\n        try {\n            loadFXML(\"/fxml/TraCuu_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu!\");\n        }\n    }\n...\n\n    @FXML\n    void xoaNV(MouseEvent event) {\n\n    }\n\n    @FXML\n    void xoaTrang(MouseEvent event) {\n\n    }\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n...\nPath: src/main/java/iuh/fit/controller/Login_controller.java\npackage iuh.fit.controller;\n\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.ResourceBundle;\n\nimport iuh.fit.App;\nimport iuh.fit.daos.TaiKhoan_dao;\nimport iuh.fit.entities.TaiKhoan;\nimport javafx.event.ActionEvent;\nimport javafx.fxml.FXML;\nimport javafx.fxml.Initializable;\nimport javafx.scene.control.Alert;\nimport javafx.scene.control.Alert.AlertType;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.Hyperlink;\nimport javafx.scene.control.PasswordField;\nimport javafx.scene.control.TextField;\nimport javafx.scene.input.KeyCode;\nimport javafx.scene.input.KeyEvent;\n\n/**\n * Controller cho màn hình đăng nhập\n */\npublic class Login_controller implements Initializable {\n\n    @FXML\n    private TextField txtUsername;\n\n    @FXML\n    private PasswordField txtPassword;\n\n    @FXML\n    private Button btnLogin;\n\n    @FXML\n    private Hyperlink linkForgotPassword;\n\n    private TaiKhoan_dao taiKhoanDao;\n\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n        // Khởi tạo DAO\n        taiKhoanDao = new TaiKhoan_dao();\n\n        // Thêm sự kiện Enter cho các trường nhập liệu\n        txtUsername.setOnKeyPressed(this::handleEnterKey);\n        txtPassword.setOnKeyPressed(this::handleEnterKey);\n    }\n\n    /**\n     * Xử lý sự kiện nhấn Enter\n     */\n    private void handleEnterKey(KeyEvent event) {\n        if (event.getCode() == KeyCode.ENTER) {\n            login();\n        }\n    }\n\n    /**\n     * Xử lý sự kiện nhấn nút đăng nhập\n     */\n    @FXML\n    private void handleLoginButtonAction(ActionEvent event) {\n        login();\n    }\n\n    /**\n     * Xử lý sự kiện quên mật khẩu\n     */\n    @FXML\n    private void handleForgotPasswordAction(ActionEvent event) {\n        try {\n            App.openQuenMK();\n        } catch (IOException e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quên mật khẩu!\");\n        }\n    }\n\n    /**\n     * Thực hiện đăng nhập\n     */\n    private void login() {\n        String username = txtUsername.getText().trim();\n        String password = txtPassword.getText().trim();\n\n        // Validate input\n        if (username.isEmpty()) {\n            showAlert(AlertType.WARNING, \"Cảnh báo\", \"Vui lòng nhập tên đăng nhập!\");\n            txtUsername.requestFocus();\n            return;\n        }\n\n        if (password.isEmpty()) {\n            showAlert(AlertType.WARNING, \"Cảnh báo\", \"Vui lòng nhập mật khẩu!\");\n            txtPassword.requestFocus();\n            return;\n        }\n\n        // Check login\n        try {\n            TaiKhoan taiKhoan = taiKhoanDao.findByUsernameandPassword(username, password);\n            if (taiKhoan != null) {\n                // Save login information\n                App.taiKhoan = taiKhoan;\n                App.user = username;\n                App.ma = taiKhoan.getMaTaiKhoan();\n                txtUsername.getScene().getWindow().hide();\n                // Close the login screen and open the main GUI\n                App.openMainGUI();\n            } else {\n                showAlert(AlertType.ERROR, \"Lỗi đăng nhập\", \"Tên đăng nhập hoặc mật khẩu không đúng!\");\n                txtPassword.clear();\n                txtPassword.requestFocus();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Lỗi khi đăng nhập: \" + e.getMessage());\n        }\n    }\n...\nPath: src/main/java/iuh/fit/controller/SplashController.java\n...\n\n/**\n * Controller cho màn hình Splash\n */\npublic class SplashController implements Initializable {\n\n    @FXML\n    private ProgressBar progressBar;\n\n    @FXML\n    private Label lblStatus;\n\n    @FXML\n    private Label lblVersion;\n\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n        // Thiết lập phiên bản\n        lblVersion.setText(\"Phiên bản 1.0.0\");\n\n        // Tạo hiệu ứng mờ dần cho label\n        FadeTransition fadeTransition = new FadeTransition(Duration.seconds(1), lblStatus);\n        fadeTransition.setFromValue(1.0);\n        fadeTransition.setToValue(0.3);\n        fadeTransition.setCycleCount(Timeline.INDEFINITE);\n        fadeTransition.setAutoReverse(true);\n        fadeTransition.play();\n\n        // Khởi động quá trình tải ứng dụng\n        startLoadingProcess();\n    }\n\n    /**\n     * Khởi động quá trình tải ứng dụng\n     */\n    private void startLoadingProcess() {\n        Task<Void> task = new Task<Void>() {\n            @Override\n            protected Void call() throws Exception {\n                // Cập nhật tiến trình\n                updateProgress(0.1, 1.0);\n                updateMessage(\"Đang khởi động ứng dụng...\");\n                Thread.sleep(800);\n\n                // Kiểm tra kết nối cơ sở dữ liệu\n                updateProgress(0.3, 1.0);\n                updateMessage(\"Đang kết nối cơ sở dữ liệu...\");\n                Thread.sleep(800);\n\n                // Kiểm tra dữ liệu\n                updateProgress(0.5, 1.0);\n                updateMessage(\"Đang kiểm tra dữ liệu...\");\n                Thread.sleep(800);\n\n                // Tải dữ liệu\n                updateProgress(0.7, 1.0);\n                updateMessage(\"Đang tải dữ liệu...\");\n                Thread.sleep(800);\n\n                // Hoàn tất\n                updateProgress(1.0, 1.0);\n                updateMessage(\"Hoàn tất!\");\n                Thread.sleep(500);\n\n                return null;\n            }\n        };\n\n        // Liên kết progress bar với task\n        progressBar.progressProperty().bind(task.progressProperty());\n\n        // Liên kết label status với task\n        task.messageProperty().addListener((observable, oldValue, newValue) -> {\n            updateStatus(newValue);\n        });\n\n        // Khi task hoàn thành, mở màn hình đăng nhập\n        task.setOnSucceeded(event -> {\n            System.out.println(\"Loading task completed, opening login screen\");\n\n            // Tạo một task riêng để mở màn hình đăng nhập sau khi splash hoàn tất\n            new Thread(() -> {\n                try {\n                    // Đợi một chút trước khi mở màn hình đăng nhập\n                    Thread.sleep(1000);\n\n                    // Chuyển sang thread JavaFX để mở màn hình đăng nhập\n                    Platform.runLater(() -> {\n                        try {\n                            // Đóng màn hình splash\n                            if (iuh.fit.AppPreloader.splashStage != null) {\n                                iuh.fit.AppPreloader.splashStage.close();\n                                System.out.println(\"Splash screen closed\");\n                            }\n\n                            // Mở màn hình đăng nhập\n//                            App.openLoginGUI();\n                            System.out.println(\"Login screen opened\");\n                        } catch (Exception e) {\n ...","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01HE1PGeCyHumvvBG9TXXDXU"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Let me check for any abstract controller or base controller class that might be used:\n","workspace_file_chunks":[]},{"status":"success","request_id":"d7b8aa61-e67c-4437-9d3d-d09029d5f2d8","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01XQuACphaoCSirB29gCrjU3","tool_name":"str-replace-editor","input_json":"{\"command\": \"view\", \"path\": \"src/main/java/iuh/fit/controller/BanHang_controller.java\"}"}},{"id":0,"type":0,"content":"Based on my analysis of the codebase, I now have a good understanding of how the navigation between interfaces works in your project. Let me create a detailed plan to fix the navigation issues.\n\n## Plan to Fix Navigation Between Interfaces\n\n1. **Identify the issue**: The navigation between interfaces is inconsistent. Some controllers use `loadFXML()` method defined in their own class, while others use `App.setRoot()` or direct FXMLLoader calls.\n\n2. **Create a consistent approach**: I'll standardize the navigation by:\n   - Making sure all controllers use the same method for navigation\n   - Ensuring all navigation methods are properly implemented\n   - Fixing any missing navigation links\n\n3. **Files to modify**:\n   - `src/main/java/iuh/fit/controller/BanHang_controller.java`\n   - `src/main/java/iuh/fit/controller/QL_SanPham_controller.java`\n   - `src/main/java/iuh/fit/controller/QL_TaiKoan_controller.java`\n   - `src/main/java/iuh/fit/controller/QL_KhachHang_controller.java`\n   - `src/main/java/iuh/fit/controller/QL_HoaDon_controller.java`\n   - `src/main/java/iuh/fit/controller/QL_PhieuNhap_controller.java`\n   - `src/main/java/iuh/fit/controller/QL_NhanVien_controller.java`\n   - `src/main/java/iuh/fit/controller/ThongKeDoanhThu_controller.java`\n   - `src/main/java/iuh/fit/controller/ThongKeSanPham_controller.java`\n   - `src/main/java/iuh/fit/controller/TraCuu_controller.java`\n   - `src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java`\n   - `src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java`\n   - `src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java`\n   - `src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java`\n   - `src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java`\n\nLet me start by implementing the changes:\n\n### 1. First, let's fix the BanHang_controller.java file:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java\n...\n\n    @FXML\n    private VBox thongKeSubMenuList;\n\n    @FXML\n    private VBox thongKeSubVBox;\n\n    @FXML\n    private VBox timKiemSubMenuList;\n\n    @FXML\n    private VBox timKiemSubVBox;\n\n    @FXML\n    private TextField txt_maPN;\n\n    @FXML\n    private TableView<PhieuNhapHang> tablePhieuNhap;\n\n    @FXML\n    private VBox vBox;\n\n    Map<VBox,VBox> map = new HashMap<VBox,VBox>();\n    public void addMenusToMap() {\n        addMenusToMapImpl();\n    }\n\n    private void addMenusToMapImpl() {\n        map.put(banHangSubVBox, banHangSubMenuList);\n        map.put(quanLySubVBox, quanLySubMenuList);\n        map.put(timKiemSubVBox, timKiemSubMenuList);\n        map.put(thongKeSubVBox,thongKeSubMenuList);\n\n        /**\n         * Remove the components from VBox on load of stage\n         */\n        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n            entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Phiếu nhập\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/QL_PhieuNhap_controller.java\npackage iuh.fit.controller;\n\nimport iuh.fit.daos.PhieuNhapHang_dao;\nimport iuh.fit.entities.PhieuNhapHang;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.fxml.FXML;\nimport javafx.fxml.FXMLLoader;\nimport javafx.fxml.Initializable;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.scene.control.*;\nimport javafx.scene.control.cell.PropertyValueFactory;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.input.MouseEvent;\nimport javafx.scene.layout.Pane;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\n\nimport java.net.URL;\nimport java.util.ResourceBundle;\n\nimport static iuh.fit.App.loadFXML;\n...\n\n    @FXML\n    private Label lb_timKiem;\n\n    @FXML\n    private Pane p_HoaDon;\n\n    @FXML\n    private Pane p_gioHang;\n\n    @FXML\n    private Pane p_hoaDon;\n\n    @FXML\n    private Pane p_nhanVien;\n\n    @FXML\n    private Pane p_phieuNhap;\n\n    @FXML\n    private Pane p_quanLy;\n\n    @FXML\n    private Pane p_sanPham;\n\n    @FXML\n    private Pane p_taiKhoan;\n\n    @FXML\n    private Pane p_thongKe;\n\n    @FXML\n    private Pane p_thongKeDoanhThu;\n\n    @FXML\n    private Pane p_thongKeSanPham;\n\n    @FXML\n    private Pane p_timKiem;\n\n    @FXML\n    private VBox quanLySubMenuList;\n\n    @FXML\n    private VBox quanLySubVBox;\n\n    @FXML\n    private TableView<PhieuNhapHang> table_PNhap;\n\n    @FXML\n    private VBox thongKeSubMenuList;\n\n    @FXML\n    private VBox thongKeSubVBox;\n\n    @FXML\n    private VBox timKiemSubMenuList;\n\n    @FXML\n    private VBox timKiemSubVBox;\n\n    @FXML\n    private TextField txt_MaNV;\n...\nPath: src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java\n...\n\n    @FXML\n    private VBox vBox;\n    Map<VBox,VBox> map = new HashMap<VBox,VBox>();\n    public void addMenusToMap() {\n        addMenusToMapImpl();\n    }\n\n    private void addMenusToMapImpl() {\n        map.put(banHangSubVBox, banHangSubMenuList);\n        map.put(quanLySubVBox, quanLySubMenuList);\n        map.put(timKiemSubVBox, timKiemSubMenuList);\n        map.put(thongKeSubVBox,thongKeSubMenuList);\n\n        /**\n         * Remove the components from VBox on load of stage\n         */\n        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n            entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n    /**\n     * Menu slider\n     * @param menu\n     * @param subMenu\n     */\n    public void toolsSlider(VBox menu,VBox subMenu){\n        toolsSliderImpl(menu,subMenu);\n    }\n...\nPath: src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java\n...\n\n    @FXML\n    private VBox timKiemSubVBox;\n\n    @FXML\n    private TextField txt_maTK;\n    \n    @FXML\n    private TableView<TaiKhoan> tableTaiKhoan;\n\n    @FXML\n    private VBox vBox;\n\n    Map<VBox,VBox> map = new HashMap<VBox,VBox>();\n    public void addMenusToMap() {\n        addMenusToMapImpl();\n    }\n\n    private void addMenusToMapImpl() {\n        map.put(banHangSubVBox, banHangSubMenuList);\n        map.put(quanLySubVBox, quanLySubMenuList);\n        map.put(timKiemSubVBox, timKiemSubMenuList);\n        map.put(thongKeSubVBox,thongKeSubMenuList);\n\n        /**\n         * Remove the components from VBox on load of stage\n         */\n        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n            entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n    /**\n     * Menu slider\n     * @param menu\n     * @param subMenu\n     */\n    public void toolsSlider(VBox menu,VBox subMenu){\n        toolsSliderImpl(menu,subMenu);\n    }\n...\nPath: src/main/java/iuh/fit/controller/BanHang_controller.java\n...\n\nimport iuh.fit.App;\nimport iuh.fit.daos.CaLam_dao;\nimport iuh.fit.daos.ChiTietHoaDon_SanPham_dao;\nimport iuh.fit.daos.HoaDon_dao;\nimport iuh.fit.daos.KhachHang_dao;\nimport iuh.fit.daos.NhanVien_dao;\nimport iuh.fit.daos.SanPham_dao;\nimport iuh.fit.entities.*;\nimport iuh.fit.enums.PhuongThucThanhToan;\nimport javafx.animation.FadeTransition;\nimport javafx.animation.Interpolator;\nimport javafx.animation.KeyFrame;\nimport javafx.animation.Timeline;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.event.ActionEvent;\nimport javafx.event.EventHandler;\nimport javafx.fxml.FXML;\nimport javafx.fxml.FXMLLoader;\nimport javafx.fxml.Initializable;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\n...\n\n    @FXML\n    private RadioButton rb_chuyenKhoan;\n\n    @FXML\n    private RadioButton rb_the;\n\n    @FXML\n    private ToggleGroup phuongThucTT;\n\n    @FXML\n    private Label lb_thongKe;\n\n    @FXML\n    private Label lb_thongKeDoanhThu;\n\n    @FXML\n    private Label lb_thongKeSanPham;\n\n    @FXML\n    private Label lb_timKiem;\n\n    @FXML\n    private Pane p_HoaDon;\n\n    @FXML\n    private Pane p_gioHang;\n\n    @FXML\n    private Pane p_hoaDon;\n\n    @FXML\n    private Pane p_nhanVien;\n\n    @FXML\n    private Pane p_phieuNhap;\n\n    @FXML\n    private Pane p_quanLy;\n\n    @FXML\n    private Pane p_sanPham;\n\n    @FXML\n    private Pane p_taiKhoan;\n\n    @FXML\n    private Pane p_thongKe;\n\n    @FXML\n    private Pane p_thongKeDoanhThu;\n\n    @FXML\n    private Pane p_thongKeSanPham;\n\n    @FXML\n    private Pane p_timKiem;\n\n    @FXML\n    private VBox quanLySubMenuList;\n\n    @FXML\n    private VBox quanLySubVBox;\n...\n\n    public void initialize(URL location, ResourceBundle resources) {\n        // Khởi tạo các DAO\n        sanPhamDao = new SanPham_dao();\n        hoaDonDao = new HoaDon_dao();\n        khachHangDao = new KhachHang_dao();\n        chiTietHoaDonDao = new ChiTietHoaDon_SanPham_dao();\n        caLamDao = new CaLam_dao();\n        nhanVienDao = new NhanVien_dao();\n\n        // Khởi tạo các menu\n        addMenusToMap();\n\n        // Hiển thị ngày và thời gian hiện tại\n        displayCurrentDateTime();\n\n        // Khởi tạo bảng giỏ hàng\n        initializeTable();\n\n        // Khởi tạo thông tin hóa đơn\n        initializeInvoiceInfo();\n\n        // Khởi tạo tổng tiền\n        updateTotalAmount();\n\n        // Khởi tạo thông tin nhân viên\n        initializeNhanVien();\n        System.out.println(App.user);\n\n        // Thiết lập sự kiện cho các thành phần trong Pane thông tin đơn hàng\n        setupInvoiceEvents();\n    }\n\n    /**\n     * Add Menus to map\n     */\n    public void addMenusToMap() {\n        addMenusToMapImpl();\n    }\n\n    private void addMenusToMapImpl() {\n        map.put(banHangSubVBox, banHangSubMenuList);\n        map.put(quanLySubVBox, quanLySubMenuList);\n        map.put(timKiemSubVBox, timKiemSubMenuList);\n        map.put(thongKeSubVBox,thongKeSubMenuList);\n\n        /**\n         * Remove the components from VBox on load of stage\n         */\n        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n            entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n    /**\n     * Menu slider\n     * @param menu\n     * @param subMenu\n     */\n    public void toolsSlider(VBox menu,VBox subMenu){\n        toolsSliderImpl(menu,subMenu);\n    }\n...\nPath: src/main/java/iuh/fit/controller/ThongKeSanPham_controller.java\n...\n\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n        addMenusToMap();\n        setupCharts();\n    }\n\n    /**\n     * Add Menus to map\n     */\n    public void addMenusToMap() {\n        addMenusToMapImpl();\n    }\n\n    private void addMenusToMapImpl() {\n        map.put(banHangSubVBox, banHangSubMenuList);\n        map.put(quanLySubVBox, quanLySubMenuList);\n        map.put(timKiemSubVBox, timKiemSubMenuList);\n        map.put(thongKeSubVBox, thongKeSubMenuList);\n\n        /**\n         * Remove the components from VBox on load of stage\n         */\n        for (Map.Entry<VBox, VBox> entry : map.entrySet()) {\n            entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n\n    /**\n     * Menu slider\n     *\n     * @param menu\n     * @param subMenu\n     */\n    public void toolsSlider(VBox menu, VBox subMenu) {\n        toolsSliderImpl(menu, subMenu);\n    }\n...\nPath: src/main/java/iuh/fit/controller/ThongKeDoanhThu_controller.java\n...\n\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n        addMenusToMap();\n        setupCharts();\n    }\n\n    /**\n     * Add Menus to map\n     */\n    public void addMenusToMap() {\n        addMenusToMapImpl();\n    }\n\n    private void addMenusToMapImpl() {\n        map.put(banHangSubVBox, banHangSubMenuList);\n        map.put(quanLySubVBox, quanLySubMenuList);\n        map.put(timKiemSubVBox, timKiemSubMenuList);\n        map.put(thongKeSubVBox, thongKeSubMenuList);\n\n        /**\n         * Remove the components from VBox on load of stage\n         */\n        for (Map.Entry<VBox, VBox> entry : map.entrySet()) {\n            entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n\n    /**\n     * Menu slider\n     *\n     * @param menu\n     * @param subMenu\n     */\n    public void toolsSlider(VBox menu, VBox subMenu) {\n        toolsSliderImpl(menu, subMenu);\n    }\n...\nPath: src/main/java/iuh/fit/App.java\n...\n\n/**\n * Lớp chính của ứng dụng\n */\npublic class App extends Application {\n//    public static final int widthModalLogin = 600;\n//    public static final int heightModalLogin = 400;\n    public static Stage stage;\n    public static Scene primaryScene;\n    public static String user;\n    public static String ma;\n    public static TaiKhoan taiKhoan;\n    public static String maTraCuu;\n\n    // Biến để theo dõi trạng thái đăng nhập\n    private static boolean loginScreenOpened = false;\n\n    public static void main(String[] args) {\n        System.setProperty(\"javafx.preloader\", AppPreloader.class.getName());\n        launch(args);\n    }\n...\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n        System.out.println(\"App.start() called\");\n        stage = primaryStage;\n\n        // Thiết lập sự kiện khi đóng cửa sổ chính\n        stage.setOnCloseRequest(event -> {\n            System.out.println(\"Application is closing\");\n            Platform.exit();\n            System.exit(0);\n        });\n\n        // Chỉ mở giao diện đăng nhập nếu không có splash screen\n        if (AppPreloader.splashStage == null) {\n            System.out.println(\"No splash screen detected, opening login screen directly\");\n//            openLoginGUI();\n        }\n    }\n\n    /**\n     * Mở giao diện chính của ứng dụng\n     */\n    public static void openMainGUI() throws IOException {\n        try {\n            // Load the main GUI\n            Parent root = FXMLLoader.load(App.class.getResource(\"/fxml/BanHang_gui.fxml\"));\n            Scene scene = new Scene(root);\n            scene.getStylesheets().add(App.class.getResource(\"/styles/menu.css\").toExternalForm());\n\n            // Set the new scene for the stage\n            stage.setScene(scene);\n            stage.setMaximized(true);\n            stage.setTitle(\"Hệ thống quản lý bán hàng\");\n\n            // Show the main GUI\n            stage.show();\n        } catch (IOException ex) {\n            System.err.println(\"Error loading BanHang_gui.fxml: \" + ex.getMessage());\n            throw ex;\n        }\n    }\n...\n\n//            if (loginFxmlUrl == null) {\n//                System.err.println(\"Login_gui.fxml not found! Trying to open BanHang_gui.fxml instead.\");\n//                openMainGUI();\n//                return;\n//            }\n\n            // Load giao diện đăng nhập\n            FXMLLoader fxmlLoader = new FXMLLoader(loginFxmlUrl);\n            Parent root = fxmlLoader.load();\n\n            // Tạo scene mới\n            Scene scene = new Scene(root);\n            stage.setScene(scene);\n            stage.setTitle(\"Đăng nhập\");\n            stage.setMaximized(true);\n\n            // Đặt kích thước và vị trí của cửa sổ\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n            stage.setX((primaryScreenBounds.getWidth() - root.prefWidth(-1)) / 2);\n            stage.setY((primaryScreenBounds.getHeight() - root.prefHeight(-1)) / 2);\n\n            // Hiển thị cửa sổ\n            stage.show();\n            System.out.println(1);\n            System.out.println(\"Login GUI opened successfully\");\n        } catch (Exception ex) {\n            System.err.println(\"Error opening Login_gui.fxml: \" + ex.getMessage());\n            ex.printStackTrace();\n        }\n    }\n\n    /**\n     * Mở giao diện quên mật khẩu\n     */\n    public static void openQuenMK() throws IOException {\n        try {\n            FXMLLoader fxmlLoader = new FXMLLoader(App.class.getResource(\"/fxml/QuenMatKhau_gui.fxml\"));\n            Parent root = fxmlLoader.load();\n            Scene scene = new Scene(root, 600, 400);\n            stage.setScene(scene);\n            stage.setTitle(\"Quên mật khẩu\");\n            stage.show();\n        } catch (NullPointerException ex) {\n            System.err.println(\"Không tìm thấy file QuenMatKhau_gui.fxml: \" + ex.getMessage());\n            ex.printStackTrace();\n            throw ex;\n        }\n    }\n...\n\n    /**\n     * Thay đổi root của scene\n     */\n    public static void setRoot(String fxml) throws IOException {\n        FXMLLoader loader = new FXMLLoader(App.class.getResource(\"/fxml/\" + fxml + \".fxml\"));\n        System.out.println(\"Loading FXML: \" + loader.getLocation());\n        try {\n            Parent newRoot = loader.load();\n            if (primaryScene != null)\n                primaryScene.setRoot(newRoot);\n            stage.setScene(primaryScene);\n            stage.sizeToScene();\n            stage.show();\n        } catch (IOException ex) {\n            System.err.println(\"Không tìm thấy file: \" + fxml);\n            throw ex;\n        }\n    }\n\n    /**\n     * Load FXML file\n     */\n    public static Parent loadFXML(String fxml) throws IOException {\n        FXMLLoader fxmlLoader = new FXMLLoader(App.class.getResource(\"/fxml/\" + fxml + \".fxml\"));\n        return fxmlLoader.load();\n    }\n...\nPath: src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java\n...\n\n    private void addMenusToMapImpl() {\n        map.put(banHangSubVBox, banHangSubMenuList);\n        map.put(quanLySubVBox, quanLySubMenuList);\n        map.put(timKiemSubVBox, timKiemSubMenuList);\n        map.put(thongKeSubVBox,thongKeSubMenuList);\n\n        /**\n         * Remove the components from VBox on load of stage\n         */\n        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n            entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n    /**\n     * Menu slider\n     * @param menu\n     * @param subMenu\n     */\n    public void toolsSlider(VBox menu,VBox subMenu){\n        toolsSliderImpl(menu,subMenu);\n    }\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Nhân viên\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/TraCuu_controller.java\n...\n\nimport iuh.fit.App;\nimport iuh.fit.daos.SanPham_dao;\nimport iuh.fit.entities.SanPham;\nimport javafx.animation.FadeTransition;\nimport javafx.animation.Interpolator;\nimport javafx.beans.property.ReadOnlyStringWrapper;\nimport javafx.beans.property.SimpleStringProperty;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.fxml.FXML;\nimport javafx.fxml.FXMLLoader;\nimport javafx.fxml.Initializable;\nimport javafx.scene.Scene;\nimport javafx.scene.control.*;\nimport javafx.scene.control.cell.PropertyValueFactory;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.input.MouseEvent;\nimport javafx.scene.layout.Pane;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\nimport javafx.util.Duration;\n...\n\n    private void setupComboBoxHandler() {\n        cbb_GiaoDien.setOnAction(event -> {\n            String selectedValue = cbb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Sản phẩm\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) cbb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/QL_KhachHang_controller.java\npackage iuh.fit.controller;\n\nimport iuh.fit.daos.HoaDon_dao;\nimport iuh.fit.daos.KhachHang_dao;\nimport iuh.fit.entities.HoaDon;\nimport iuh.fit.entities.KhachHang;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.fxml.FXML;\nimport j...","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01A2AYKyJZgBnAAuk53DLSMu"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Based on my analysis of the codebase, I now have a good understanding of how the navigation between interfaces works in your project. Let me create a detailed plan to fix the navigation issues.\n\n## Plan to Fix Navigation Between Interfaces\n\n1. **Identify the issue**: The navigation between interfaces is inconsistent. Some controllers use `loadFXML()` method defined in their own class, while others use `App.setRoot()` or direct FXMLLoader calls.\n\n2. **Create a consistent approach**: I'll standardize the navigation by:\n   - Making sure all controllers use the same method for navigation\n   - Ensuring all navigation methods are properly implemented\n   - Fixing any missing navigation links\n\n3. **Files to modify**:\n   - `src/main/java/iuh/fit/controller/BanHang_controller.java`\n   - `src/main/java/iuh/fit/controller/QL_SanPham_controller.java`\n   - `src/main/java/iuh/fit/controller/QL_TaiKoan_controller.java`\n   - `src/main/java/iuh/fit/controller/QL_KhachHang_controller.java`\n   - `src/main/java/iuh/fit/controller/QL_HoaDon_controller.java`\n   - `src/main/java/iuh/fit/controller/QL_PhieuNhap_controller.java`\n   - `src/main/java/iuh/fit/controller/QL_NhanVien_controller.java`\n   - `src/main/java/iuh/fit/controller/ThongKeDoanhThu_controller.java`\n   - `src/main/java/iuh/fit/controller/ThongKeSanPham_controller.java`\n   - `src/main/java/iuh/fit/controller/TraCuu_controller.java`\n   - `src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java`\n   - `src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java`\n   - `src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java`\n   - `src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java`\n   - `src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java`\n\nLet me start by implementing the changes:\n\n### 1. First, let's fix the BanHang_controller.java file:\n","workspace_file_chunks":[]},{"status":"success","request_id":"20710933-dd7e-42b5-b6ab-e6fd8d4c2d83","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01TJbsaPQTkAtcJARRyxGJPu","tool_name":"str-replace-editor","input_json":"{\"command\": \"str_replace\", \"path\": \"src/main/java/iuh/fit/controller/BanHang_controller.java\", \"str_replace_entries\": [{\"old_str\": \"    @FXML\\n    void handleTimKiemClick(MouseEvent event) {\\n        try {\\n            // Chuy\\u1ec3n \\u0111\\u1ebfn giao di\\u1ec7n TraCuu_gui.fxml\\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\\\"/fxml/TraCuu_gui.fxml\\\"));\\n            Parent root = loader.load();\\n            Scene scene = new Scene(root);\\n\\n            // L\\u1ea5y stage hi\\u1ec7n t\\u1ea1i\\n            Stage stage = (Stage) p_gioHang.getScene().getWindow();\\n\\n            // Thi\\u1ebft l\\u1eadp scene m\\u1edbi\\n            stage.setScene(scene);\\n            stage.setTitle(\\\"Tra c\\u1ee9u s\\u1ea3n ph\\u1ea9m\\\");\\n\\n            // Hi\\u1ec3n th\\u1ecb stage\\n            stage.show();\\n\\n            System.out.println(\\\"Chuy\\u1ec3n \\u0111\\u1ebfn giao di\\u1ec7n tra c\\u1ee9u th\\u00e0nh c\\u00f4ng\\\");\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            showAlert(AlertType.ERROR, \\\"L\\u1ed7i\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n tra c\\u1ee9u: \\\" + e.getMessage());\\n\\n            // N\\u1ebfu kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n tra c\\u1ee9u, hi\\u1ec3n th\\u1ecb giao di\\u1ec7n t\\u00ecm ki\\u1ebfm tr\\u00ean giao di\\u1ec7n hi\\u1ec7n t\\u1ea1i\\n            toolsSlider(timKiemSubVBox, timKiemSubMenuList);\\n            removeOtherMenus(timKiemSubVBox);\\n\\n            // Hi\\u1ec3n th\\u1ecb giao di\\u1ec7n t\\u00ecm ki\\u1ebfm\\n            showSearchInterface();\\n        }\\n    }\", \"new_str\": \"    @FXML\\n    void handleTimKiemClick(MouseEvent event) {\\n        try {\\n            // Chuy\\u1ec3n \\u0111\\u1ebfn giao di\\u1ec7n tra c\\u1ee9u\\n            loadFXML(\\\"/fxml/TraCuu_gui.fxml\\\");\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            showAlert(AlertType.ERROR, \\\"L\\u1ed7i\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n tra c\\u1ee9u: \\\" + e.getMessage());\\n\\n            // N\\u1ebfu kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n tra c\\u1ee9u, hi\\u1ec3n th\\u1ecb giao di\\u1ec7n t\\u00ecm ki\\u1ebfm tr\\u00ean giao di\\u1ec7n hi\\u1ec7n t\\u1ea1i\\n            toolsSlider(timKiemSubVBox, timKiemSubMenuList);\\n            removeOtherMenus(timKiemSubVBox);\\n\\n            // Hi\\u1ec3n th\\u1ecb giao di\\u1ec7n t\\u00ecm ki\\u1ebfm\\n            showSearchInterface();\\n        }\\n    }\", \"old_str_start_line_number\": 442, \"old_str_end_line_number\": 472}]}"}},{"id":0,"type":0,"content":"Let me check the handleTimKiemClick method in BanHang_controller.java:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here's the result of running `cat -n` on src/main/java/iuh/fit/controller/BanHang_controller.java:\n     1\tpackage iuh.fit.controller;\n     2\t\n     3\timport java.net.URL;\n     4\timport java.text.DecimalFormat;\n     5\timport java.text.NumberFormat;\n     6\timport java.time.LocalDate;\n     7\timport java.time.LocalTime;\n     8\timport java.time.format.DateTimeFormatter;\n     9\timport java.util.ArrayList;\n    10\timport java.util.HashMap;\n    11\timport java.util.List;\n    12\timport java.util.Locale;\n    13\timport java.util.Map;\n    14\timport java.util.ResourceBundle;\n    15\t\n    16\timport iuh.fit.App;\n    17\timport iuh.fit.daos.CaLam_dao;\n    18\timport iuh.fit.daos.ChiTietHoaDon_SanPham_dao;\n    19\timport iuh.fit.daos.HoaDon_dao;\n    20\timport iuh.fit.daos.KhachHang_dao;\n    21\timport iuh.fit.daos.NhanVien_dao;\n    22\timport iuh.fit.daos.SanPham_dao;\n    23\timport iuh.fit.entities.*;\n    24\timport iuh.fit.enums.PhuongThucThanhToan;\n    25\timport javafx.animation.FadeTransition;\n    26\timport javafx.animation.Interpolator;\n    27\timport javafx.animation.KeyFrame;\n    28\timport javafx.animation.Timeline;\n    29\timport javafx.collections.FXCollections;\n    30\timport javafx.collections.ObservableList;\n    31\timport javafx.event.ActionEvent;\n    32\timport javafx.event.EventHandler;\n    33\timport javafx.fxml.FXML;\n    34\timport javafx.fxml.FXMLLoader;\n    35\timport javafx.fxml.Initializable;\n    36\timport javafx.scene.Parent;\n    37\timport javafx.scene.Scene;\n    38\timport javafx.scene.control.*;\n    39\timport javafx.scene.control.Alert.AlertType;\n    40\timport javafx.scene.control.cell.PropertyValueFactory;\n    41\timport javafx.scene.image.ImageView;\n    42\timport javafx.scene.input.MouseEvent;\n    43\timport javafx.scene.input.KeyEvent;\n    44\timport javafx.scene.layout.AnchorPane;\n    45\timport javafx.scene.layout.GridPane;\n    46\timport javafx.scene.layout.Pane;\n    47\timport javafx.scene.layout.VBox;\n    48\timport javafx.stage.Stage;\n    49\timport javafx.util.Duration;\n    50\t\n    51\t\n    52\tpublic class BanHang_controller implements Initializable {\n    53\t\n    54\t    @FXML\n    55\t    private VBox banHangSubMenuList;\n    56\t\n    57\t    @FXML\n    58\t    private VBox banHangSubVBox;\n    59\t\n    60\t    @FXML\n    61\t    private Button btn_themSP;\n    62\t\n    63\t    @FXML\n    64\t    private ImageView img_HoaDon;\n    65\t\n    66\t    @FXML\n    67\t    private ImageView img_gioHang;\n    68\t\n    69\t    @FXML\n    70\t    private ImageView img_hoaDon;\n    71\t\n    72\t    @FXML\n    73\t    private ImageView img_nhanVien;\n    74\t\n    75\t    @FXML\n    76\t    private ImageView img_phieuNhap;\n    77\t\n    78\t    @FXML\n    79\t    private ImageView img_quanLy;\n    80\t\n    81\t    @FXML\n    82\t    private ImageView img_sanPham;\n    83\t\n    84\t    @FXML\n    85\t    private ImageView img_taiKhoan;\n    86\t\n    87\t    @FXML\n    88\t    private ImageView img_thongKe;\n    89\t\n    90\t    @FXML\n    91\t    private ImageView img_thongKeDoanhThu;\n    92\t\n    93\t    @FXML\n    94\t    private ImageView img_thongKeSanPham;\n    95\t\n    96\t    @FXML\n    97\t    private ImageView img_timKiem;\n    98\t\n    99\t    @FXML\n   100\t    private Label lb_HoaDon;\n   101\t\n   102\t    @FXML\n   103\t    private Label lb_gioHang;\n   104\t\n   105\t    @FXML\n   106\t    private Label lb_hoaDon;\n   107\t\n   108\t    @FXML\n   109\t    private Label lb_ngayLap;\n   110\t\n   111\t    @FXML\n   112\t    private Label lb_nhanVien;\n   113\t\n   114\t    @FXML\n   115\t    private Label lb_phieuNhap;\n   116\t\n   117\t    @FXML\n   118\t    private Label lb_quanLy;\n   119\t\n   120\t    @FXML\n   121\t    private Label lb_sanPham;\n   122\t\n   123\t    @FXML\n   124\t    private Label lb_taiKhoan;\n   125\t\n   126\t    @FXML\n   127\t    private Label lb_thoiGian;\n   128\t\n   129\t    @FXML\n   130\t    private Label lb_tongTien;\n   131\t\n   132\t    @FXML\n   133\t    private Label lb_tongThanhToan;\n   134\t\n   135\t    @FXML\n   136\t    private Label lb_giamGia;\n   137\t\n   138\t    @FXML\n   139\t    private Label lb_tongSoSP;\n   140\t\n   141\t    @FXML\n   142\t    private Label lb_tongSL;\n   143\t\n   144\t    @FXML\n   145\t    private Label lb_tamTinh;\n   146\t\n   147\t    @FXML\n   148\t    private TextField txt_tienKhachTra;\n   149\t\n   150\t    @FXML\n   151\t    private Label lb_tienThua;\n   152\t\n   153\t    @FXML\n   154\t    private Button btn_thanhToan;\n   155\t\n   156\t    @FXML\n   157\t    private Button btn_apDungMa;\n   158\t\n   159\t    @FXML\n   160\t    private Button btn_dangXuat;\n   161\t\n   162\t    @FXML\n   163\t    private TextField txt_maGiamGia;\n   164\t\n   165\t    @FXML\n   166\t    private TextArea ta_ghiChu;\n   167\t\n   168\t    @FXML\n   169\t    private RadioButton rb_tienMat;\n   170\t\n   171\t    @FXML\n   172\t    private RadioButton rb_chuyenKhoan;\n   173\t\n   174\t    @FXML\n   175\t    private RadioButton rb_the;\n   176\t\n   177\t    @FXML\n   178\t    private ToggleGroup phuongThucTT;\n   179\t\n   180\t    @FXML\n   181\t    private Label lb_thongKe;\n   182\t\n   183\t    @FXML\n   184\t    private Label lb_thongKeDoanhThu;\n   185\t\n   186\t    @FXML\n   187\t    private Label lb_thongKeSanPham;\n   188\t\n   189\t    @FXML\n   190\t    private Label lb_timKiem;\n   191\t\n   192\t    @FXML\n   193\t    private Pane p_HoaDon;\n   194\t\n   195\t    @FXML\n   196\t    private Pane p_gioHang;\n   197\t\n   198\t    @FXML\n   199\t    private Pane p_hoaDon;\n   200\t\n   201\t    @FXML\n   202\t    private Pane p_nhanVien;\n   203\t\n   204\t    @FXML\n   205\t    private Pane p_phieuNhap;\n   206\t\n   207\t    @FXML\n   208\t    private Pane p_quanLy;\n   209\t\n   210\t    @FXML\n   211\t    private Pane p_sanPham;\n   212\t\n   213\t    @FXML\n   214\t    private Pane p_taiKhoan;\n   215\t\n   216\t    @FXML\n   217\t    private Pane p_thongKe;\n   218\t\n   219\t    @FXML\n   220\t    private Pane p_thongKeDoanhThu;\n   221\t\n   222\t    @FXML\n   223\t    private Pane p_thongKeSanPham;\n   224\t\n   225\t    @FXML\n   226\t    private Pane p_timKiem;\n   227\t\n   228\t    @FXML\n   229\t    private VBox quanLySubMenuList;\n   230\t\n   231\t    @FXML\n   232\t    private VBox quanLySubVBox;\n   233\t\n   234\t    @FXML\n   235\t    private TableColumn<SanPham, Double> tcDonGia;\n   236\t\n   237\t    @FXML\n   238\t    private TableColumn<SanPham, String> tcMaSP;\n   239\t\n   240\t    @FXML\n   241\t    private TableColumn<SanPham, Integer> tcSTT;\n   242\t\n   243\t    @FXML\n   244\t    private TableColumn<SanPham, Integer> tcSoLuong;\n   245\t\n   246\t    @FXML\n   247\t    private TableColumn<SanPham, String> tcTenSP;\n   248\t\n   249\t    @FXML\n   250\t    private TableColumn<SanPham, Double> tcThanhTien;\n   251\t\n   252\t    @FXML\n   253\t    private TableView<SanPham> tableView;\n   254\t\n   255\t    @FXML\n   256\t    private TextField txt_timKiem;\n   257\t\n   258\t    @FXML\n   259\t    private VBox thongKeSubMenuList;\n   260\t\n   261\t    @FXML\n   262\t    private VBox thongKeSubVBox;\n   263\t\n   264\t    @FXML\n   265\t    private VBox timKiemSubMenuList;\n   266\t\n   267\t    @FXML\n   268\t    private VBox timKiemSubVBox;\n   269\t\n   270\t    @FXML\n   271\t    private TextField txt_nhapMa;\n   272\t\n   273\t    @FXML\n   274\t    private TextField txt_nhapSL;\n   275\t\n   276\t    @FXML\n   277\t    private TextField txt_sdt;\n   278\t\n   279\t    @FXML\n   280\t    private TextField txt_tenKH;\n   281\t\n   282\t    @FXML\n   283\t    private VBox vBox;\n   284\t\n   285\t    @FXML\n   286\t    private Label lb_chucVu;\n   287\t\n   288\t    @FXML\n   289\t    private Label lb_tenNV;\n   290\t    @FXML\n   291\t    private ComboBox<?> cb_nganHang;\n   292\t\n   293\t    @FXML\n   294\t    private GridPane grid_chuyenKhoan;\n   295\t\n   296\t    @FXML\n   297\t    private GridPane grid_the;\n   298\t\n   299\t    @FXML\n   300\t    private GridPane grid_tienMat;\n   301\t\n   302\t    Map<VBox,VBox> map = new HashMap<VBox,VBox>();\n   303\t\n   304\t    // DAO để truy xuất dữ liệu\n   305\t    private SanPham_dao sanPhamDao;\n   306\t    private HoaDon_dao hoaDonDao;\n   307\t    private KhachHang_dao khachHangDao;\n   308\t    private ChiTietHoaDon_SanPham_dao chiTietHoaDonDao;\n   309\t    private CaLam_dao caLamDao;\n   310\t    private NhanVien_dao nhanVienDao;\n   311\t\n   312\t    // Danh sách các sản phẩm trong giỏ hàng\n   313\t    private ObservableList<SanPham> cartItems;\n   314\t\n   315\t    // Số lượng sản phẩm trong giỏ hàng\n   316\t    private Map<String, Integer> productQuantities = new HashMap<>();\n   317\t\n   318\t    public void initialize(URL location, ResourceBundle resources) {\n   319\t        // Khởi tạo các DAO\n   320\t        sanPhamDao = new SanPham_dao();\n   321\t        hoaDonDao = new HoaDon_dao();\n   322\t        khachHangDao = new KhachHang_dao();\n   323\t        chiTietHoaDonDao = new ChiTietHoaDon_SanPham_dao();\n   324\t        caLamDao = new CaLam_dao();\n   325\t        nhanVienDao = new NhanVien_dao();\n   326\t\n   327\t        // Khởi tạo các menu\n   328\t        addMenusToMap();\n   329\t\n   330\t        // Hiển thị ngày và thời gian hiện tại\n   331\t        displayCurrentDateTime();\n   332\t\n   333\t        // Khởi tạo bảng giỏ hàng\n   334\t        initializeTable();\n   335\t\n   336\t        // Khởi tạo thông tin hóa đơn\n   337\t        initializeInvoiceInfo();\n   338\t\n   339\t        // Khởi tạo tổng tiền\n   340\t        updateTotalAmount();\n   341\t\n   342\t        // Khởi tạo thông tin nhân viên\n   343\t        initializeNhanVien();\n   344\t        System.out.println(App.user);\n   345\t\n   346\t        // Thiết lập sự kiện cho các thành phần trong Pane thông tin đơn hàng\n   347\t        setupInvoiceEvents();\n   348\t    }\n   349\t\n   350\t    /**\n   351\t     * Add Menus to map\n   352\t     */\n   353\t    public void addMenusToMap() {\n   354\t        addMenusToMapImpl();\n   355\t    }\n   356\t\n   357\t    private void addMenusToMapImpl() {\n   358\t        map.put(banHangSubVBox, banHangSubMenuList);\n   359\t        map.put(quanLySubVBox, quanLySubMenuList);\n   360\t        map.put(timKiemSubVBox, timKiemSubMenuList);\n   361\t        map.put(thongKeSubVBox,thongKeSubMenuList);\n   362\t\n   363\t        /**\n   364\t         * Remove the components from VBox on load of stage\n   365\t         */\n   366\t        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n   367\t            entry.getKey().getChildren().remove(entry.getValue());\n   368\t        }\n   369\t    }\n   370\t    /**\n   371\t     * Menu slider\n   372\t     * @param menu\n   373\t     * @param subMenu\n   374\t     */\n   375\t    public void toolsSlider(VBox menu,VBox subMenu){\n   376\t        toolsSliderImpl(menu,subMenu);\n   377\t    }\n   378\t\n   379\t    private void toolsSliderImpl(VBox menu,VBox subMenu) {\n   380\t        if(menu.getChildren().contains(subMenu)){\n   381\t            final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n   382\t            transition.setFromValue(0.5);\n   383\t            transition.setToValue(1);\n   384\t            transition.setInterpolator(Interpolator.EASE_IN);\n   385\t            menu.getChildren().remove(subMenu);\n   386\t            transition.play();\n   387\t        }else{\n   388\t            final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n   389\t            transition.setFromValue(0.5);\n   390\t            transition.setToValue(1);\n   391\t            transition.setInterpolator(Interpolator.EASE_IN);\n   392\t            menu.getChildren().add(subMenu);\n   393\t            transition.play();\n   394\t        }\n   395\t    }\n   396\t    /**\n   397\t     * Remove other menus\n   398\t     * @param menu\n   399\t     */\n   400\t    public void removeOtherMenus(VBox menu){\n   401\t        removeOtherMenusImpl(menu);\n   402\t    }\n   403\t    private void removeOtherMenusImpl(VBox menu) {\n   404\t        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n   405\t            if(!entry.getKey().equals(menu))\n   406\t                entry.getKey().getChildren().remove(entry.getValue());\n   407\t        }\n   408\t    }\n   409\t\n   410\t    @FXML\n   411\t    void handleGioHangClick(MouseEvent event) {\n   412\t        try {\n   413\t            // Hiển thị menu bán hàng\n   414\t            if (banHangSubVBox != null && banHangSubMenuList != null) {\n   415\t                toolsSlider(banHangSubVBox, banHangSubMenuList);\n   416\t                removeOtherMenus(banHangSubVBox);\n   417\t            }\n   418\t\n   419\t            // Hiển thị giao diện bán hàng chính\n   420\t            showMainSalesInterface();\n   421\t\n   422\t            // Làm mới giỏ hàng\n   423\t            updateTotalAmount();\n   424\t        } catch (Exception e) {\n   425\t            System.err.println(\"Lỗi trong handleGioHangClick: \" + e.getMessage());\n   426\t            e.printStackTrace();\n   427\t        }\n   428\t    }\n   429\t\n   430\t    @FXML\n   431\t    void handleQuanLyClick(MouseEvent event) {\n   432\t        toolsSlider(quanLySubVBox,quanLySubMenuList);\n   433\t        removeOtherMenus(quanLySubVBox);\n   434\t    }\n   435\t\n   436\t    @FXML\n   437\t    void handleThongKeClick(MouseEvent event) {\n   438\t        toolsSlider(thongKeSubVBox,thongKeSubMenuList);\n   439\t        removeOtherMenus(thongKeSubVBox);\n   440\t    }\n   441\t\n   442\t    @FXML\n   443\t    void handleTimKiemClick(MouseEvent event) {\n   444\t        try {\n   445\t            // Chuyển đến giao diện TraCuu_gui.fxml\n   446\t            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/TraCuu_gui.fxml\"));\n   447\t            Parent root = loader.load();\n   448\t            Scene scene = new Scene(root);\n   449\t\n   450\t            // Lấy stage hiện tại\n   451\t            Stage stage = (Stage) p_gioHang.getScene().getWindow();\n   452\t\n   453\t            // Thiết lập scene mới\n   454\t            stage.setScene(scene);\n   455\t            stage.setTitle(\"Tra cứu sản phẩm\");\n   456\t\n   457\t            // Hiển thị stage\n   458\t            stage.show();\n   459\t\n   460\t            System.out.println(\"Chuyển đến giao diện tra cứu thành công\");\n   461\t        } catch (Exception e) {\n   462\t            e.printStackTrace();\n   463\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu: \" + e.getMessage());\n   464\t\n   465\t            // Nếu không thể mở giao diện tra cứu, hiển thị giao diện tìm kiếm trên giao diện hiện tại\n   466\t            toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n   467\t            removeOtherMenus(timKiemSubVBox);\n   468\t\n   469\t            // Hiển thị giao diện tìm kiếm\n   470\t            showSearchInterface();\n   471\t        }\n   472\t    }\n   473\t\n   474\t    @FXML\n   475\t    void toQLHoaDon(MouseEvent event) {\n   476\t        try {\n   477\t            // Chuyển đến giao diện quản lý hóa đơn\n   478\t            loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n   479\t        } catch (Exception e) {\n   480\t            e.printStackTrace();\n   481\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý hóa đơn!\");\n   482\t        }\n   483\t    }\n   484\t\n   485\t    @FXML\n   486\t    void toQLKhachHang(MouseEvent event) {\n   487\t        try {\n   488\t            // Chuyển đến giao diện quản lý khách hàng\n   489\t            loadFXML(\"/fxml/QL_KhachHang_gui.fxml\");\n   490\t        } catch (Exception e) {\n   491\t            e.printStackTrace();\n   492\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý khách hàng!\");\n   493\t        }\n   494\t    }\n   495\t\n   496\t    @FXML\n   497\t    void toQLNhanVien(MouseEvent event) {\n   498\t        try {\n   499\t            // Chuyển đến giao diện quản lý nhân viên\n   500\t            loadFXML(\"/fxml/QL_NhanVien_gui.fxml\");\n   501\t        } catch (Exception e) {\n   502\t            e.printStackTrace();\n   503\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý nhân viên!\");\n   504\t        }\n   505\t    }\n   506\t\n   507\t    @FXML\n   508\t    void toQLPhieuNhap(MouseEvent event) {\n   509\t        try {\n   510\t            // Chuyển đến giao diện quản lý phiếu nhập\n   511\t            loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n   512\t        } catch (Exception e) {\n   513\t            e.printStackTrace();\n   514\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n   515\t        }\n   516\t    }\n   517\t\n   518\t    @FXML\n   519\t    void toQLSanPham(MouseEvent event) {\n   520\t        try {\n   521\t            // Chuyển đến giao diện quản lý sản phẩm\n   522\t            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n   523\t        } catch (Exception e) {\n   524\t            e.printStackTrace();\n   525\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n   526\t        }\n   527\t    }\n   528\t\n   529\t    @FXML\n   530\t    void toQLTaiKhoan(MouseEvent event) {\n   531\t        try {\n   532\t            // Chuyển đến giao diện quản lý tài khoản\n   533\t            loadFXML(\"/fxml/QL_TaiKhoan_gui.fxml\");\n   534\t        } catch (Exception e) {\n   535\t            e.printStackTrace();\n   536\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý tài khoản!\");\n   537\t        }\n   538\t    }\n   539\t\n   540\t    @FXML\n   541\t    void toTKDoanhThu(MouseEvent event) {\n   542\t        try {\n   543\t            // Chuyển đến giao diện thống kê doanh thu\n   544\t            loadFXML(\"/fxml/ThongKeDoanhThu_gui.fxml\");\n   545\t        } catch (Exception e) {\n   546\t            e.printStackTrace();\n   547\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê doanh thu!\");\n   548\t        }\n   549\t    }\n   550\t\n   551\t    @FXML\n   552\t    void toTKSanPham(MouseEvent event) {\n   553\t        try {\n   554\t            // Chuyển đến giao diện thống kê sản phẩm\n   555\t            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n   556\t        } catch (Exception e) {\n   557\t            e.printStackTrace();\n   558\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n   559\t        }\n   560\t    }\n   561\t\n   562\t    @FXML\n   563\t    void themSanPham(MouseEvent event) {\n   564\t        // Lấy mã sản phẩm và số lượng từ các trường nhập liệu\n   565\t        String maSP = txt_nhapMa.getText().trim();\n   566\t        String soLuongStr = txt_nhapSL.getText().trim();\n   567\t\n   568\t        // Kiểm tra dữ liệu nhập vào\n   569\t        if (maSP.isEmpty()) {\n   570\t            showAlert(AlertType.WARNING, \"Thông báo\", \"Vui lòng nhập mã sản phẩm!\");\n   571\t            txt_nhapMa.requestFocus();\n   572\t            return;\n   573\t        }\n   574\t\n   575\t        if (soLuongStr.isEmpty()) {\n   576\t            showAlert(AlertType.WARNING, \"Thông báo\", \"Vui lòng nhập số lượng!\");\n   577\t            txt_nhapSL.requestFocus();\n   578\t            return;\n   579\t        }\n   580\t\n   581\t        try {\n   582\t            int soLuong = Integer.parseInt(soLuongStr);\n   583\t            if (soLuong <= 0) {\n   584\t                showAlert(AlertType.WARNING, \"Thông báo\", \"Số lượng phải lớn hơn 0!\");\n   585\t                txt_nhapSL.requestFocus();\n   586\t                return;\n   587\t            }\n   588\t\n   589\t            // Tìm kiếm sản phẩm theo mã và thêm vào giỏ hàng\n   590\t            addProductToCart(maSP, soLuong);\n   591\t\n   592\t            // Xóa dữ liệu trong các trường nhập liệu\n   593\t            txt_nhapMa.clear();\n   594\t            txt_nhapSL.clear();\n   595\t            txt_nhapMa.requestFocus();\n   596\t\n   597\t        } catch (NumberFormatException e) {\n   598\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Số lượng phải là số nguyên!\");\n   599\t            txt_nhapSL.requestFocus();\n   600\t        }\n   601\t    }\n   602\t\n   603\t    /**\n   604\t     * Hiển thị ngày và thời gian hiện tại\n   605\t     */\n   606\t    private void displayCurrentDateTime() {\n   607\t        // Hiển thị ngày hiện tại\n   608\t        LocalDate currentDate = LocalDate.now();\n   609\t        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\n   610\t        lb_ngayLap.setText(currentDate.format(dateFormatter));\n   611\t\n   612\t        // Hiển thị và cập nhật thời gian hiện tại mỗi giây\n   613\t        Timeline clock = new Timeline(new KeyFrame(Duration.ZERO, e -> {\n   614\t            LocalTime currentTime = LocalTime.now();\n   615\t            DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\n   616\t            lb_thoiGian.setText(currentTime.format(timeFormatter));\n   617\t        }), new KeyFrame(Duration.seconds(1)));\n   618\t\n   619\t        clock.setCycleCount(Timeline.INDEFINITE);\n   620\t        clock.play();\n   621\t    }\n   622\t\n   623\t    private void initializeNhanVien() {\n   624\t        try {\n   625\t            TaiKhoan taiKhoan = App.taiKhoan;\n   626\t            System.out.println(taiKhoan);\n   627\t            NhanVien nhanVien = taiKhoan.getNhanVien();\n   628\t            lb_tenNV.setText(nhanVien.getTenNV());\n   629\t            lb_chucVu.setText(nhanVien.getChucVu().toString());\n   630\t        } catch (Exception e) {\n   631\t            e.printStackTrace();\n   632\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể lấy thông tin nhân viên: \" + e.getMessage());\n   633\t        }\n   634\t    }\n   635\t\n   636\t    /**\n   637\t     * Khởi tạo thông tin hóa đơn\n   638\t     */\n   639\t    private void initializeInvoiceInfo() {\n   640\t        try {\n   641\t            // Hiển thị ngày lập hóa đơn\n   642\t            if (lb_ngayLap != null) {\n   643\t                DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\n   644\t                lb_ngayLap.setText(LocalDate.now().format(formatter));\n   645\t            }\n   646\t\n   647\t            // Thiết lập giá trị mặc định cho các trường\n   648\t            if (lb_giamGia != null) {\n   649\t                lb_giamGia.setText(\"0 VNĐ\");\n   650\t            }\n   651\t\n   652\t            if (lb_tongThanhToan != null) {\n   653\t                lb_tongThanhToan.setText(\"0 VNĐ\");\n   654\t            }\n   655\t\n   656\t            if (lb_tongSoSP != null) {\n   657\t                lb_tongSoSP.setText(\"0\");\n   658\t            }\n   659\t\n   660\t            if (lb_tongSL != null) {\n   661\t                lb_tongSL.setText(\"0\");\n   662\t            }\n   663\t\n   664\t            if (lb_tamTinh != null) {\n   665\t                lb_tamTinh.setText(\"0 VNĐ\");\n   666\t            }\n   667\t\n   668\t            if (txt_maGiamGia != null) {\n   669\t                txt_maGiamGia.setText(\"\");\n   670\t            }\n   671\t\n   672\t            if (ta_ghiChu != null) {\n   673\t                ta_ghiChu.setText(\"\");\n   674\t            }\n   675\t\n   676\t            // Thiết lập phương thức thanh toán mặc định\n   677\t            if (rb_tienMat != null) {\n   678\t                rb_tienMat.setSelected(true);\n   679\t            }\n   680\t\n   681\t            // Thiết lập giá trị mặc định cho tiền khách trả và tiền thừa\n   682\t            if (txt_tienKhachTra != null) {\n   683\t                txt_tienKhachTra.setText(\"\");\n   684\t            }\n   685\t\n   686\t            if (lb_tienThua != null) {\n   687\t                lb_tienThua.setText(\"0 VNĐ\");\n   688\t                lb_tienThua.setStyle(\"-fx-font-weight: bold; -fx-text-fill: #009900;\");\n   689\t            }\n   690\t\n   691\t            // Mặc định, nút thanh toán bị vô hiệu hóa cho đến khi khách hàng trả đủ tiền\n   692\t            if (btn_thanhToan != null) {\n   693\t                btn_thanhToan.setDisable(true);\n   694\t            }\n   695\t        } catch (Exception e) {\n   696\t            e.printStackTrace();\n   697\t            System.err.println(\"Lỗi khi khởi tạo thông tin hóa đơn: \" + e.getMessage());\n   698\t        }\n   699\t    }\n   700\t\n   701\t    /**\n   702\t     * Thiết lập sự kiện cho các thành phần trong Pane thông tin đơn hàng\n   703\t     */\n   704\t    private void setupInvoiceEvents() {\n   705\t        try {\n   706\t            // Sự kiện khi nhấn nút áp dụng mã giảm giá\n   707\t            if (btn_apDungMa != null) {\n   708\t                btn_apDungMa.setOnAction(event -> apDungMaGiamGia());\n   709\t            }\n   710\t\n   711\t            // Sự kiện khi thay đổi phương thức thanh toán\n   712\t            if (phuongThucTT != null) {\n   713\t                phuongThucTT.selectedToggleProperty().addListener((observable, oldValue, newValue) -> {\n   714\t                    updateTotalAmount();\n   715\t                });\n   716\t            }\n   717\t        } catch (Exception e) {\n   718\t            e.printStackTrace();\n   719\t            System.err.println(\"Lỗi khi thiết lập sự kiện cho thông tin hóa đơn: \" + e.getMessage());\n   720\t        }\n   721\t    }\n   722\t\n   723\t    /**\n   724\t     * Khởi tạo bảng giỏ hàng\n   725\t     */\n   726\t    private void initializeTable() {\n   727\t        try {\n   728\t            // Khởi tạo các cột cho bảng giỏ hàng\n   729\t            tcSTT.setCellValueFactory(cellData -> {\n   730\t                int index = cartItems.indexOf(cellData.getValue()) + 1;\n   731\t                return javafx.beans.binding.Bindings.createObjectBinding(() -> index);\n   732\t            });\n   733\t\n   734\t            tcMaSP.setCellValueFactory(new PropertyValueFactory<>(\"maSP\"));\n   735\t            tcTenSP.setCellValueFactory(new PropertyValueFactory<>(\"tenSP\"));\n   736\t\n   737\t            // Số lượng sản phẩm trong giỏ hàng\n   738\t            tcSoLuong.setCellValueFactory(cellData -> {\n   739\t                SanPham sp = cellData.getValue();\n   740\t                Integer quantity = productQuantities.getOrDefault(sp.getMaSP(), 0);\n   741\t                return javafx.beans.binding.Bindings.createObjectBinding(() -> quantity);\n   742\t            });\n   743\t\n   744\t            tcDonGia.setCellValueFactory(new PropertyValueFactory<>(\"giaBan\"));\n   745\t\n   746\t            // Thành tiền = giá bán * số lượng\n   747\t            tcThanhTien.setCellValueFactory(cellData -> {\n   748\t                SanPham sp = cellData.getValue();\n   749\t                Integer quantity = productQuantities.getOrDefault(sp.getMaSP(), 0);\n   750\t                Double thanhTien = sp.getGiaBan() * quantity;\n   751\t                return javafx.beans.binding.Bindings.createObjectBinding(() -> thanhTien);\n   752\t            });\n   753\t\n   754\t            // Định dạng hiển thị tiền tệ cho cột đơn giá và thành tiền\n   755\t            NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale(\"vi\", \"VN\"));\n   756\t\n   757\t            tcDonGia.setCellFactory(column -> new javafx.scene.control.TableCell<SanPham, Double>() {\n   758\t                @Override\n   759\t                protected void updateItem(Double item, boolean empty) {\n   760\t                    super.updateItem(item, empty);\n   761\t                    if (empty || item == null) {\n   762\t                        setText(null);\n   763\t                    } else {\n   764\t                        setText(currencyFormat.format(item));\n   765\t                    }\n   766\t                }\n   767\t            });\n   768\t\n   769\t            tcThanhTien.setCellFactory(column -> new javafx.scene.control.TableCell<SanPham, Double>() {\n   770\t                @Override\n   771\t                protected void updateItem(Double item, boolean empty) {\n   772\t                    super.updateItem(item, empty);\n   773\t                    if (empty || item == null) {\n   774\t                        setText(null);\n   775\t                    } else {\n   776\t                        setText(currencyFormat.format(item));\n   777\t                    }\n   778\t                }\n   779\t            });\n   780\t\n   781\t            // Khởi tạo danh sách giỏ hàng trống\n   782\t            cartItems = FXCollections.observableArrayList();\n   783\t            if (tableView != null) {\n   784\t                tableView.setItems(cartItems);\n   785\t\n   786\t                // Thêm sự kiện nhấp đúp vào bảng\n   787\t                tableView.setOnMouseClicked(this::handleSearchResultDoubleClick);\n   788\t\n   789\t                // Thêm context menu cho bảng\n   790\t                setupTableContextMenu();\n   791\t            } else {\n   792\t                System.out.println(\"TableView is null. Check your FXML file.\");\n   793\t            }\n   794\t        } catch (Exception e) {\n   795\t            e.printStackTrace();\n   796\t            System.out.println(\"Error initializing table: \" + e.getMessage());\n   797\t        }\n   798\t    }\n   799\t\n   800\t    /**\n   801\t     * Thêm sản phẩm vào giỏ hàng\n   802\t     */\n   803\t    private void addProductToCart(String maSP, int soLuong) {\n   804\t        try {\n   805\t            // Tìm kiếm sản phẩm theo mã\n   806\t            SanPham sanPham = sanPhamDao.read(maSP);\n   807\t\n   808\t            if (sanPham == null) {\n   809\t                showAlert(AlertType.ERROR, \"Lỗi\", \"Không tìm thấy sản phẩm có mã \" + maSP);\n   810\t                return;\n   811\t            }\n   812\t\n   813\t            // Kiểm tra số lượng tồn kho\n   814\t            if (sanPham.getSoLuongTon() < soLuong) {\n   815\t                showAlert(AlertType.WARNING, \"Cảnh báo\", \"Số lượng sản phẩm trong kho không đủ (còn \" + sanPham.getSoLuongTon() + \")\");\n   816\t                return;\n   817\t            }\n   818\t\n   819\t            // Kiểm tra xem sản phẩm đã có trong giỏ hàng chưa\n   820\t            boolean productExists = false;\n   821\t\n   822\t            for (SanPham sp : cartItems) {\n   823\t                if (sp.getMaSP().equals(maSP)) {\n   824\t                    // Nếu sản phẩm đã tồn tại, tăng số lượng\n   825\t                    int currentQuantity = productQuantities.getOrDefault(maSP, 0);\n   826\t                    productQuantities.put(maSP, currentQuantity + soLuong);\n   827\t                    productExists = true;\n   828\t                    break;\n   829\t                }\n   830\t            }\n   831\t\n   832\t            // Nếu sản phẩm chưa có trong giỏ hàng, thêm mới\n   833\t            if (!productExists) {\n   834\t                cartItems.add(sanPham);\n   835\t                productQuantities.put(maSP, soLuong);\n   836\t            }\n   837\t\n   838\t            // Cập nhật lại bảng\n   839\t            tableView.refresh();\n   840\t\n   841\t            // Cập nhật tổng tiền\n   842\t            updateTotalAmount();\n   843\t\n   844\t            // Hiển thị thông báo thành công\n   845\t            showAlert(AlertType.INFORMATION, \"Thông báo\", \"Đã thêm sản phẩm vào giỏ hàng!\");\n   846\t        } catch (Exception e) {\n   847\t            e.printStackTrace();\n   848\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể thêm sản phẩm vào giỏ hàng: \" + e.getMessage());\n   849\t        }\n   850\t    }\n   851\t\n   852\t    /**\n   853\t     * Hiển thị giao diện bán hàng chính\n   854\t     */\n   855\t    private void showMainSalesInterface() {\n   856\t        // Làm mới form nhập liệu\n   857\t        txt_nhapMa.clear();\n   858\t        txt_nhapSL.clear();\n   859\t        txt_tenKH.clear();\n   860\t        txt_sdt.clear();\n   861\t\n   862\t        // Focus vào trường nhập mã sản phẩm\n   863\t        txt_nhapMa.requestFocus();\n   864\t    }\n   865\t\n   866\t    /**\n   867\t     * Xóa sản phẩm khỏi giỏ hàng\n   868\t     */\n   869\t    private void removeProductFromCart(String maSP) {\n   870\t        try {\n   871\t            // Tìm sản phẩm trong giỏ hàng\n   872\t            SanPham productToRemove = null;\n   873\t            for (SanPham sp : cartItems) {\n   874\t                if (sp.getMaSP().equals(maSP)) {\n   875\t                    productToRemove = sp;\n   876\t                    break;\n   877\t                }\n   878\t            }\n   879\t\n   880\t            // Nếu tìm thấy sản phẩm, xóa khỏi giỏ hàng\n   881\t            if (productToRemove != null) {\n   882\t                cartItems.remove(productToRemove);\n   883\t                productQuantities.remove(maSP);\n   884\t                tableView.refresh();\n   885\t\n   886\t                // Cập nhật tổng tiền\n   887\t                updateTotalAmount();\n   888\t\n   889\t                showAlert(AlertType.INFORMATION, \"Thông báo\", \"Đã xóa sản phẩm khỏi giỏ hàng!\");\n   890\t            } else {\n   891\t                showAlert(AlertType.WARNING, \"Thông báo\", \"Không tìm thấy sản phẩm trong giỏ hàng!\");\n   892\t            }\n   893\t        } catch (Exception e) {\n   894\t            e.printStackTrace();\n   895\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể xóa sản phẩm khỏi giỏ hàng: \" + e.getMessage());\n   896\t        }\n   897\t    }\n   898\t\n   899\t    /**\n   900\t     * Tính tổng tiền hàng (chưa bao gồm thuế và giảm giá)\n   901\t     */\n   902\t    private double calculateSubtotal() {\n   903\t        double subtotal = 0;\n   904\t        for (SanPham sp : cartItems) {\n   905\t            int quantity = productQuantities.getOrDefault(sp.getMaSP(), 0);\n   906\t            subtotal += sp.getGiaBan() * quantity;\n   907\t        }\n   908\t        return subtotal;\n   909\t    }\n   910\t\n   911\t    /**\n   912\t     * Tính thuế VAT (8% tổng tiền hàng)\n   913\t     */\n   914\t    private double calculateVAT(double subtotal) {\n   915\t        return subtotal * 0.08; // 8% VAT\n   916\t    }\n   917\t\n   918\t    /**\n   919\t     * Tính giảm giá\n   920\t     */\n   921\t    private double calculateDiscount(double subtotal) {\n   922\t        try {\n   923\t            if (lb_giamGia != null && !lb_giamGia.getText().equals(\"0 VNĐ\")) {\n   924\t                try {\n   925\t                    String giamGiaStr = lb_giamGia.getText().replaceAll(\"[^\\\\d]\", \"\");\n   926\t                    return Double.parseDouble(giamGiaStr);\n   927\t                } catch (Exception e) {\n   928\t                    // Không làm gì nếu không thể chuyển đổi\n   929\t                }\n   930\t            }\n   931\t        } catch (Exception e) {\n   932\t            e.printStackTrace();\n   933\t        }\n   934\t        return 0;\n   935\t    }\n   936\t\n   937\t    /**\n   938\t     * Tính tổng tiền của giỏ hàng (bao gồm thuế và giảm giá)\n   939\t     */\n   940\t    private double calculateTotal() {\n   941\t        double subtotal = calculateSubtotal();\n   942\t        double vat = calculateVAT(subtotal);\n   943\t        double discount = calculateDiscount(subtotal);\n   944\t\n   945\t        return subtotal + vat - discount;\n   946\t    }\n   947\t\n   948\t    /**\n   949\t     * Tạo hóa đơn từ giỏ hàng\n   950\t     */\n   951\t    private void createInvoice() {\n   952\t        try {\n   953\t            // Check if the cart is empty\n   954\t            if (cartItems.isEmpty()) {\n   955\t                showAlert(AlertType.WARNING, \"Thông báo\", \"Giỏ hàng trống!\");\n   956\t                return;\n   957\t            }\n   958\t\n   959\t            // Validate customer information\n   960\t            String tenKH = txt_tenKH.getText().trim();\n   961\t            String sdt = txt_sdt.getText().trim();\n   962\t\n   963\t            // Generate invoice ID\n   964\t            String maHD = \"HD\" + System.currentTimeMillis();\n   965\t\n   966\t            // Handle shift (CaLam)\n   967\t            String maCa = \"CA\" + System.currentTimeMillis();\n   968\t            CaLam caLam = caLamDao.read(\"CA001\");\n   969\t            if (caLam == null) {\n   970\t                caLam = new CaLam();\n   971\t                caLam.setMaCa(maCa);\n   972\t                caLam.setGioBatDau(java.time.LocalDateTime.now());\n   973\t                caLam.setGioKetThuc(java.time.LocalDateTime.now().plusHours(8));\n   974\t                caLam.setTrangThai(true);\n   975\t\n   976\t                if (App.taiKhoan != null) {\n   977\t                    caLam.setTaiKhoan(App.taiKhoan);\n   978\t                } else {\n   979\t                    showAlert(AlertType.WARNING, \"Cảnh báo\", \"Không có tài khoản đăng nhập, sử dụng tài khoản mặc định\");\n   980\t                    return;\n   981\t                }\n   982\t\n   983\t                caLamDao.create(caLam);\n   984\t            }\n   985\t\n   986\t            // Handle customer (KhachHang)\n   987\t            KhachHang khachHang = null;\n   988\t            if (!tenKH.isEmpty() && !sdt.isEmpty()) {\n   989\t                khachHang = khachHangDao.findByPhone(sdt);\n   990\t                if (khachHang == null) {\n   991\t                    khachHang = new KhachHang();\n   992\t                    khachHang.setMaKH(\"KH\" + System.currentTimeMillis());\n   993\t                    khachHang.setTenKH(tenKH);\n   994\t                    khachHang.setSdt(sdt);\n   995\t                    khachHangDao.create(khachHang);\n   996\t                }\n   997\t            } else {\n   998\t                khachHang = khachHangDao.read(\"KH001\");\n   999\t                if (khachHang == null) {\n  1000\t                    khachHang = new KhachHang();\n  1001\t                    khachHang.setMaKH(\"KH001\");\n  1002\t                    khachHang.setTenKH(\"Khách hàng vãng lai\");\n  1003\t                    khachHang.setSdt(\"0000000000\");\n  1004\t                    khachHangDao.create(khachHang);\n  1005\t                }\n  1006\t            }\n  1007\t\n  1008\t            // Create invoice (HoaDon)\n  1009\t            HoaDon hoaDon = new HoaDon();\n  1010\t            hoaDon.setMaHD(maHD);\n  1011\t            hoaDon.setThoiGian(java.time.LocalDateTime.now());\n  1012\t            hoaDon.setTongSoLuongSP(productQuantities.values().stream().mapToInt(Integer::intValue).sum());\n  1013\t            // Tính tổng tiền thanh toán\n  1014\t            double tongTien = calculateTotal();\n  1015\t            hoaDon.setThanhTien(tongTien);\n  1016\t\n  1017\t            // Lấy thông tin tiền khách trả và tiền thừa\n  1018\t            double tienKhachTra = 0;\n  1019\t            double tienThua = 0;\n  1020\t            try {\n  1021\t                tienKhachTra = Double.parseDouble(txt_tienKhachTra.getText().trim());\n  1022\t                // Tính tiền thừa\n  1023\t                tienThua = tienKhachTra - tongTien;\n  1024\t            } catch (NumberFormatException e) {\n  1025\t                // Nếu không thể chuyển đổi, sử dụng giá trị mặc định\n  1026\t                tienKhachTra = tongTien;\n  1027\t                tienThua = 0;\n  1028\t            }\n  1029\t\n  1030\t            // Lưu thông tin tiền khách trả và tiền thừa vào hóa đơn\n  1031\t            // Nếu có trường tương ứng trong entity HoaDon\n  1032\t            // hoaDon.setTienKhachTra(tienKhachTra);\n  1033\t            // hoaDon.setTienThua(tienThua);\n  1034\t\n  1035\t            // Xác định phương thức thanh toán dựa trên lựa chọn\n  1036\t            PhuongThucThanhToan phuongThuc = PhuongThucThanhToan.Tien_Mat;\n  1037\t            if (rb_chuyenKhoan != null && rb_chuyenKhoan.isSelected()) {\n  1038\t                phuongThuc = PhuongThucThanhToan.Chuyen_Khoan;\n  1039\t            } else if (rb_the != null && rb_the.isSelected()) {\n  1040\t                phuongThuc = PhuongThucThanhToan.The_Ngan_Hang;\n  1041\t            }\n  1042\t            hoaDon.setPhuongThucTT(phuongThuc);\n  1043\t            hoaDon.setCaLam(caLam);\n  1044\t            hoaDon.setKhachHang(khachHang);\n  1045\t            hoaDonDao.create(hoaDon);\n  1046\t\n  1047\t            // Create invoice details (ChiTietHoaDon_SanPham)\n  1048\t            for (SanPham sp : cartItems) {\n  1049\t                int soLuong = productQuantities.getOrDefault(sp.getMaSP(), 0);\n  1050\t\n  1051\t                // Check stock availability\n  1052\t                if (sp.getSoLuongTon() < soLuong) {\n  1053\t                    showAlert(AlertType.WARNING, \"Thông báo\", \"Sản phẩm \" + sp.getTenSP() + \" không đủ số lượng trong kho!\");\n  1054\t                    return;\n  1055\t                }\n  1056\t\n  1057\t                ChiTietHoaDon_SanPhamId chiTietId = new ChiTietHoaDon_SanPhamId(maHD, sp.getMaSP());\n  1058\t                ChiTietHoaDon_SanPham chiTiet = new ChiTietHoaDon_SanPham();\n  1059\t                chiTiet.setId(chiTietId);\n  1060\t                chiTiet.setSoLuongSP(soLuong);\n  1061\t                chiTiet.setDonGia(sp.getGiaBan());\n  1062\t                chiTiet.setHoaDon(hoaDon);\n  1063\t                chiTiet.setSanPham(sp);\n  1064\t                chiTietHoaDonDao.create(chiTiet);\n  1065\t\n  1066\t                // Update stock\n  1067\t                sp.setSoLuongTon(sp.getSoLuongTon() - soLuong);\n  1068\t                sanPhamDao.update(sp);\n  1069\t            }\n  1070\t\n  1071\t            // Clear cart and refresh UI\n  1072\t            cartItems.clear();\n  1073\t            productQuantities.clear();\n  1074\t            tableView.refresh();\n  1075\t            txt_tenKH.clear();\n  1076\t            txt_sdt.clear();\n  1077\t            txt_nhapMa.clear();\n  1078\t            txt_nhapSL.clear();\n  1079\t\n  1080\t            // Xóa thông tin hóa đơn\n  1081\t            if (txt_maGiamGia != null) {\n  1082\t                txt_maGiamGia.clear();\n  1083\t            }\n  1084\t            if (ta_ghiChu != null) {\n  1085\t                ta_ghiChu.clear();\n  1086\t            }\n  1087\t            if (lb_giamGia != null) {\n  1088\t                lb_giamGia.setText(\"0 VNĐ\");\n  1089\t            }\n  1090\t\n  1091\t            // Xóa thông tin tiền khách trả và tiền thừa\n  1092\t            if (txt_tienKhachTra != null) {\n  1093\t                txt_tienKhachTra.clear();\n  1094\t            }\n  1095\t            if (lb_tienThua != null) {\n  1096\t                lb_tienThua.setText(\"0 VNĐ\");\n  1097\t                lb_tienThua.setStyle(\"-fx-font-weight: bold; -fx-text-fill: #009900;\");\n  1098\t            }\n  1099\t\n  1100\t            // Vô hiệu hóa nút thanh toán cho đến khi khách hàng trả đủ tiền\n  1101\t            if (btn_thanhToan != null) {\n  1102\t                btn_thanhToan.setDisable(true);\n  1103\t            }\n  1104\t\n  1105\t            // Cập nhật tổng tiền\n  1106\t            updateTotalAmount();\n  1107\t\n  1108\t            // Show success message\n  1109\t            showAlert(AlertType.INFORMATION, \"Thành công\", \"Đã tạo hóa đơn thành công!\");\n  1110\t\n  1111\t        } catch (Exception e) {\n  1112\t            e.printStackTrace();\n  1113\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể tạo hóa đơn: \" + e.getMessage());\n  1114\t        }\n  1115\t    }\n  1116\t\n  1117\t    /**\n  1118\t     * Hiển thị giao diện tìm kiếm\n  1119\t     */\n  1120\t    private void showSearchInterface() {\n  1121\t        try {\n  1122\t            // Làm mới form tìm kiếm\n  1123\t            txt_timKiem.clear();\n  1124\t            txt_timKiem.requestFocus();\n  1125\t\n  1126\t            // Khởi tạo dữ liệu tìm kiếm nếu cần\n  1127\t            initializeSearchData();\n  1128\t        } catch (Exception e) {\n  1129\t            e.printStackTrace();\n  1130\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể hiển thị giao diện tìm kiếm: \" + e.getMessage());\n  1131\t        }\n  1132\t    }\n  1133\t\n  1134\t    /**\n  1135\t     * Khởi tạo dữ liệu tìm kiếm\n  1136\t     */\n  1137\t    private void initializeSearchData() {\n  1138\t        try {\n  1139\t            // Tạo danh sách sản phẩm cho tìm kiếm\n  1140\t            ObservableList<SanPham> searchResults = FXCollections.observableArrayList();\n  1141\t\n  1142\t            // Lấy tất cả sản phẩm từ database\n  1143\t            List<SanPham> allProducts = sanPhamDao.readAll();\n  1144\t            searchResults.addAll(allProducts);\n  1145\t\n  1146\t            // Hiển thị kết quả tìm kiếm trong bảng\n  1147\t            // Sử dụng bảng hiện tại để hiển thị kết quả tìm kiếm\n  1148\t            tableView.setItems(searchResults);\n  1149\t\n  1150\t\n  1151\t            // Thêm sự kiện cho trường tìm kiếm\n  1152\t            setupSearchField();\n  1153\t        } catch (Exception e) {\n  1154\t            e.printStackTrace();\n  1155\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể khởi tạo dữ liệu tìm kiếm: \" + e.getMessage());\n  1156\t        }\n  1157\t    }\n  1158\t\n  1159\t    /**\n  1160\t     * Thiết lập sự kiện cho trường tìm kiếm\n  1161\t     */\n  1162\t    private void setupSearchField() {\n  1163\t        // Thêm sự kiện khi nhập vào trường tìm kiếm\n  1164\t        txt_timKiem.textProperty().addListener((observable, oldValue, newValue) -> {\n  1165\t            performSearch(newValue);\n  1166\t        });\n  1167\t    }\n  1168\t\n  1169\t    /**\n  1170\t     * Thực hiện tìm kiếm sản phẩm\n  1171\t     */\n  1172\t    private void performSearch(String keyword) {\n  1173\t        try {\n  1174\t            if (keyword == null || keyword.trim().isEmpty()) {\n  1175\t                // Nếu từ khóa trống, hiển thị tất cả sản phẩm\n  1176\t                List<SanPham> allProducts = sanPhamDao.readAll();\n  1177\t                tableView.setItems(FXCollections.observableArrayList(allProducts));\n  1178\t                return;\n  1179\t            }\n  1180\t\n  1181\t            // Tìm kiếm sản phẩm theo từ khóa\n  1182\t            List<SanPham> searchResults = new ArrayList<>();\n  1183\t            List<SanPham> allProducts = sanPhamDao.readAll();\n  1184\t\n  1185\t            // Lọc sản phẩm theo từ khóa (mã hoặc tên)\n  1186\t            String keywordLower = keyword.toLowerCase();\n  1187\t            for (SanPham sp : allProducts) {\n  1188\t                if (sp.getMaSP().toLowerCase().contains(keywordLower) ||\n  1189\t                        sp.getTenSP().toLowerCase().contains(keywordLower)) {\n  1190\t                    searchResults.add(sp);\n  1191\t                }\n  1192\t            }\n  1193\t\n  1194\t            // Cập nhật bảng và trạng thái\n  1195\t            tableView.setItems(FXCollections.observableArrayList(searchResults));\n  1196\t        } catch (Exception e) {\n  1197\t            e.printStackTrace();\n  1198\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể thực hiện tìm kiếm: \" + e.getMessage());\n  1199\t        }\n  1200\t    }\n  1201\t\n  1202\t    /**\n  1203\t     * Xử lý sự kiện khi nhấp đúp vào sản phẩm trong kết quả tìm kiếm\n  1204\t     */\n  1205\t    @FXML\n  1206\t    private void handleSearchResultDoubleClick(MouseEvent event) {\n  1207\t        if (event.getClickCount() == 2) { // Nhấp đúp\n  1208\t            SanPham selectedProduct = tableView.getSelectionModel().getSelectedItem();\n  1209\t            if (selectedProduct != null) {\n  1210\t                // Chuyển sang giao diện bán hàng và thêm sản phẩm vào giỏ hàng\n  1211\t                handleGioHangClick(null);\n  1212\t\n  1213\t                // Điền thông tin sản phẩm vào form\n  1214\t                txt_nhapMa.setText(selectedProduct.getMaSP());\n  1215\t                txt_nhapSL.setText(\"1\"); // Mặc định số lượng là 1\n  1216\t                txt_nhapSL.requestFocus();\n  1217\t            }\n  1218\t        }\n  1219\t    }\n  1220\t\n  1221\t    /**\n  1222\t     * Thiết lập context menu cho bảng giỏ hàng\n  1223\t     */\n  1224\t    private void setupTableContextMenu() {\n  1225\t        // Tạo context menu\n  1226\t        ContextMenu contextMenu = new ContextMenu();\n  1227\t\n  1228\t        // Tạo menu item Xóa\n  1229\t        MenuItem deleteItem = new MenuItem(\"Xóa sản phẩm\");\n  1230\t        deleteItem.setOnAction(event -> {\n  1231\t            // Lấy sản phẩm được chọn\n  1232\t            SanPham selectedProduct = tableView.getSelectionModel().getSelectedItem();\n  1233\t            if (selectedProduct != null) {\n  1234\t                // Xóa sản phẩm khỏi giỏ hàng\n  1235\t                removeProductFromCart(selectedProduct.getMaSP());\n  1236\t            }\n  1237\t        });\n  1238\t\n  1239\t        // Tạo menu item Xóa tất cả\n  1240\t        MenuItem clearAllItem = new MenuItem(\"Xóa tất cả\");\n  1241\t        clearAllItem.setOnAction(event -> {\n  1242\t            // Xóa tất cả sản phẩm trong giỏ hàng\n  1243\t            clearCart();\n  1244\t        });\n  1245\t\n  1246\t        // Tạo menu item Sửa số lượng\n  1247\t        MenuItem editItem = new MenuItem(\"Sửa số lượng\");\n  1248\t        editItem.setOnAction(event -> {\n  1249\t            // Lấy sản phẩm được chọn\n  1250\t            SanPham selectedProduct = tableView.getSelectionModel().getSelectedItem();\n  1251\t            if (selectedProduct != null) {\n  1252\t                // Hiển thị hộp thoại nhập số lượng mới\n  1253\t                editProductQuantity(selectedProduct);\n  1254\t            }\n  1255\t        });\n  1256\t\n  1257\t        // Thêm các menu item vào context menu\n  1258\t        contextMenu.getItems().addAll(deleteItem, editItem, clearAllItem);\n  1259\t\n  1260\t        // Gán context menu cho bảng\n  1261\t        tableView.setContextMenu(contextMenu);\n  1262\t    }\n  1263\t\n  1264\t    /**\n  1265\t     * Sửa số lượng sản phẩm trong giỏ hàng\n  1266\t     */\n  1267\t    private void editProductQuantity(SanPham product) {\n  1268\t        try {\n  1269\t            // Tạo dialog để nhập số lượng mới\n  1270\t            TextInputDialog dialog = new TextInputDialog(productQuantities.getOrDefault(product.getMaSP(), 1).toString());\n  1271\t            dialog.setTitle(\"Sửa số lượng\");\n  1272\t            dialog.setHeaderText(\"Sản phẩm: \" + product.getTenSP());\n  1273\t            dialog.setContentText(\"Nhập số lượng mới:\");\n  1274\t\n  1275\t            // Hiển thị dialog và đợi kết quả\n  1276\t            dialog.showAndWait().ifPresent(result -> {\n  1277\t                try {\n  1278\t                    // Chuyển kết quả thành số\n  1279\t                    int newQuantity = Integer.parseInt(result);\n  1280\t\n  1281\t                    // Kiểm tra số lượng hợp lệ\n  1282\t                    if (newQuantity <= 0) {\n  1283\t                        showAlert(AlertType.WARNING, \"Cảnh báo\", \"Số lượng phải lớn hơn 0!\");\n  1284\t                        return;\n  1285\t                    }\n  1286\t\n  1287\t                    // Kiểm tra số lượng tồn kho\n  1288\t                    if (newQuantity > product.getSoLuongTon()) {\n  1289\t                        showAlert(AlertType.WARNING, \"Cảnh báo\", \"Số lượng vượt quá số lượng tồn kho (\" + product.getSoLuongTon() + \")!\");\n  1290\t                        return;\n  1291\t                    }\n  1292\t\n  1293\t                    // Cập nhật số lượng\n  1294\t                    productQuantities.put(product.getMaSP(), newQuantity);\n  1295\t\n  1296\t                    // Cập nhật bảng và tổng tiền\n  1297\t                    tableView.refresh();\n  1298\t                    updateTotalAmount();\n  1299\t\n  1300\t                    showAlert(AlertType.INFORMATION, \"Thông báo\", \"Đã cập nhật số lượng sản phẩm!\");\n  1301\t                } catch (NumberFormatException e) {\n  1302\t                    showAlert(AlertType.ERROR, \"Lỗi\", \"Số lượng phải là số nguyên!\");\n  1303\t                }\n  1304\t            });\n  1305\t        } catch (Exception e) {\n  1306\t            e.printStackTrace();\n  1307\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể sửa số lượng sản phẩm: \" + e.getMessage());\n  1308\t        }\n  1309\t    }\n  1310\t\n  1311\t    /**\n  1312\t     * Xóa tất cả sản phẩm trong giỏ hàng\n  1313\t     */\n  1314\t    private void clearCart() {\n  1315\t        try {\n  1316\t            // Kiểm tra xem giỏ hàng có trống không\n  1317\t            if (cartItems.isEmpty()) {\n  1318\t                showAlert(AlertType.INFORMATION, \"Thông báo\", \"Giỏ hàng đã trống!\");\n  1319\t                return;\n  1320\t            }\n  1321\t\n  1322\t            // Hiển thị hộp thoại xác nhận\n  1323\t            Alert alert = new Alert(AlertType.CONFIRMATION);\n  1324\t            alert.setTitle(\"Xác nhận xóa\");\n  1325\t            alert.setHeaderText(null);\n  1326\t            alert.setContentText(\"Bạn có chắc chắn muốn xóa tất cả sản phẩm trong giỏ hàng?\");\n  1327\t\n  1328\t            // Nếu người dùng nhấn OK\n  1329\t            if (alert.showAndWait().get() == javafx.scene.control.ButtonType.OK) {\n  1330\t                // Xóa tất cả sản phẩm trong giỏ hàng\n  1331\t                cartItems.clear();\n  1332\t                productQuantities.clear();\n  1333\t                tableView.refresh();\n  1334\t\n  1335\t                // Cập nhật tổng tiền\n  1336\t                updateTotalAmount();\n  1337\t\n  1338\t                showAlert(AlertType.INFORMATION, \"Thông báo\", \"Đã xóa tất cả sản phẩm trong giỏ hàng!\");\n  1339\t            }\n  1340\t        } catch (Exception e) {\n  1341\t            e.printStackTrace();\n  1342\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể xóa giỏ hàng: \" + e.getMessage());\n  1343\t        }\n  1344\t    }\n  1345\t\n  1346\t    /**\n  1347\t     * Xử lý sự kiện khi nhấn nút đăng xuất\n  1348\t     */\n  1349\t    @FXML\n  1350\t    private void handleDangXuatClick(MouseEvent event) {\n  1351\t        try {\n  1352\t            // Hiển thị hộp thoại xác nhận\n  1353\t            Alert alert = new Alert(AlertType.CONFIRMATION);\n  1354\t            alert.setTitle(\"Xác nhận đăng xuất\");\n  1355\t            alert.setHeaderText(null);\n  1356\t            alert.setContentText(\"Bạn có chắc chắn muốn đăng xuất?\");\n  1357\t\n  1358\t            // Nếu người dùng nhấn OK\n  1359\t            if (alert.showAndWait().get() == javafx.scene.control.ButtonType.OK) {\n  1360\t                // Chuyển về màn hình đăng nhập\n  1361\t                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/Login_gui.fxml\"));\n  1362\t                Parent root = loader.load();\n  1363\t                Scene scene = new Scene(root);\n  1364\t\n  1365\t                // Lấy stage hiện tại\n  1366\t                Stage stage = (Stage) btn_dangXuat.getScene().getWindow();\n  1367\t\n  1368\t                // Thiết lập scene mới\n  1369\t                stage.setScene(scene);\n  1370\t                stage.setTitle(\"Đăng nhập\");\n  1371\t\n  1372\t                // Xóa thông tin đăng nhập hiện tại\n  1373\t                App.taiKhoan = null;\n  1374\t                App.user = null;\n  1375\t                App.ma = null;\n  1376\t\n  1377\t                // Hiển thị stage\n  1378\t                stage.show();\n  1379\t\n  1380\t                System.out.println(\"Đã đăng xuất thành công\");\n  1381\t            }\n  1382\t        } catch (Exception e) {\n  1383\t            e.printStackTrace();\n  1384\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể đăng xuất: \" + e.getMessage());\n  1385\t        }\n  1386\t    }\n  1387\t\n  1388\t    /**\n  1389\t     * Áp dụng mã giảm giá (gọi từ FXML)\n  1390\t     */\n  1391\t    @FXML\n  1392\t    private void apDungMaGiamGia(MouseEvent event) {\n  1393\t        apDungMaGiamGia();\n  1394\t    }\n  1395\t\n  1396\t    /**\n  1397\t     * Áp dụng mã giảm giá\n  1398\t     */\n  1399\t    private void apDungMaGiamGia() {\n  1400\t        try {\n  1401\t            if (txt_maGiamGia != null) {\n  1402\t                String maGiamGia = txt_maGiamGia.getText().trim();\n  1403\t\n  1404\t                if (maGiamGia.isEmpty()) {\n  1405\t                    showAlert(AlertType.WARNING, \"Cảnh báo\", \"Vui lòng nhập mã giảm giá!\");\n  1406\t                    return;\n  1407\t                }\n  1408\t\n  1409\t                // TODO: Kiểm tra mã giảm giá trong cơ sở dữ liệu\n  1410\t                // Đây là một ví dụ đơn giản\n  1411\t                double giamGia = 0;\n  1412\t\n  1413\t                if (maGiamGia.equals(\"SALE10\")) {\n  1414\t                    giamGia = calculateSubtotal() * 0.1; // Giảm 10%\n  1415\t                } else if (maGiamGia.equals(\"SALE20\")) {\n  1416\t                    giamGia = calculateSubtotal() * 0.2; // Giảm 20%\n  1417\t                } else if (maGiamGia.equals(\"SALE50\")) {\n  1418\t                    giamGia = calculateSubtotal() * 0.5; // Giảm 50%\n  1419\t                } else {\n  1420\t                    showAlert(AlertType.ERROR, \"Lỗi\", \"Mã giảm giá không hợp lệ!\");\n  1421\t                    return;\n  1422\t                }\n  1423\t\n  1424\t                // Cập nhật giảm giá\n  1425\t                NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale(\"vi\", \"VN\"));\n  1426\t                if (lb_giamGia != null) {\n  1427\t                    lb_giamGia.setText(currencyFormat.format(giamGia));\n  1428\t                }\n  1429\t\n  1430\t                // Cập nhật tổng thanh toán\n  1431\t                double tongTien = calculateSubtotal() + calculateVAT(calculateSubtotal()) - giamGia;\n  1432\t                if (lb_tongThanhToan != null) {\n  1433\t                    lb_tongThanhToan.setText(currencyFormat.format(tongTien));\n  1434\t                }\n  1435\t\n  1436\t                showAlert(AlertType.INFORMATION, \"Thành công\", \"Áp dụng mã giảm giá thành công!\");\n  1437\t            }\n  1438\t        } catch (Exception e) {\n  1439\t            e.printStackTrace();\n  1440\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể áp dụng mã giảm giá: \" + e.getMessage());\n  1441\t        }\n  1442\t    }\n  1443\t\n  1444\t    /**\n  1445\t     * Cập nhật tổng tiền trong giỏ hàng\n  1446\t     */\n  1447\t    private void updateTotalAmount() {\n  1448\t        try {\n  1449\t            // Tính tổng số sản phẩm (số loại sản phẩm)\n  1450\t            int tongSoSP = cartItems.size();\n  1451\t            if (lb_tongSoSP != null) {\n  1452\t                lb_tongSoSP.setText(String.valueOf(tongSoSP));\n  1453\t            }\n  1454\t\n  1455\t            // Tính tổng số lượng (tổng số mặt hàng)\n  1456\t            int tongSL = 0;\n  1457\t            for (Integer quantity : productQuantities.values()) {\n  1458\t                tongSL += quantity;\n  1459\t            }\n  1460\t            if (lb_tongSL != null) {\n  1461\t                lb_tongSL.setText(String.valueOf(tongSL));\n  1462\t            }\n  1463\t\n  1464\t            // Tính tạm tính (tổng tiền hàng chưa bao gồm thuế)\n  1465\t            double tamTinh = calculateSubtotal();\n  1466\t            NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale(\"vi\", \"VN\"));\n  1467\t            if (lb_tamTinh != null) {\n  1468\t                lb_tamTinh.setText(currencyFormat.format(tamTinh));\n  1469\t            }\n  1470\t\n  1471\t            // Tính tổng tiền (bao gồm thuế)\n  1472\t            double total = calculateTotal();\n  1473\t            if (lb_tongTien != null) {\n  1474\t                lb_tongTien.setText(currencyFormat.format(total));\n  1475\t            }\n  1476\t\n  1477\t            // Cập nhật tổng thanh toán\n  1478\t            double tongTien = total;\n  1479\t\n  1480\t            // Trừ giảm giá nếu có\n  1481\t            if (lb_giamGia != null && !lb_giamGia.getText().equals(\"0 VNĐ\")) {\n  1482\t                try {\n  1483\t                    String giamGiaStr = lb_giamGia.getText().replaceAll(\"[^\\\\d]\", \"\");\n  1484\t                    double giamGia = Double.parseDouble(giamGiaStr);\n  1485\t                    tongTien -= giamGia;\n  1486\t                } catch (Exception e) {\n  1487\t                    // Không làm gì nếu không thể chuyển đổi\n  1488\t                }\n  1489\t            }\n  1490\t\n  1491\t            // Cập nhật tổng thanh toán\n  1492\t            if (lb_tongThanhToan != null) {\n  1493\t                lb_tongThanhToan.setText(currencyFormat.format(tongTien));\n  1494\t            }\n  1495\t        } catch (Exception e) {\n  1496\t            e.printStackTrace();\n  1497\t            // Xử lý lỗi và đặt giá trị mặc định\n  1498\t            if (lb_tongSoSP != null) {\n  1499\t                lb_tongSoSP.setText(\"0\");\n  1500\t            }\n  1501\t            if (lb_tongSL != null) {\n  1502\t                lb_tongSL.setText(\"0\");\n  1503\t            }\n  1504\t            if (lb_tamTinh != null) {\n  1505\t                lb_tamTinh.setText(\"0 VNĐ\");\n  1506\t            }\n  1507\t            if (lb_tongTien != null) {\n  1508\t                lb_tongTien.setText(\"0 VNĐ\");\n  1509\t            }\n  1510\t            if (lb_tongThanhToan != null) {\n  1511\t                lb_tongThanhToan.setText(\"0 VNĐ\");\n  1512\t            }\n  1513\t        }\n  1514\t    }\n  1515\t\n  1516\t    /**\n  1517\t     * Xử lý sự kiện khi nhấn nút thanh toán\n  1518\t     */\n  1519\t    @FXML\n  1520\t    void thanhToan(MouseEvent event) {\n  1521\t        if (cartItems.isEmpty()) {\n  1522\t            showAlert(AlertType.WARNING, \"Thông báo\", \"Giỏ hàng trống!\");\n  1523\t            return;\n  1524\t        }\n  1525\t\n  1526\t        // Kiểm tra xem khách hàng đã trả đủ tiền chưa\n  1527\t        if (txt_tienKhachTra.getText().trim().isEmpty()) {\n  1528\t            showAlert(AlertType.WARNING, \"Thông báo\", \"Vui lòng nhập số tiền khách trả!\");\n  1529\t            txt_tienKhachTra.requestFocus();\n  1530\t            return;\n  1531\t        }\n  1532\t\n  1533\t        // Kiểm tra xem tiền thừa có âm không\n  1534\t        if (lb_tienThua.getText().startsWith(\"-\")) {\n  1535\t            showAlert(AlertType.WARNING, \"Thông báo\", \"Số tiền khách trả chưa đủ!\");\n  1536\t            txt_tienKhachTra.requestFocus();\n  1537\t            return;\n  1538\t        }\n  1539\t\n  1540\t        // Xác nhận thanh toán\n  1541\t        Alert alert = new Alert(AlertType.CONFIRMATION);\n  1542\t        alert.setTitle(\"Xác nhận thanh toán\");\n  1543\t        alert.setHeaderText(null);\n  1544\t\n  1545\t        // Tạo nội dung xác nhận chi tiết hơn\n  1546\t        StringBuilder content = new StringBuilder(\"Thông tin thanh toán:\\n\");\n  1547\t        content.append(\"Tổng sản phẩm: \").append(cartItems.size()).append(\"\\n\");\n  1548\t\n  1549\t        // Lấy tổng tiền từ lb_tongThanhToan\n  1550\t        String tongTien = \"0 VNĐ\";\n  1551\t        if (lb_tongThanhToan != null) {\n  1552\t            tongTien = lb_tongThanhToan.getText();\n  1553\t        } else if (lb_tongTien != null) {\n  1554\t            tongTien = lb_tongTien.getText();\n  1555\t        }\n  1556\t        content.append(\"Tổng thanh toán: \").append(tongTien).append(\"\\n\");\n  1557\t\n  1558\t        // Lấy phương thức thanh toán\n  1559\t        String phuongThuc = \"Tiền mặt\";\n  1560\t        if (rb_chuyenKhoan != null && rb_chuyenKhoan.isSelected()) {\n  1561\t            phuongThuc = \"Chuyển khoản\";\n  1562\t        } else if (rb_the != null && rb_the.isSelected()) {\n  1563\t            phuongThuc = \"Thẻ\";\n  1564\t        }\n  1565\t        content.append(\"Phương thức thanh toán: \").append(phuongThuc).append(\"\\n\");\n  1566\t\n  1567\t        // Lấy ghi chú nếu có\n  1568\t        if (ta_ghiChu != null && !ta_ghiChu.getText().trim().isEmpty()) {\n  1569\t            content.append(\"Ghi chú: \").append(ta_ghiChu.getText().trim()).append(\"\\n<response clipped><NOTE>To save on context only part of this file has been shown to you.</NOTE>\nTotal lines in file: 1696\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01XQuACphaoCSirB29gCrjU3"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Let me check the handleTimKiemClick method in BanHang_controller.java:\n","workspace_file_chunks":[]},{"status":"success","request_id":"70f6d6af-fb36-45d1-a65e-989cf84ad99a","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_018r8CLSmBDE1CxxscPFXXxR","tool_name":"str-replace-editor","input_json":"{\"command\": \"view\", \"path\": \"src/main/java/iuh/fit/controller/BanHang_controller.java\", \"view_range\": [1349, 1386]}"}},{"id":0,"type":0,"content":"Now let's check the handleDangXuatClick method in BanHang_controller.java:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Successfully edited the file src/main/java/iuh/fit/controller/BanHang_controller.java.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n   438\t        toolsSlider(thongKeSubVBox,thongKeSubMenuList);\n   439\t        removeOtherMenus(thongKeSubVBox);\n   440\t    }\n   441\t\n   442\t    @FXML\n   443\t    void handleTimKiemClick(MouseEvent event) {\n   444\t        try {\n   445\t            // Chuyển đến giao diện tra cứu\n   446\t            loadFXML(\"/fxml/TraCuu_gui.fxml\");\n   447\t        } catch (Exception e) {\n   448\t            e.printStackTrace();\n   449\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu: \" + e.getMessage());\n   450\t\n   451\t            // Nếu không thể mở giao diện tra cứu, hiển thị giao diện tìm kiếm trên giao diện hiện tại\n   452\t            toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n   453\t            removeOtherMenus(timKiemSubVBox);\n   454\t\n   455\t            // Hiển thị giao diện tìm kiếm\n   456\t            showSearchInterface();\n   457\t        }\n   458\t    }\n   459\t\n   460\t    @FXML\n   461\t    void toQLHoaDon(MouseEvent event) {\n   462\t        try {\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01TJbsaPQTkAtcJARRyxGJPu"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Now let's check the handleDangXuatClick method in BanHang_controller.java:\n","workspace_file_chunks":[]},{"status":"success","request_id":"a95ebffb-1c0d-4ac1-8afc-6b84f08f7a61","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01K1is1dQzPzH8wnLbRwycY1","tool_name":"str-replace-editor","input_json":"{\"command\": \"view\", \"path\": \"src/main/java/iuh/fit/controller/BanHang_controller.java\", \"view_range\": [1349, 1372]}"}},{"id":0,"type":0,"content":"Let's see the full handleDangXuatClick method:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here's the result of running `cat -n` on src/main/java/iuh/fit/controller/BanHang_controller.java:\n  1349\t                Scene scene = new Scene(root);\n  1350\t\n  1351\t                // Lấy stage hiện tại\n  1352\t                Stage stage = (Stage) btn_dangXuat.getScene().getWindow();\n  1353\t\n  1354\t                // Thiết lập scene mới\n  1355\t                stage.setScene(scene);\n  1356\t                stage.setTitle(\"Đăng nhập\");\n  1357\t\n  1358\t                // Xóa thông tin đăng nhập hiện tại\n  1359\t                App.taiKhoan = null;\n  1360\t                App.user = null;\n  1361\t                App.ma = null;\n  1362\t\n  1363\t                // Hiển thị stage\n  1364\t                stage.show();\n  1365\t\n  1366\t                System.out.println(\"Đã đăng xuất thành công\");\n  1367\t            }\n  1368\t        } catch (Exception e) {\n  1369\t            e.printStackTrace();\n  1370\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể đăng xuất: \" + e.getMessage());\n  1371\t        }\n  1372\t    }\n  1373\t\n  1374\t    /**\n  1375\t     * Áp dụng mã giảm giá (gọi từ FXML)\n  1376\t     */\n  1377\t    @FXML\n  1378\t    private void apDungMaGiamGia(MouseEvent event) {\n  1379\t        apDungMaGiamGia();\n  1380\t    }\n  1381\t\n  1382\t    /**\n  1383\t     * Áp dụng mã giảm giá\n  1384\t     */\n  1385\t    private void apDungMaGiamGia() {\n  1386\t        try {\nTotal lines in file: 1682\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_018r8CLSmBDE1CxxscPFXXxR"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Let's see the full handleDangXuatClick method:\n","workspace_file_chunks":[]},{"status":"success","request_id":"41858164-d0df-4ac0-a684-e3414a2380bb","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01SFRm7Pk4TWwyEKhzhhKRDb","tool_name":"str-replace-editor","input_json":"{\"command\": \"view\", \"path\": \"src/main/java/iuh/fit/controller/BanHang_controller.java\", \"view_range\": [1340, 1372]}"}},{"id":0,"type":0,"content":"Let's see the beginning of the handleDangXuatClick method:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here's the result of running `cat -n` on src/main/java/iuh/fit/controller/BanHang_controller.java:\n  1349\t                Scene scene = new Scene(root);\n  1350\t\n  1351\t                // Lấy stage hiện tại\n  1352\t                Stage stage = (Stage) btn_dangXuat.getScene().getWindow();\n  1353\t\n  1354\t                // Thiết lập scene mới\n  1355\t                stage.setScene(scene);\n  1356\t                stage.setTitle(\"Đăng nhập\");\n  1357\t\n  1358\t                // Xóa thông tin đăng nhập hiện tại\n  1359\t                App.taiKhoan = null;\n  1360\t                App.user = null;\n  1361\t                App.ma = null;\n  1362\t\n  1363\t                // Hiển thị stage\n  1364\t                stage.show();\n  1365\t\n  1366\t                System.out.println(\"Đã đăng xuất thành công\");\n  1367\t            }\n  1368\t        } catch (Exception e) {\n  1369\t            e.printStackTrace();\n  1370\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể đăng xuất: \" + e.getMessage());\n  1371\t        }\n  1372\t    }\nTotal lines in file: 1682\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01K1is1dQzPzH8wnLbRwycY1"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Let's see the beginning of the handleDangXuatClick method:\n","workspace_file_chunks":[]},{"status":"success","request_id":"97a53a00-c440-42bc-a6c5-e3f1ecc7ebbc","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01CeAxqsiBMFKubb4bhftYT2","tool_name":"str-replace-editor","input_json":"{\"command\": \"view\", \"path\": \"src/main/java/iuh/fit/controller/BanHang_controller.java\", \"view_range\": [1330, 1372]}"}},{"id":0,"type":0,"content":"Let's see the very beginning of the handleDangXuatClick method:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here's the result of running `cat -n` on src/main/java/iuh/fit/controller/BanHang_controller.java:\n  1340\t            alert.setTitle(\"Xác nhận đăng xuất\");\n  1341\t            alert.setHeaderText(null);\n  1342\t            alert.setContentText(\"Bạn có chắc chắn muốn đăng xuất?\");\n  1343\t\n  1344\t            // Nếu người dùng nhấn OK\n  1345\t            if (alert.showAndWait().get() == javafx.scene.control.ButtonType.OK) {\n  1346\t                // Chuyển về màn hình đăng nhập\n  1347\t                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/Login_gui.fxml\"));\n  1348\t                Parent root = loader.load();\n  1349\t                Scene scene = new Scene(root);\n  1350\t\n  1351\t                // Lấy stage hiện tại\n  1352\t                Stage stage = (Stage) btn_dangXuat.getScene().getWindow();\n  1353\t\n  1354\t                // Thiết lập scene mới\n  1355\t                stage.setScene(scene);\n  1356\t                stage.setTitle(\"Đăng nhập\");\n  1357\t\n  1358\t                // Xóa thông tin đăng nhập hiện tại\n  1359\t                App.taiKhoan = null;\n  1360\t                App.user = null;\n  1361\t                App.ma = null;\n  1362\t\n  1363\t                // Hiển thị stage\n  1364\t                stage.show();\n  1365\t\n  1366\t                System.out.println(\"Đã đăng xuất thành công\");\n  1367\t            }\n  1368\t        } catch (Exception e) {\n  1369\t            e.printStackTrace();\n  1370\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể đăng xuất: \" + e.getMessage());\n  1371\t        }\n  1372\t    }\nTotal lines in file: 1682\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01SFRm7Pk4TWwyEKhzhhKRDb"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Let's see the very beginning of the handleDangXuatClick method:\n","workspace_file_chunks":[]},{"status":"success","request_id":"5c6b8ca5-4799-49a6-a8f5-91b93f0e2db0","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01SEv9taJ37iP8CysqM9J9Q7","tool_name":"str-replace-editor","input_json":"{\"command\": \"str_replace\", \"path\": \"src/main/java/iuh/fit/controller/BanHang_controller.java\", \"str_replace_entries\": [{\"old_str\": \"    @FXML\\n    private void handleDangXuatClick(MouseEvent event) {\\n        try {\\n            // Hi\\u1ec3n th\\u1ecb h\\u1ed9p tho\\u1ea1i x\\u00e1c nh\\u1eadn\\n            Alert alert = new Alert(AlertType.CONFIRMATION);\\n            alert.setTitle(\\\"X\\u00e1c nh\\u1eadn \\u0111\\u0103ng xu\\u1ea5t\\\");\\n            alert.setHeaderText(null);\\n            alert.setContentText(\\\"B\\u1ea1n c\\u00f3 ch\\u1eafc ch\\u1eafn mu\\u1ed1n \\u0111\\u0103ng xu\\u1ea5t?\\\");\\n\\n            // N\\u1ebfu ng\\u01b0\\u1eddi d\\u00f9ng nh\\u1ea5n OK\\n            if (alert.showAndWait().get() == javafx.scene.control.ButtonType.OK) {\\n                // Chuy\\u1ec3n v\\u1ec1 m\\u00e0n h\\u00ecnh \\u0111\\u0103ng nh\\u1eadp\\n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\\\"/fxml/Login_gui.fxml\\\"));\\n                Parent root = loader.load();\\n                Scene scene = new Scene(root);\\n\\n                // L\\u1ea5y stage hi\\u1ec7n t\\u1ea1i\\n                Stage stage = (Stage) btn_dangXuat.getScene().getWindow();\\n\\n                // Thi\\u1ebft l\\u1eadp scene m\\u1edbi\\n                stage.setScene(scene);\\n                stage.setTitle(\\\"\\u0110\\u0103ng nh\\u1eadp\\\");\\n\\n                // X\\u00f3a th\\u00f4ng tin \\u0111\\u0103ng nh\\u1eadp hi\\u1ec7n t\\u1ea1i\\n                App.taiKhoan = null;\\n                App.user = null;\\n                App.ma = null;\\n\\n                // Hi\\u1ec3n th\\u1ecb stage\\n                stage.show();\\n\\n                System.out.println(\\\"\\u0110\\u00e3 \\u0111\\u0103ng xu\\u1ea5t th\\u00e0nh c\\u00f4ng\\\");\\n            }\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            showAlert(AlertType.ERROR, \\\"L\\u1ed7i\\\", \\\"Kh\\u00f4ng th\\u1ec3 \\u0111\\u0103ng xu\\u1ea5t: \\\" + e.getMessage());\\n        }\\n    }\", \"new_str\": \"    @FXML\\n    private void handleDangXuatClick(MouseEvent event) {\\n        try {\\n            // Hi\\u1ec3n th\\u1ecb h\\u1ed9p tho\\u1ea1i x\\u00e1c nh\\u1eadn\\n            Alert alert = new Alert(AlertType.CONFIRMATION);\\n            alert.setTitle(\\\"X\\u00e1c nh\\u1eadn \\u0111\\u0103ng xu\\u1ea5t\\\");\\n            alert.setHeaderText(null);\\n            alert.setContentText(\\\"B\\u1ea1n c\\u00f3 ch\\u1eafc ch\\u1eafn mu\\u1ed1n \\u0111\\u0103ng xu\\u1ea5t?\\\");\\n\\n            // N\\u1ebfu ng\\u01b0\\u1eddi d\\u00f9ng nh\\u1ea5n OK\\n            if (alert.showAndWait().get() == javafx.scene.control.ButtonType.OK) {\\n                // X\\u00f3a th\\u00f4ng tin \\u0111\\u0103ng nh\\u1eadp hi\\u1ec7n t\\u1ea1i\\n                App.taiKhoan = null;\\n                App.user = null;\\n                App.ma = null;\\n                \\n                // Chuy\\u1ec3n v\\u1ec1 m\\u00e0n h\\u00ecnh \\u0111\\u0103ng nh\\u1eadp\\n                try {\\n                    loadFXML(\\\"/fxml/Login_gui.fxml\\\");\\n                    System.out.println(\\\"\\u0110\\u00e3 \\u0111\\u0103ng xu\\u1ea5t th\\u00e0nh c\\u00f4ng\\\");\\n                } catch (Exception e) {\\n                    e.printStackTrace();\\n                    showAlert(AlertType.ERROR, \\\"L\\u1ed7i\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n \\u0111\\u0103ng nh\\u1eadp: \\\" + e.getMessage());\\n                }\\n            }\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n            showAlert(AlertType.ERROR, \\\"L\\u1ed7i\\\", \\\"Kh\\u00f4ng th\\u1ec3 \\u0111\\u0103ng xu\\u1ea5t: \\\" + e.getMessage());\\n        }\\n    }\", \"old_str_start_line_number\": 1336, \"old_str_end_line_number\": 1372}]}"}},{"id":0,"type":0,"content":"Now let's fix the handleDangXuatClick method:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here's the result of running `cat -n` on src/main/java/iuh/fit/controller/BanHang_controller.java:\n  1330\t    }\n  1331\t\n  1332\t    /**\n  1333\t     * Xử lý sự kiện khi nhấn nút đăng xuất\n  1334\t     */\n  1335\t    @FXML\n  1336\t    private void handleDangXuatClick(MouseEvent event) {\n  1337\t        try {\n  1338\t            // Hiển thị hộp thoại xác nhận\n  1339\t            Alert alert = new Alert(AlertType.CONFIRMATION);\n  1340\t            alert.setTitle(\"Xác nhận đăng xuất\");\n  1341\t            alert.setHeaderText(null);\n  1342\t            alert.setContentText(\"Bạn có chắc chắn muốn đăng xuất?\");\n  1343\t\n  1344\t            // Nếu người dùng nhấn OK\n  1345\t            if (alert.showAndWait().get() == javafx.scene.control.ButtonType.OK) {\n  1346\t                // Chuyển về màn hình đăng nhập\n  1347\t                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/Login_gui.fxml\"));\n  1348\t                Parent root = loader.load();\n  1349\t                Scene scene = new Scene(root);\n  1350\t\n  1351\t                // Lấy stage hiện tại\n  1352\t                Stage stage = (Stage) btn_dangXuat.getScene().getWindow();\n  1353\t\n  1354\t                // Thiết lập scene mới\n  1355\t                stage.setScene(scene);\n  1356\t                stage.setTitle(\"Đăng nhập\");\n  1357\t\n  1358\t                // Xóa thông tin đăng nhập hiện tại\n  1359\t                App.taiKhoan = null;\n  1360\t                App.user = null;\n  1361\t                App.ma = null;\n  1362\t\n  1363\t                // Hiển thị stage\n  1364\t                stage.show();\n  1365\t\n  1366\t                System.out.println(\"Đã đăng xuất thành công\");\n  1367\t            }\n  1368\t        } catch (Exception e) {\n  1369\t            e.printStackTrace();\n  1370\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể đăng xuất: \" + e.getMessage());\n  1371\t        }\n  1372\t    }\nTotal lines in file: 1682\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01CeAxqsiBMFKubb4bhftYT2"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Now let's fix the handleDangXuatClick method:\n","workspace_file_chunks":[]},{"status":"success","request_id":"ae9228d5-e5d9-44bc-b62e-79078f335e2c","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01RssH3UYYdeJVSf38kP77GP","tool_name":"str-replace-editor","input_json":"{\"command\": \"view\", \"path\": \"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java\"}"}},{"id":0,"type":0,"content":"Now let's check the TraCuuNhanVien_controller.java file to fix its navigation methods:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Successfully edited the file src/main/java/iuh/fit/controller/BanHang_controller.java.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n  1331\t\n  1332\t    /**\n  1333\t     * Xử lý sự kiện khi nhấn nút đăng xuất\n  1334\t     */\n  1335\t    @FXML\n  1336\t    private void handleDangXuatClick(MouseEvent event) {\n  1337\t        try {\n  1338\t            // Hiển thị hộp thoại xác nhận\n  1339\t            Alert alert = new Alert(AlertType.CONFIRMATION);\n  1340\t            alert.setTitle(\"Xác nhận đăng xuất\");\n  1341\t            alert.setHeaderText(null);\n  1342\t            alert.setContentText(\"Bạn có chắc chắn muốn đăng xuất?\");\n  1343\t\n  1344\t            // Nếu người dùng nhấn OK\n  1345\t            if (alert.showAndWait().get() == javafx.scene.control.ButtonType.OK) {\n  1346\t                // Xóa thông tin đăng nhập hiện tại\n  1347\t                App.taiKhoan = null;\n  1348\t                App.user = null;\n  1349\t                App.ma = null;\n  1350\t\n  1351\t                // Chuyển về màn hình đăng nhập\n  1352\t                try {\n  1353\t                    loadFXML(\"/fxml/Login_gui.fxml\");\n  1354\t                    System.out.println(\"Đã đăng xuất thành công\");\n  1355\t                } catch (Exception e) {\n  1356\t                    e.printStackTrace();\n  1357\t                    showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện đăng nhập: \" + e.getMessage());\n  1358\t                }\n  1359\t            }\n  1360\t        } catch (Exception e) {\n  1361\t            e.printStackTrace();\n  1362\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể đăng xuất: \" + e.getMessage());\n  1363\t        }\n  1364\t    }\n  1365\t\n  1366\t    /**\n  1367\t     * Áp dụng mã giảm giá (gọi từ FXML)\n  1368\t     */\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01SEv9taJ37iP8CysqM9J9Q7"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Now let's check the TraCuuNhanVien_controller.java file to fix its navigation methods:\n","workspace_file_chunks":[]},{"status":"success","request_id":"4256fef8-4770-40fc-b14a-160cd3fb95c1","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01NA5ChmBNHGbr69FD9Amsc9","tool_name":"str-replace-editor","input_json":"{\"command\": \"str_replace\", \"path\": \"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java\", \"str_replace_entries\": [{\"old_str\": \"    private void setupComboBoxHandler() {\\n        ccb_GiaoDien.setOnAction(event -> {\\n            String selectedValue = ccb_GiaoDien.getValue();\\n            if (selectedValue.equals(\\\"Nh\\u00e2n vi\\u00ean\\\")) {\\n                return;\\n            }\\n            \\n            try {\\n                String fxmlFile = switch (selectedValue) {\\n                    case \\\"S\\u1ea3n ph\\u1ea9m\\\" -> \\\"TraCuu_gui\\\";\\n                    case \\\"T\\u00e0i kho\\u1ea3n\\\" -> \\\"TraCuuTaiKhoan_gui\\\";\\n                    case \\\"Ho\\u00e1 \\u0111\\u01a1n\\\" -> \\\"TraCuuHoaDon_gui\\\";\\n                    case \\\"Phi\\u1ebfu nh\\u1eadp\\\" -> \\\"TraCuuPhieuNhap_gui\\\";\\n                    case \\\"Kh\\u00e1ch h\\u00e0ng\\\" -> \\\"TraCuuKhachHang_gui\\\";\\n                    default -> throw new IllegalArgumentException(\\\"Unexpected value: \\\" + selectedValue);\\n                };\\n                \\n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\\\"/fxml/\\\" + fxmlFile + \\\".fxml\\\"));\\n                Scene scene = new Scene(loader.load());\\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\\n                stage.setScene(scene);\\n                stage.show();\\n                \\n            } catch (Exception e) {\\n                showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Tra c\\u1ee9u \\\" + selectedValue.toLowerCase());\\n                ccb_GiaoDien.setValue(\\\"Nh\\u00e2n vi\\u00ean\\\");\\n            }\\n        });\\n    }\", \"new_str\": \"    private void setupComboBoxHandler() {\\n        ccb_GiaoDien.setOnAction(event -> {\\n            String selectedValue = ccb_GiaoDien.getValue();\\n            if (selectedValue.equals(\\\"Nh\\u00e2n vi\\u00ean\\\")) {\\n                return;\\n            }\\n            \\n            try {\\n                String fxmlFile = switch (selectedValue) {\\n                    case \\\"S\\u1ea3n ph\\u1ea9m\\\" -> \\\"TraCuu_gui\\\";\\n                    case \\\"T\\u00e0i kho\\u1ea3n\\\" -> \\\"TraCuuTaiKhoan_gui\\\";\\n                    case \\\"Ho\\u00e1 \\u0111\\u01a1n\\\" -> \\\"TraCuuHoaDon_gui\\\";\\n                    case \\\"Phi\\u1ebfu nh\\u1eadp\\\" -> \\\"TraCuuPhieuNhap_gui\\\";\\n                    case \\\"Kh\\u00e1ch h\\u00e0ng\\\" -> \\\"TraCuuKhachHang_gui\\\";\\n                    default -> throw new IllegalArgumentException(\\\"Unexpected value: \\\" + selectedValue);\\n                };\\n                \\n                loadFXML(\\\"/fxml/\\\" + fxmlFile + \\\".fxml\\\");\\n                \\n            } catch (Exception e) {\\n                showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Tra c\\u1ee9u \\\" + selectedValue.toLowerCase());\\n                ccb_GiaoDien.setValue(\\\"Nh\\u00e2n vi\\u00ean\\\");\\n            }\\n        });\\n    }\\n    \\n    private void loadFXML(String fxmlPath) throws Exception {\\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\\n        Scene scene = new Scene(root);\\n        Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\\n        stage.setScene(scene);\\n        stage.show();\\n    }\", \"old_str_start_line_number\": 400, \"old_str_end_line_number\": 428}]}"}},{"id":0,"type":0,"content":"Let's fix the navigation methods in TraCuuNhanVien_controller.java:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here's the result of running `cat -n` on src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:\n     1\tpackage iuh.fit.controller;\n     2\t\n     3\timport iuh.fit.App;\n     4\timport iuh.fit.daos.NhanVien_dao;\n     5\timport iuh.fit.entities.NhanVien;\n     6\timport javafx.animation.FadeTransition;\n     7\timport javafx.animation.Interpolator;\n     8\timport javafx.beans.property.SimpleStringProperty;\n     9\timport javafx.collections.FXCollections;\n    10\timport javafx.collections.ObservableList;\n    11\timport javafx.fxml.FXML;\n    12\timport javafx.fxml.FXMLLoader;\n    13\timport javafx.fxml.Initializable;\n    14\timport javafx.scene.Scene;\n    15\timport javafx.scene.control.*;\n    16\timport javafx.scene.control.cell.PropertyValueFactory;\n    17\timport javafx.scene.image.ImageView;\n    18\timport javafx.scene.input.MouseEvent;\n    19\timport javafx.scene.layout.Pane;\n    20\timport javafx.scene.layout.VBox;\n    21\timport javafx.stage.Stage;\n    22\timport javafx.util.Duration;\n    23\t\n    24\timport java.io.IOException;\n    25\timport java.net.URL;\n    26\timport java.time.LocalDate;\n    27\timport java.time.format.DateTimeFormatter;\n    28\timport java.util.HashMap;\n    29\timport java.util.List;\n    30\timport java.util.Map;\n    31\timport java.util.ResourceBundle;\n    32\t\n    33\tpublic class TraCuuNhanVien_controller implements Initializable {\n    34\t\n    35\t    @FXML\n    36\t    private VBox banHangSubMenuList;\n    37\t\n    38\t    @FXML\n    39\t    private VBox banHangSubVBox;\n    40\t\n    41\t    @FXML\n    42\t    private Button btn_TraCuu;\n    43\t\n    44\t    @FXML\n    45\t    private Button btn_qlNhanVien;\n    46\t\n    47\t    @FXML\n    48\t    private ComboBox<String> ccb_GiaoDien;\n    49\t\n    50\t    @FXML\n    51\t    private TableColumn<NhanVien, String> cl_cccd;\n    52\t\n    53\t    @FXML\n    54\t    private TableColumn<NhanVien, String> cl_chucVu;\n    55\t\n    56\t    @FXML\n    57\t    private TableColumn<NhanVien, String> cl_diaChi;\n    58\t\n    59\t    @FXML\n    60\t    private TableColumn<NhanVien, String> cl_email;\n    61\t\n    62\t    @FXML\n    63\t    private TableColumn<NhanVien, String> cl_maNV;\n    64\t\n    65\t    @FXML\n    66\t    private TableColumn<NhanVien, String> cl_ngaySinh;\n    67\t\n    68\t    @FXML\n    69\t    private TableColumn<NhanVien, String> cl_sdt;\n    70\t\n    71\t    @FXML\n    72\t    private TableColumn<NhanVien, String> cl_stt;\n    73\t\n    74\t    @FXML\n    75\t    private TableColumn<NhanVien, String> cl_tenNV;\n    76\t\n    77\t    @FXML\n    78\t    private ImageView img_HoaDon;\n    79\t\n    80\t    @FXML\n    81\t    private ImageView img_gioHang;\n    82\t\n    83\t    @FXML\n    84\t    private ImageView img_hoaDon;\n    85\t\n    86\t    @FXML\n    87\t    private ImageView img_nhanVien;\n    88\t\n    89\t    @FXML\n    90\t    private ImageView img_phieuNhap;\n    91\t\n    92\t    @FXML\n    93\t    private ImageView img_quanLy;\n    94\t\n    95\t    @FXML\n    96\t    private ImageView img_sanPham;\n    97\t\n    98\t    @FXML\n    99\t    private ImageView img_taiKhoan;\n   100\t\n   101\t    @FXML\n   102\t    private ImageView img_taiKhoan1;\n   103\t\n   104\t    @FXML\n   105\t    private ImageView img_thongKe;\n   106\t\n   107\t    @FXML\n   108\t    private ImageView img_thongKeDoanhThu;\n   109\t\n   110\t    @FXML\n   111\t    private ImageView img_thongKeSanPham;\n   112\t\n   113\t    @FXML\n   114\t    private ImageView img_timKiem;\n   115\t\n   116\t    @FXML\n   117\t    private Label lb_HoaDon;\n   118\t\n   119\t    @FXML\n   120\t    private Label lb_cccd;\n   121\t\n   122\t    @FXML\n   123\t    private Label lb_chucVu;\n   124\t\n   125\t    @FXML\n   126\t    private Label lb_diaChi;\n   127\t\n   128\t    @FXML\n   129\t    private Label lb_email;\n   130\t\n   131\t    @FXML\n   132\t    private Label lb_gioHang;\n   133\t\n   134\t    @FXML\n   135\t    private Label lb_hoaDon;\n   136\t\n   137\t    @FXML\n   138\t    private Label lb_maNV;\n   139\t\n   140\t    @FXML\n   141\t    private Label lb_ngaySinh;\n   142\t\n   143\t    @FXML\n   144\t    private Label lb_nhanVien;\n   145\t\n   146\t    @FXML\n   147\t    private Label lb_phieuNhap;\n   148\t\n   149\t    @FXML\n   150\t    private Label lb_quanLy;\n   151\t\n   152\t    @FXML\n   153\t    private Label lb_sanPham;\n   154\t\n   155\t    @FXML\n   156\t    private Label lb_sdt;\n   157\t\n   158\t    @FXML\n   159\t    private Label lb_taiKhoan;\n   160\t\n   161\t    @FXML\n   162\t    private Label lb_tenNV;\n   163\t\n   164\t    @FXML\n   165\t    private Label lb_thongKe;\n   166\t\n   167\t    @FXML\n   168\t    private Label lb_thongKeDoanhThu;\n   169\t\n   170\t    @FXML\n   171\t    private Label lb_thongKeSanPham;\n   172\t\n   173\t    @FXML\n   174\t    private Label lb_timKiem;\n   175\t\n   176\t    @FXML\n   177\t    private Pane p_HoaDon;\n   178\t\n   179\t    @FXML\n   180\t    private Pane p_gioHang;\n   181\t\n   182\t    @FXML\n   183\t    private Pane p_hoaDon;\n   184\t\n   185\t    @FXML\n   186\t    private Pane p_nhanVien;\n   187\t\n   188\t    @FXML\n   189\t    private Pane p_phieuNhap;\n   190\t\n   191\t    @FXML\n   192\t    private Pane p_quanLy;\n   193\t\n   194\t    @FXML\n   195\t    private Pane p_sanPham;\n   196\t\n   197\t    @FXML\n   198\t    private Pane p_taiKhoan;\n   199\t\n   200\t    @FXML\n   201\t    private Pane p_thongKe;\n   202\t\n   203\t    @FXML\n   204\t    private Pane p_thongKeDoanhThu;\n   205\t\n   206\t    @FXML\n   207\t    private Pane p_thongKeSanPham;\n   208\t\n   209\t    @FXML\n   210\t    private Pane p_timKiem;\n   211\t\n   212\t    @FXML\n   213\t    private VBox quanLySubMenuList;\n   214\t\n   215\t    @FXML\n   216\t    private VBox quanLySubVBox;\n   217\t\n   218\t    @FXML\n   219\t    private VBox thongKeSubMenuList;\n   220\t\n   221\t    @FXML\n   222\t    private VBox thongKeSubVBox;\n   223\t\n   224\t    @FXML\n   225\t    private VBox timKiemSubMenuList;\n   226\t\n   227\t    @FXML\n   228\t    private VBox timKiemSubVBox;\n   229\t\n   230\t    @FXML\n   231\t    private TextField txt_maNV;\n   232\t\n   233\t    @FXML\n   234\t    private TableView<NhanVien> tableNhanVien;\n   235\t\n   236\t    @FXML\n   237\t    private VBox vBox;\n   238\t\n   239\t    Map<VBox,VBox> map = new HashMap<VBox,VBox>();\n   240\t    public void addMenusToMap() {\n   241\t        addMenusToMapImpl();\n   242\t    }\n   243\t\n   244\t    private void addMenusToMapImpl() {\n   245\t        map.put(banHangSubVBox, banHangSubMenuList);\n   246\t        map.put(quanLySubVBox, quanLySubMenuList);\n   247\t        map.put(timKiemSubVBox, timKiemSubMenuList);\n   248\t        map.put(thongKeSubVBox,thongKeSubMenuList);\n   249\t\n   250\t        /**\n   251\t         * Remove the components from VBox on load of stage\n   252\t         */\n   253\t        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n   254\t            entry.getKey().getChildren().remove(entry.getValue());\n   255\t        }\n   256\t    }\n   257\t    /**\n   258\t     * Menu slider\n   259\t     * @param menu\n   260\t     * @param subMenu\n   261\t     */\n   262\t    public void toolsSlider(VBox menu,VBox subMenu){\n   263\t        toolsSliderImpl(menu,subMenu);\n   264\t    }\n   265\t\n   266\t    private void toolsSliderImpl(VBox menu,VBox subMenu) {\n   267\t        if(menu.getChildren().contains(subMenu)){\n   268\t            final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n   269\t            transition.setFromValue(0.5);\n   270\t            transition.setToValue(1);\n   271\t            transition.setInterpolator(Interpolator.EASE_IN);\n   272\t            menu.getChildren().remove(subMenu);\n   273\t            transition.play();\n   274\t        }else{\n   275\t            final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n   276\t            transition.setFromValue(0.5);\n   277\t            transition.setToValue(1);\n   278\t            transition.setInterpolator(Interpolator.EASE_IN);\n   279\t            menu.getChildren().add(subMenu);\n   280\t            transition.play();\n   281\t        }\n   282\t    }\n   283\t\n   284\t    public void removeOtherMenus(VBox menu){\n   285\t        removeOtherMenusImpl(menu);\n   286\t    }\n   287\t    private void removeOtherMenusImpl(VBox menu) {\n   288\t        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n   289\t            if(!entry.getKey().equals(menu))\n   290\t                entry.getKey().getChildren().remove(entry.getValue());\n   291\t        }\n   292\t    }\n   293\t    @FXML\n   294\t    void handleGioHangClick(MouseEvent event) {\n   295\t        // Hiển thị menu bán hàng\n   296\t        toolsSlider(banHangSubVBox, banHangSubMenuList);\n   297\t        removeOtherMenus(banHangSubVBox);\n   298\t    }\n   299\t\n   300\t    @FXML\n   301\t    void handleQuanLyClick(MouseEvent event) {\n   302\t        toolsSlider(quanLySubVBox,quanLySubMenuList);\n   303\t        removeOtherMenus(quanLySubVBox);\n   304\t    }\n   305\t\n   306\t    @FXML\n   307\t    void handleThongKeClick(MouseEvent event) {\n   308\t        toolsSlider(thongKeSubVBox,thongKeSubMenuList);\n   309\t        removeOtherMenus(thongKeSubVBox);\n   310\t    }\n   311\t\n   312\t    @FXML\n   313\t    void handleTimKiemClick(MouseEvent event) {\n   314\t        // Hiển thị menu tìm kiếm\n   315\t        toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n   316\t        removeOtherMenus(timKiemSubVBox);\n   317\t    }\n   318\t\n   319\t    private DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\n   320\t\n   321\t    @Override\n   322\t    public void initialize(URL url, ResourceBundle resourceBundle) {\n   323\t        addMenusToMap();\n   324\t        setupTableColumns();\n   325\t        loadTableData();\n   326\t        setupTableClickEvent();\n   327\t        initializeComboBox();\n   328\t    }\n   329\t\n   330\t    private void setupTableColumns() {\n   331\t        cl_stt.setCellFactory(col -> new TableCell<NhanVien, String>() {\n   332\t            @Override\n   333\t            protected void updateItem(String item, boolean empty) {\n   334\t                super.updateItem(item, empty);\n   335\t                if (empty) {\n   336\t                    setText(null);\n   337\t                } else {\n   338\t                    setText(String.valueOf(getIndex() + 1));\n   339\t                }\n   340\t            }\n   341\t        });\n   342\t\n   343\t        cl_stt.setCellValueFactory(new PropertyValueFactory<>(\"stt\"));\n   344\t        cl_maNV.setCellValueFactory(new PropertyValueFactory<>(\"maNV\"));\n   345\t        cl_tenNV.setCellValueFactory(new PropertyValueFactory<>(\"tenNV\"));\n   346\t        cl_cccd.setCellValueFactory(new PropertyValueFactory<>(\"cccd\"));\n   347\t        cl_sdt.setCellValueFactory(new PropertyValueFactory<>(\"sdt\"));\n   348\t        cl_email.setCellValueFactory(new PropertyValueFactory<>(\"email\"));\n   349\t        cl_diaChi.setCellValueFactory(new PropertyValueFactory<>(\"diaChi\"));\n   350\t        cl_chucVu.setCellValueFactory(new PropertyValueFactory<>(\"chucVu\"));\n   351\t        \n   352\t        // Định dạng ngày sinh\n   353\t        cl_ngaySinh.setCellValueFactory(cellData -> {\n   354\t            LocalDate date = cellData.getValue().getNgaySinh();\n   355\t            if (date == null) return null;\n   356\t            return new SimpleStringProperty(date.format(dateFormatter));\n   357\t        });\n   358\t    }\n   359\t\n   360\t    private void loadTableData() {\n   361\t        try {\n   362\t            NhanVien_dao nhanVienDao = new NhanVien_dao();\n   363\t            List<NhanVien> dsnv = nhanVienDao.readAllNhanVien();\n   364\t            ObservableList<NhanVien> data = FXCollections.observableArrayList(dsnv);\n   365\t            tableNhanVien.setItems(data);\n   366\t        } catch (Exception e) {\n   367\t            showError(\"Lỗi\", \"Không thể tải dữ liệu nhân viên\");\n   368\t        }\n   369\t    }\n   370\t\n   371\t    private void setupTableClickEvent() {\n   372\t        tableNhanVien.setOnMouseClicked(event -> {\n   373\t            NhanVien selectedNhanVien = tableNhanVien.getSelectionModel().getSelectedItem();\n   374\t            if (selectedNhanVien != null) {\n   375\t                updateLabels(selectedNhanVien);\n   376\t            }\n   377\t        });\n   378\t    }\n   379\t\n   380\t    private void updateLabels(NhanVien nv) {\n   381\t        lb_maNV.setText(nv.getMaNV());\n   382\t        lb_tenNV.setText(nv.getTenNV());\n   383\t        lb_cccd.setText(nv.getCccd());\n   384\t        lb_sdt.setText(nv.getSdt());\n   385\t        lb_email.setText(nv.getEmail());\n   386\t        lb_diaChi.setText(nv.getDiaChi());\n   387\t        lb_chucVu.setText(nv.getChucVu().toString());\n   388\t        lb_ngaySinh.setText(nv.getNgaySinh().format(dateFormatter));\n   389\t    }\n   390\t\n   391\t    private void initializeComboBox() {\n   392\t        ObservableList<String> list = FXCollections.observableArrayList(\n   393\t            \"Sản phẩm\", \"Tài khoản\", \"Hoá đơn\", \"Phiếu nhập\", \"Nhân viên\", \"Khách hàng\"\n   394\t        );\n   395\t        ccb_GiaoDien.setItems(list);\n   396\t        ccb_GiaoDien.setValue(\"Nhân viên\");\n   397\t        setupComboBoxHandler();\n   398\t    }\n   399\t\n   400\t    private void setupComboBoxHandler() {\n   401\t        ccb_GiaoDien.setOnAction(event -> {\n   402\t            String selectedValue = ccb_GiaoDien.getValue();\n   403\t            if (selectedValue.equals(\"Nhân viên\")) {\n   404\t                return;\n   405\t            }\n   406\t            \n   407\t            try {\n   408\t                String fxmlFile = switch (selectedValue) {\n   409\t                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n   410\t                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n   411\t                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n   412\t                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n   413\t                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n   414\t                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n   415\t                };\n   416\t                \n   417\t                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n   418\t                Scene scene = new Scene(loader.load());\n   419\t                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n   420\t                stage.setScene(scene);\n   421\t                stage.show();\n   422\t                \n   423\t            } catch (Exception e) {\n   424\t                showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n   425\t                ccb_GiaoDien.setValue(\"Nhân viên\");\n   426\t            }\n   427\t        });\n   428\t    }\n   429\t\n   430\t    @FXML\n   431\t    void timKiem(MouseEvent event) {\n   432\t        String maNhanVien = txt_maNV.getText();\n   433\t        App.maTraCuu = maNhanVien;\n   434\t        NhanVien nhanVien = new NhanVien_dao().readNhanVien(maNhanVien);\n   435\t        lb_maNV.setText(nhanVien.getMaNV());\n   436\t        lb_tenNV.setText(nhanVien.getTenNV());\n   437\t        lb_cccd.setText(nhanVien.getCccd());\n   438\t        lb_sdt.setText(nhanVien.getSdt());\n   439\t        lb_email.setText(nhanVien.getEmail());\n   440\t        lb_diaChi.setText(nhanVien.getDiaChi());\n   441\t        lb_chucVu.setText(nhanVien.getChucVu().toString());\n   442\t        lb_ngaySinh.setText(nhanVien.getNgaySinh().format(dateFormatter));\n   443\t        highlightMatchingRow(maNhanVien);\n   444\t    }\n   445\t\n   446\t    private void highlightMatchingRow(String maNhanVien) {\n   447\t        if (maNhanVien == null || maNhanVien.isEmpty()) {\n   448\t            return;\n   449\t        }\n   450\t\n   451\t        for (int i = 0; i < tableNhanVien.getItems().size(); i++) {\n   452\t            NhanVien nhanVien = tableNhanVien.getItems().get(i);\n   453\t            if (nhanVien.getMaNV().equals(maNhanVien)) {  // Sửa lại điều kiện so sánh\n   454\t                // Select the row\n   455\t                tableNhanVien.getSelectionModel().select(i);\n   456\t                // Scroll to the row\n   457\t                tableNhanVien.scrollTo(i);\n   458\t                // Request focus\n   459\t                tableNhanVien.requestFocus();\n   460\t                break;\n   461\t            }\n   462\t        }\n   463\t    }\n   464\t\n   465\t    private void showError(String title, String content) {\n   466\t        Alert alert = new Alert(Alert.AlertType.ERROR);\n   467\t        alert.setTitle(title);\n   468\t        alert.setHeaderText(null);\n   469\t        alert.setContentText(content);\n   470\t        alert.showAndWait();\n   471\t    }\n   472\t\n   473\t    @FXML\n   474\t    void toQLHoaDon(MouseEvent event) {\n   475\t        try {\n   476\t            App.setRoot(\"QuanLyHoaDon_gui\");\n   477\t        } catch (IOException e) {\n   478\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý hóa đơn\");\n   479\t        }\n   480\t    }\n   481\t\n   482\t    @FXML\n   483\t    void toQLKhachHang(MouseEvent event) {\n   484\t        try {\n   485\t            App.setRoot(\"QuanLyKhachHang_gui\");\n   486\t        } catch (IOException e) {\n   487\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý khách hàng\");\n   488\t        }\n   489\t    }\n   490\t\n   491\t    @FXML\n   492\t    void toQLNhanVien(MouseEvent event) {\n   493\t        try {\n   494\t            App.setRoot(\"QuanLyNhanVien_gui\");\n   495\t        } catch (IOException e) {\n   496\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý nhân viên\");\n   497\t        }\n   498\t    }\n   499\t\n   500\t    @FXML\n   501\t    void toQLPhieuNhap(MouseEvent event) {\n   502\t        try {\n   503\t            App.setRoot(\"QuanLyPhieuNhap_gui\");\n   504\t        } catch (IOException e) {\n   505\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý phiếu nhập\");\n   506\t        }\n   507\t    }\n   508\t\n   509\t    @FXML\n   510\t    void toQLSanPham(MouseEvent event) {\n   511\t        try {\n   512\t            App.setRoot(\"QuanLySanPham_gui\");\n   513\t        } catch (IOException e) {\n   514\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý sản phẩm\");\n   515\t        }\n   516\t    }\n   517\t\n   518\t    @FXML\n   519\t    void toQLTaiKhoan(MouseEvent event) {\n   520\t        try {\n   521\t            App.setRoot(\"QuanLyTaiKhoan_gui\");\n   522\t        } catch (IOException e) {\n   523\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý tài khoản\");\n   524\t        }\n   525\t    }\n   526\t\n   527\t    @FXML\n   528\t    void toTKDoanhThu(MouseEvent event) {\n   529\t        try {\n   530\t            App.setRoot(\"ThongKeDoanhThu_gui\");\n   531\t        } catch (IOException e) {\n   532\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê doanh thu\");\n   533\t        }\n   534\t    }\n   535\t\n   536\t    @FXML\n   537\t    void toTKSanPham(MouseEvent event) {\n   538\t        try {\n   539\t            App.setRoot(\"ThongKeSanPham_gui\");\n   540\t        } catch (IOException e) {\n   541\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê sản phẩm\");\n   542\t        }\n   543\t    }\n   544\t}\n   545\t\nTotal lines in file: 545\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01RssH3UYYdeJVSf38kP77GP"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Let's fix the navigation methods in TraCuuNhanVien_controller.java:\n","workspace_file_chunks":[]},{"status":"success","request_id":"91820cc3-ba47-4bdc-93a2-7ab4c3b8820d","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01SBqtC4Pdc4FfrbCbBcucpS","tool_name":"str-replace-editor","input_json":"{\"command\": \"str_replace\", \"path\": \"src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java\", \"str_replace_entries\": [{\"old_str\": \"    @FXML\\n    void toQLHoaDon(MouseEvent event) {\\n        try {\\n            App.setRoot(\\\"QuanLyHoaDon_gui\\\");\\n        } catch (IOException e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd h\\u00f3a \\u0111\\u01a1n\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLKhachHang(MouseEvent event) {\\n        try {\\n            App.setRoot(\\\"QuanLyKhachHang_gui\\\");\\n        } catch (IOException e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd kh\\u00e1ch h\\u00e0ng\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLNhanVien(MouseEvent event) {\\n        try {\\n            App.setRoot(\\\"QuanLyNhanVien_gui\\\");\\n        } catch (IOException e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd nh\\u00e2n vi\\u00ean\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLPhieuNhap(MouseEvent event) {\\n        try {\\n            App.setRoot(\\\"QuanLyPhieuNhap_gui\\\");\\n        } catch (IOException e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd phi\\u1ebfu nh\\u1eadp\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLSanPham(MouseEvent event) {\\n        try {\\n            App.setRoot(\\\"QuanLySanPham_gui\\\");\\n        } catch (IOException e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd s\\u1ea3n ph\\u1ea9m\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLTaiKhoan(MouseEvent event) {\\n        try {\\n            App.setRoot(\\\"QuanLyTaiKhoan_gui\\\");\\n        } catch (IOException e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd t\\u00e0i kho\\u1ea3n\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toTKDoanhThu(MouseEvent event) {\\n        try {\\n            App.setRoot(\\\"ThongKeDoanhThu_gui\\\");\\n        } catch (IOException e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Th\\u1ed1ng k\\u00ea doanh thu\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toTKSanPham(MouseEvent event) {\\n        try {\\n            App.setRoot(\\\"ThongKeSanPham_gui\\\");\\n        } catch (IOException e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Th\\u1ed1ng k\\u00ea s\\u1ea3n ph\\u1ea9m\\\");\\n        }\\n    }\", \"new_str\": \"    @FXML\\n    void toQLHoaDon(MouseEvent event) {\\n        try {\\n            loadFXML(\\\"/fxml/QL_HoaDon_gui.fxml\\\");\\n        } catch (Exception e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd h\\u00f3a \\u0111\\u01a1n\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLKhachHang(MouseEvent event) {\\n        try {\\n            loadFXML(\\\"/fxml/QL_KhachHang_gui.fxml\\\");\\n        } catch (Exception e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd kh\\u00e1ch h\\u00e0ng\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLNhanVien(MouseEvent event) {\\n        try {\\n            loadFXML(\\\"/fxml/QL_NhanVien_gui.fxml\\\");\\n        } catch (Exception e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd nh\\u00e2n vi\\u00ean\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLPhieuNhap(MouseEvent event) {\\n        try {\\n            loadFXML(\\\"/fxml/QL_PhieuNhap_gui.fxml\\\");\\n        } catch (Exception e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd phi\\u1ebfu nh\\u1eadp\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLSanPham(MouseEvent event) {\\n        try {\\n            loadFXML(\\\"/fxml/QL_SanPham_gui.fxml\\\");\\n        } catch (Exception e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd s\\u1ea3n ph\\u1ea9m\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLTaiKhoan(MouseEvent event) {\\n        try {\\n            loadFXML(\\\"/fxml/QL_TaiKhoan_gui.fxml\\\");\\n        } catch (Exception e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd t\\u00e0i kho\\u1ea3n\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toTKDoanhThu(MouseEvent event) {\\n        try {\\n            loadFXML(\\\"/fxml/ThongKeDoanhThu_gui.fxml\\\");\\n        } catch (Exception e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Th\\u1ed1ng k\\u00ea doanh thu\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toTKSanPham(MouseEvent event) {\\n        try {\\n            loadFXML(\\\"/fxml/ThongKeSanPham_gui.fxml\\\");\\n        } catch (Exception e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Th\\u1ed1ng k\\u00ea s\\u1ea3n ph\\u1ea9m\\\");\\n        }\\n    }\", \"old_str_start_line_number\": 473, \"old_str_end_line_number\": 543}]}"}},{"id":0,"type":0,"content":"Now let's fix the navigation methods in TraCuuNhanVien_controller.java:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Successfully edited the file src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n   396\t        ccb_GiaoDien.setValue(\"Nhân viên\");\n   397\t        setupComboBoxHandler();\n   398\t    }\n   399\t\n   400\t    private void setupComboBoxHandler() {\n   401\t        ccb_GiaoDien.setOnAction(event -> {\n   402\t            String selectedValue = ccb_GiaoDien.getValue();\n   403\t            if (selectedValue.equals(\"Nhân viên\")) {\n   404\t                return;\n   405\t            }\n   406\t\n   407\t            try {\n   408\t                String fxmlFile = switch (selectedValue) {\n   409\t                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n   410\t                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n   411\t                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n   412\t                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n   413\t                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n   414\t                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n   415\t                };\n   416\t\n   417\t                loadFXML(\"/fxml/\" + fxmlFile + \".fxml\");\n   418\t\n   419\t            } catch (Exception e) {\n   420\t                showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n   421\t                ccb_GiaoDien.setValue(\"Nhân viên\");\n   422\t            }\n   423\t        });\n   424\t    }\n   425\t\n   426\t    private void loadFXML(String fxmlPath) throws Exception {\n   427\t        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n   428\t        Scene scene = new Scene(root);\n   429\t        Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n   430\t        stage.setScene(scene);\n   431\t        stage.show();\n   432\t    }\n   433\t\n   434\t    @FXML\n   435\t    void timKiem(MouseEvent event) {\n   436\t        String maNhanVien = txt_maNV.getText();\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01NA5ChmBNHGbr69FD9Amsc9"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Now let's fix the navigation methods in TraCuuNhanVien_controller.java:\n","workspace_file_chunks":[]},{"status":"success","request_id":"e130c372-2c4e-4e21-8b9f-026dca9ebc5c","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01M4uJd72dyG86CkMb6hPQJ3","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Find the setupComboBoxHandler method in TraCuuTaiKhoan_controller.java\"}"}},{"id":0,"type":0,"content":"Now let's check the TraCuuTaiKhoan_controller.java file:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Successfully edited the file src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n   473\t        alert.setContentText(content);\n   474\t        alert.showAndWait();\n   475\t    }\n   476\t\n   477\t    @FXML\n   478\t    void toQLHoaDon(MouseEvent event) {\n   479\t        try {\n   480\t            loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n   481\t        } catch (Exception e) {\n   482\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý hóa đơn\");\n   483\t        }\n   484\t    }\n   485\t\n   486\t    @FXML\n   487\t    void toQLKhachHang(MouseEvent event) {\n   488\t        try {\n   489\t            loadFXML(\"/fxml/QL_KhachHang_gui.fxml\");\n   490\t        } catch (Exception e) {\n   491\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý khách hàng\");\n   492\t        }\n   493\t    }\n   494\t\n   495\t    @FXML\n   496\t    void toQLNhanVien(MouseEvent event) {\n   497\t        try {\n   498\t            loadFXML(\"/fxml/QL_NhanVien_gui.fxml\");\n   499\t        } catch (Exception e) {\n   500\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý nhân viên\");\n   501\t        }\n   502\t    }\n   503\t\n   504\t    @FXML\n   505\t    void toQLPhieuNhap(MouseEvent event) {\n   506\t        try {\n   507\t            loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n   508\t        } catch (Exception e) {\n   509\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý phiếu nhập\");\n   510\t        }\n   511\t    }\n   512\t\n   513\t    @FXML\n   514\t    void toQLSanPham(MouseEvent event) {\n   515\t        try {\n   516\t            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n   517\t        } catch (Exception e) {\n   518\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý sản phẩm\");\n   519\t        }\n   520\t    }\n   521\t\n   522\t    @FXML\n   523\t    void toQLTaiKhoan(MouseEvent event) {\n   524\t        try {\n   525\t            loadFXML(\"/fxml/QL_TaiKhoan_gui.fxml\");\n   526\t        } catch (Exception e) {\n   527\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý tài khoản\");\n   528\t        }\n   529\t    }\n   530\t\n   531\t    @FXML\n   532\t    void toTKDoanhThu(MouseEvent event) {\n   533\t        try {\n   534\t            loadFXML(\"/fxml/ThongKeDoanhThu_gui.fxml\");\n   535\t        } catch (Exception e) {\n   536\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê doanh thu\");\n   537\t        }\n   538\t    }\n   539\t\n   540\t    @FXML\n   541\t    void toTKSanPham(MouseEvent event) {\n   542\t        try {\n   543\t            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n   544\t        } catch (Exception e) {\n   545\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê sản phẩm\");\n   546\t        }\n   547\t    }\n   548\t}\n   549\t\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01SBqtC4Pdc4FfrbCbBcucpS"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Now let's check the TraCuuTaiKhoan_controller.java file:\n","workspace_file_chunks":[]},{"status":"success","request_id":"8c0bfa62-fd53-435a-906a-77a5611830fc","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01VVWvdLzXY9J2rkTjGRvoPM","tool_name":"str-replace-editor","input_json":"{\"command\": \"str_replace\", \"path\": \"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java\", \"str_replace_entries\": [{\"old_str\": \"    private void setupComboBoxHandler() {\\n        ccb_GiaoDien.setOnAction(event -> {\\n            String selectedValue = ccb_GiaoDien.getValue();\\n            if (selectedValue.equals(\\\"T\\u00e0i kho\\u1ea3n\\\")) {\\n                return;\\n            }\\n            \\n            try {\\n                String fxmlFile = switch (selectedValue) {\\n                    case \\\"S\\u1ea3n ph\\u1ea9m\\\" -> \\\"TraCuu_gui\\\";\\n                    case \\\"Ho\\u00e1 \\u0111\\u01a1n\\\" -> \\\"TraCuuHoaDon_gui\\\";\\n                    case \\\"Phi\\u1ebfu nh\\u1eadp\\\" -> \\\"TraCuuPhieuNhap_gui\\\";\\n                    case \\\"Nh\\u00e2n vi\\u00ean\\\" -> \\\"TraCuuNhanVien_gui\\\";\\n                    case \\\"Kh\\u00e1ch h\\u00e0ng\\\" -> \\\"TraCuuKhachHang_gui\\\";\\n                    default -> throw new IllegalArgumentException(\\\"Unexpected value: \\\" + selectedValue);\\n                };\\n                \\n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\\\"/fxml/\\\" + fxmlFile + \\\".fxml\\\"));\\n                Scene scene = new Scene(loader.load());\\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\\n                stage.setScene(scene);\\n                stage.show();\\n                \\n            } catch (Exception e) {\\n                showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Tra c\\u1ee9u \\\" + selectedValue.toLowerCase());\\n                ccb_GiaoDien.setValue(\\\"T\\u00e0i kho\\u1ea3n\\\");\\n            }\\n        });\\n    }\", \"new_str\": \"    private void setupComboBoxHandler() {\\n        ccb_GiaoDien.setOnAction(event -> {\\n            String selectedValue = ccb_GiaoDien.getValue();\\n            if (selectedValue.equals(\\\"T\\u00e0i kho\\u1ea3n\\\")) {\\n                return;\\n            }\\n            \\n            try {\\n                String fxmlFile = switch (selectedValue) {\\n                    case \\\"S\\u1ea3n ph\\u1ea9m\\\" -> \\\"TraCuu_gui\\\";\\n                    case \\\"Ho\\u00e1 \\u0111\\u01a1n\\\" -> \\\"TraCuuHoaDon_gui\\\";\\n                    case \\\"Phi\\u1ebfu nh\\u1eadp\\\" -> \\\"TraCuuPhieuNhap_gui\\\";\\n                    case \\\"Nh\\u00e2n vi\\u00ean\\\" -> \\\"TraCuuNhanVien_gui\\\";\\n                    case \\\"Kh\\u00e1ch h\\u00e0ng\\\" -> \\\"TraCuuKhachHang_gui\\\";\\n                    default -> throw new IllegalArgumentException(\\\"Unexpected value: \\\" + selectedValue);\\n                };\\n                \\n                loadFXML(\\\"/fxml/\\\" + fxmlFile + \\\".fxml\\\");\\n                \\n            } catch (Exception e) {\\n                showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Tra c\\u1ee9u \\\" + selectedValue.toLowerCase());\\n                ccb_GiaoDien.setValue(\\\"T\\u00e0i kho\\u1ea3n\\\");\\n            }\\n        });\\n    }\\n    \\n    private void loadFXML(String fxmlPath) throws Exception {\\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\\n        Scene scene = new Scene(root);\\n        Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\\n        stage.setScene(scene);\\n        stage.show();\\n    }\", \"old_str_start_line_number\": 400, \"old_str_end_line_number\": 428}]}"}},{"id":0,"type":0,"content":"Let's fix the TraCuuTaiKhoan_controller.java file:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java\n...\n\npublic class TraCuuTaiKhoan_controller implements Initializable {\n\n    @FXML\n    private VBox banHangSubMenuList;\n\n    @FXML\n    private VBox banHangSubVBox;\n\n    @FXML\n    private Button btn_TraCuu;\n\n    @FXML\n    private Button btn_qlTaiKhoan;\n\n    @FXML\n    private ComboBox<String> ccb_GiaoDien;\n\n    @FXML\n    private TableColumn<TaiKhoan, String> cl_maTK;\n\n    @FXML\n    private TableColumn<TaiKhoan, String> cl_mk;\n\n    @FXML\n    private TableColumn<TaiKhoan, String> cl_stt;\n\n    @FXML\n    private TableColumn<TaiKhoan, String> cl_tenDN;\n\n    @FXML\n    private TableColumn<TaiKhoan, String> cl_tgdn;\n\n    @FXML\n    private TableColumn<TaiKhoan, String> cl_maNV;\n\n    @FXML\n    private ImageView img_HoaDon;\n\n    @FXML\n    private ImageView img_gioHang;\n\n    @FXML\n    private ImageView img_hoaDon;\n\n    @FXML\n    private ImageView img_nhanVien;\n\n    @FXML\n    private ImageView img_phieuNhap;\n\n    @FXML\n    private ImageView img_quanLy;\n\n    @FXML\n    private ImageView img_sanPham;\n\n    @FXML\n    private ImageView img_taiKhoan;\n\n    @FXML\n    private ImageView img_taiKhoan1;\n\n    @FXML\n    private ImageView img_thongKe;\n\n    @FXML\n    private ImageView img_thongKeDoanhThu;\n\n    @FXML\n    private ImageView img_thongKeSanPham;\n\n    @FXML\n    private ImageView img_timKiem;\n\n    @FXML\n    private Label lb_HoaDon;\n\n    @FXML\n    private Label lb_gioHang;\n\n    @FXML\n    private Label lb_hoaDon;\n\n    @FXML\n    private Label lb_maTK;\n\n    @FXML\n    private Label lb_mk;\n\n    @FXML\n    private Label lb_nhanVien;\n\n    @FXML\n    private Label lb_phieuNhap;\n\n    @FXML\n    private Label lb_quanLy;\n\n    @FXML\n    private Label lb_sanPham;\n\n    @FXML\n    private Label lb_taiKhoan;\n\n    @FXML\n    private Label lb_tenDN;\n\n    @FXML\n    private Label lb_tgdn;\n...\n\n    @FXML\n    private VBox timKiemSubVBox;\n\n    @FXML\n    private TextField txt_maTK;\n    \n    @FXML\n    private TableView<TaiKhoan> tableTaiKhoan;\n\n    @FXML\n    private VBox vBox;\n\n    Map<VBox,VBox> map = new HashMap<VBox,VBox>();\n    public void addMenusToMap() {\n        addMenusToMapImpl();\n    }\n\n    private void addMenusToMapImpl() {\n        map.put(banHangSubVBox, banHangSubMenuList);\n        map.put(quanLySubVBox, quanLySubMenuList);\n        map.put(timKiemSubVBox, timKiemSubMenuList);\n        map.put(thongKeSubVBox,thongKeSubMenuList);\n\n        /**\n         * Remove the components from VBox on load of stage\n         */\n        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n            entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n    /**\n     * Menu slider\n     * @param menu\n     * @param subMenu\n     */\n    public void toolsSlider(VBox menu,VBox subMenu){\n        toolsSliderImpl(menu,subMenu);\n    }\n\n    private void toolsSliderImpl(VBox menu,VBox subMenu) {\n        if(menu.getChildren().contains(subMenu)){\n            final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n            transition.setFromValue(0.5);\n            transition.setToValue(1);\n            transition.setInterpolator(Interpolator.EASE_IN);\n            menu.getChildren().remove(subMenu);\n            transition.play();\n        }else{\n            final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n            transition.setFromValue(0.5);\n            transition.setToValue(1);\n            transition.setInterpolator(Interpolator.EASE_IN);\n            menu.getChildren().add(subMenu);\n            transition.play();\n        }\n    }\n    public void removeOtherMenus(VBox menu){\n        removeOtherMenusImpl(menu);\n    }\n    private void removeOtherMenusImpl(VBox menu) {\n        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n            if(!entry.getKey().equals(menu))\n                entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n    @FXML\n    void handleGioHangClick(MouseEvent event) {\n        // Hiển thị menu bán hàng\n        toolsSlider(banHangSubVBox, banHangSubMenuList);\n        removeOtherMenus(banHangSubVBox);\n    }\n\n    @FXML\n    void handleQuanLyClick(MouseEvent event) {\n        toolsSlider(quanLySubVBox,quanLySubMenuList);\n        removeOtherMenus(quanLySubVBox);\n    }\n\n    @FXML\n    void handleThongKeClick(MouseEvent event) {\n        toolsSlider(thongKeSubVBox,thongKeSubMenuList);\n        removeOtherMenus(thongKeSubVBox);\n    }\n\n    @FXML\n    void handleTimKiemClick(MouseEvent event) {\n        // Hiển thị menu tìm kiếm\n        toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n        removeOtherMenus(timKiemSubVBox);\n    }\n\n    @FXML\n    void timKiem(MouseEvent event) {\n\n        String maTaiKhoan = txt_maTK.getText();\n        App.maTraCuu = maTaiKhoan;\n        TaiKhoan tk = new TaiKhoan_dao().read(maTaiKhoan);\n        lb_maTK.setText(tk.getMaTaiKhoan());\n        lb_tenDN.setText(tk.getTenDangNhap());\n        lb_mk.setText(tk.getMatKhau());\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\n        lb_tgdn.setText(tk.getThoiGianDangNhap().format(formatter));\n        highlightMatchingRow(maTaiKhoan);\n    }\n\n    private void highlightMatchingRow(String maTaiKhoan) {\n        if (maTaiKhoan == null || maTaiKhoan.isEmpty()) {\n            return;\n        }\n\n        for (int i = 0; i < tableTaiKhoan.getItems().size(); i++) {\n            TaiKhoan taiKhoan = tableTaiKhoan.getItems().get(i);\n            if (taiKhoan.getMaTaiKhoan().equals(maTaiKhoan)) {  // Sửa lại điều kiện so sánh\n                // Select the row\n                tableTaiKhoan.getSelectionModel().select(i);\n                // Scroll to the row\n                tableTaiKhoan.scrollTo(i);\n                // Request focus\n                tableTaiKhoan.requestFocus();\n                break;\n            }\n        }\n    }\n    @Override\n    public void initialize(URL arg0, ResourceBundle arg1) {\n        // Khởi tạo ComboBox\n        initializeComboBox();\n\n        // Khởi tạo các cột cho bảng\n        initializeTableColumns();\n\n        // Load dữ liệu vào bảng\n        loadTableData();\n\n        // Thêm sự kiện click cho bảng\n        setupTableClickEvent();\n    }\n\n    private void initializeComboBox() {\n        ObservableList<String> list = FXCollections.observableArrayList(\n                \"Sản phẩm\", \"Tài khoản\", \"Hoá đơn\", \"Phiếu nhập\", \"Nhân viên\", \"Khách hàng\"\n        );\n        ccb_GiaoDien.setItems(list);\n        ccb_GiaoDien.setValue(\"Nhân viên\");\n        setupComboBoxHandler();\n    }\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Tài khoản\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n                \n            } catch (Exception e) {\n                showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n                ccb_GiaoDien.setValue(\"Tài khoản\");\n            }\n        });\n    }\n\n    private void showError(String title, String content) {\n        Alert alert = new Alert(Alert.AlertType.ERROR);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n\n    private void initializeTableColumns() {\n        // Cột STT\n        cl_stt.setCellFactory(col -> new TableCell<TaiKhoan, String>() {\n            @Override\n            protected void updateItem(String item, boolean empty) {\n                super.updateItem(item, empty);\n                if (empty) {\n                    setText(null);\n                } else {\n                    setText(String.valueOf(getIndex() + 1));\n                }\n            }\n        });\n\n        // Các cột khác\n        cl_maTK.setCellValueFactory(new PropertyValueFactory<>(\"maTaiKhoan\"));\n        cl_tenDN.setCellValueFactory(new PropertyValueFactory<>(\"tenDangNhap\"));\n        cl_mk.setCellValueFactory(new PropertyValueFactory<>(\"matKhau\"));\n        // Định dạng ngày tháng\n        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");\n\n        // Cột Ngày sản xuất\n        cl_tgdn.setCellValueFactory(cellData -> {\n            LocalDateTime date = cellData.getValue().getThoiGianDangNhap();\n            if (date == null) return new SimpleStringProperty(\"\");\n            return new SimpleStringProperty(date.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\")));\n        });\n        cl_maNV.setCellValueFactory(cellData ->\n                new SimpleStringProperty(cellData.getValue().getNhanVien().getMaNV()));\n    }\n\n    private void loadTableData() {\n        try {\n            TaiKhoan_dao taiKhoanDao = new TaiKhoan_dao();\n            List<TaiKhoan> dssp = taiKhoanDao.readAll();\n            ObservableList<TaiKhoan> data = FXCollections.observableArrayList(dssp);\n            tableTaiKhoan.setItems(data);\n        } catch (Exception e) {\n            e.printStackTrace();\n            Alert alert = new Alert(Alert.AlertType.ERROR);\n            alert.setTitle(\"Lỗi\");\n            alert.setHeaderText(\"Lỗi khi tải dữ liệu\");\n            alert.setContentText(\"Đã xảy ra lỗi khi tải dữ liệu. Vui lòng thử lại sau.\");\n            alert.showAndWait();\n        }\n    }\n\n    private void setupTableClickEvent() {\n        tableTaiKhoan.setOnMouseClicked(event -> {\n            TaiKhoan selectedTaiKhoan = tableTaiKhoan.getSelectionModel().getSelectedItem();\n            if (selectedTaiKhoan != null) {\n                updateLabels(selectedTaiKhoan);\n            }\n        });\n    }\n\n    private void updateLabels(TaiKhoan tk) {\n        lb_maTK.setText(tk.getMaTaiKhoan());\n        lb_tenDN.setText(tk.getTenDangNhap());\n        lb_mk.setText(tk.getMatKhau());\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"HH:mm dd/MM/yyyy\");\n        lb_tgdn.setText(tk.getThoiGianDangNhap().format(formatter));\n        lb_maNV.setText(String.valueOf(tk.getNhanVien().getMaNV()));\n\n    }\n    @FXML\n    void toQLHoaDon(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyHoaDon_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý hóa đơn\");\n        }\n    }\n\n    @FXML\n    void toQLKhachHang(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyKhachHang_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý khách hàng\");\n        }\n    }\n\n    @FXML\n    void toQLNhanVien(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyNhanVien_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý nhân viên\");\n        }\n    }\n\n    @FXML\n    void toQLPhieuNhap(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyPhieuNhap_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý phiếu nhập\");\n        }\n    }\n\n    @FXML\n    void toQLSanPham(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLySanPham_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý sản phẩm\");\n        }\n    }\n\n    @FXML\n    void toQLTaiKhoan(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyTaiKhoan_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý tài khoản\");\n        }\n    }\n\n    @FXML\n    void toTKDoanhThu(MouseEvent event) {\n        try {\n            App.setRoot(\"ThongKeDoanhThu_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê doanh thu\");\n        }\n    }\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            App.setRoot(\"ThongKeSanPham_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê sản phẩm\");\n        }\n    }\n\n}\n...\nPath: src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java\n...\n\n    private void initializeComboBox() {\n        ObservableList<String> list = FXCollections.observableArrayList(\n                \"Sản phẩm\", \"Tài khoản\", \"Hoá đơn\", \"Phiếu nhập\", \"Nhân viên\", \"Khách hàng\"\n        );\n        ccb_GiaoDien.setItems(list);\n        ccb_GiaoDien.setValue(\"Khách hàng\");\n        setupComboBoxHandler();\n    }\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Khách hàng\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java\n...\n\n    private void initializeComboBox() {\n        ObservableList<String> list = FXCollections.observableArrayList(\n                \"Sản phẩm\", \"Tài khoản\", \"Hoá đơn\", \"Phiếu nhập\", \"Nhân viên\", \"Khách hàng\"\n        );\n        ccb_GiaoDien.setItems(list);\n        ccb_GiaoDien.setValue(\"Hoá đơn\");\n        setupComboBoxHandler();\n    }\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Hoá đơn\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/TraCuu_controller.java\n...\n\n    private void initializeComboBox() {\n        ObservableList<String> list = FXCollections.observableArrayList(\n                \"Sản phẩm\", \"Tài khoản\", \"Hoá đơn\", \"Phiếu nhập\", \"Nhân viên\", \"Khách hàng\"\n        );\n        cbb_GiaoDien.setItems(list);\n        cbb_GiaoDien.setValue(\"Sản phẩm\");\n        setupComboBoxHandler();\n    }\n\n    private void setupComboBoxHandler() {\n        cbb_GiaoDien.setOnAction(event -> {\n            String selectedValue = cbb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Sản phẩm\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) cbb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Phiếu nhập\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Nhân viên\")) {\n                return;\n            }\n\n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n\n                loadFXML(\"/fxml/\" + fxmlFile + \".fxml\");\n\n            } catch (Exception e) {\n                showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n                ccb_GiaoDien.setValue(\"Nhân viên\");\n            }\n        });\n    }\n...\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01M4uJd72dyG86CkMb6hPQJ3"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Let's fix the TraCuuTaiKhoan_controller.java file:\n","workspace_file_chunks":[]},{"status":"success","request_id":"b4b779c3-b41f-434e-9a39-59408197c20f","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01TKJtwbGEwNdCfkUktKxuwi","tool_name":"str-replace-editor","input_json":"{\"command\": \"str_replace\", \"path\": \"src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java\", \"str_replace_entries\": [{\"old_str\": \"    @FXML\\n    void toQLHoaDon(MouseEvent event) {\\n        try {\\n            App.setRoot(\\\"QuanLyHoaDon_gui\\\");\\n        } catch (IOException e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd h\\u00f3a \\u0111\\u01a1n\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLKhachHang(MouseEvent event) {\\n        try {\\n            App.setRoot(\\\"QuanLyKhachHang_gui\\\");\\n        } catch (IOException e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd kh\\u00e1ch h\\u00e0ng\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLNhanVien(MouseEvent event) {\\n        try {\\n            App.setRoot(\\\"QuanLyNhanVien_gui\\\");\\n        } catch (IOException e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd nh\\u00e2n vi\\u00ean\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLPhieuNhap(MouseEvent event) {\\n        try {\\n            App.setRoot(\\\"QuanLyPhieuNhap_gui\\\");\\n        } catch (IOException e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd phi\\u1ebfu nh\\u1eadp\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLSanPham(MouseEvent event) {\\n        try {\\n            App.setRoot(\\\"QuanLySanPham_gui\\\");\\n        } catch (IOException e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd s\\u1ea3n ph\\u1ea9m\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLTaiKhoan(MouseEvent event) {\\n        try {\\n            App.setRoot(\\\"QuanLyTaiKhoan_gui\\\");\\n        } catch (IOException e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd t\\u00e0i kho\\u1ea3n\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toTKDoanhThu(MouseEvent event) {\\n        try {\\n            App.setRoot(\\\"ThongKeDoanhThu_gui\\\");\\n        } catch (IOException e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Th\\u1ed1ng k\\u00ea doanh thu\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toTKSanPham(MouseEvent event) {\\n        try {\\n            App.setRoot(\\\"ThongKeSanPham_gui\\\");\\n        } catch (IOException e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Th\\u1ed1ng k\\u00ea s\\u1ea3n ph\\u1ea9m\\\");\\n        }\\n    }\", \"new_str\": \"    @FXML\\n    void toQLHoaDon(MouseEvent event) {\\n        try {\\n            loadFXML(\\\"/fxml/QL_HoaDon_gui.fxml\\\");\\n        } catch (Exception e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd h\\u00f3a \\u0111\\u01a1n\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLKhachHang(MouseEvent event) {\\n        try {\\n            loadFXML(\\\"/fxml/QL_KhachHang_gui.fxml\\\");\\n        } catch (Exception e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd kh\\u00e1ch h\\u00e0ng\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLNhanVien(MouseEvent event) {\\n        try {\\n            loadFXML(\\\"/fxml/QL_NhanVien_gui.fxml\\\");\\n        } catch (Exception e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd nh\\u00e2n vi\\u00ean\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLPhieuNhap(MouseEvent event) {\\n        try {\\n            loadFXML(\\\"/fxml/QL_PhieuNhap_gui.fxml\\\");\\n        } catch (Exception e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd phi\\u1ebfu nh\\u1eadp\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLSanPham(MouseEvent event) {\\n        try {\\n            loadFXML(\\\"/fxml/QL_SanPham_gui.fxml\\\");\\n        } catch (Exception e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd s\\u1ea3n ph\\u1ea9m\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLTaiKhoan(MouseEvent event) {\\n        try {\\n            loadFXML(\\\"/fxml/QL_TaiKhoan_gui.fxml\\\");\\n        } catch (Exception e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd t\\u00e0i kho\\u1ea3n\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toTKDoanhThu(MouseEvent event) {\\n        try {\\n            loadFXML(\\\"/fxml/ThongKeDoanhThu_gui.fxml\\\");\\n        } catch (Exception e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Th\\u1ed1ng k\\u00ea doanh thu\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toTKSanPham(MouseEvent event) {\\n        try {\\n            loadFXML(\\\"/fxml/ThongKeSanPham_gui.fxml\\\");\\n        } catch (Exception e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Th\\u1ed1ng k\\u00ea s\\u1ea3n ph\\u1ea9m\\\");\\n        }\\n    }\", \"old_str_start_line_number\": 473, \"old_str_end_line_number\": 543}]}"}},{"id":0,"type":0,"content":"Now let's fix the navigation methods in TraCuuTaiKhoan_controller.java:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Successfully edited the file src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n   353\t        ccb_GiaoDien.setValue(\"Nhân viên\");\n   354\t        setupComboBoxHandler();\n   355\t    }\n   356\t\n   357\t    private void setupComboBoxHandler() {\n   358\t        ccb_GiaoDien.setOnAction(event -> {\n   359\t            String selectedValue = ccb_GiaoDien.getValue();\n   360\t            if (selectedValue.equals(\"Tài khoản\")) {\n   361\t                return;\n   362\t            }\n   363\t\n   364\t            try {\n   365\t                String fxmlFile = switch (selectedValue) {\n   366\t                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n   367\t                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n   368\t                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n   369\t                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n   370\t                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n   371\t                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n   372\t                };\n   373\t\n   374\t                loadFXML(\"/fxml/\" + fxmlFile + \".fxml\");\n   375\t\n   376\t            } catch (Exception e) {\n   377\t                showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n   378\t                ccb_GiaoDien.setValue(\"Tài khoản\");\n   379\t            }\n   380\t        });\n   381\t    }\n   382\t\n   383\t    private void loadFXML(String fxmlPath) throws Exception {\n   384\t        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n   385\t        Scene scene = new Scene(root);\n   386\t        Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n   387\t        stage.setScene(scene);\n   388\t        stage.show();\n   389\t    }\n   390\t\n   391\t    private void showError(String title, String content) {\n   392\t        Alert alert = new Alert(Alert.AlertType.ERROR);\n   393\t        alert.setTitle(title);\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01VVWvdLzXY9J2rkTjGRvoPM"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Now let's fix the navigation methods in TraCuuTaiKhoan_controller.java:\n","workspace_file_chunks":[]},{"status":"success","request_id":"d2675e58-1566-4b72-9d92-3390e6853481","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01JWgi2KtgkUJcEerVLDw7T4","tool_name":"str-replace-editor","input_json":"{\"command\": \"view\", \"path\": \"src/main/java/iuh/fit/controller/TraCuu_controller.java\", \"view_range\": [400, 430]}"}},{"id":0,"type":0,"content":"Let's check the TraCuu_controller.java file:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Successfully edited the file src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n   460\t        lb_tgdn.setText(tk.getThoiGianDangNhap().format(formatter));\n   461\t        lb_maNV.setText(String.valueOf(tk.getNhanVien().getMaNV()));\n   462\t\n   463\t    }\n   464\t    @FXML\n   465\t    void toQLHoaDon(MouseEvent event) {\n   466\t        try {\n   467\t            loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n   468\t        } catch (Exception e) {\n   469\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý hóa đơn\");\n   470\t        }\n   471\t    }\n   472\t\n   473\t    @FXML\n   474\t    void toQLKhachHang(MouseEvent event) {\n   475\t        try {\n   476\t            loadFXML(\"/fxml/QL_KhachHang_gui.fxml\");\n   477\t        } catch (Exception e) {\n   478\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý khách hàng\");\n   479\t        }\n   480\t    }\n   481\t\n   482\t    @FXML\n   483\t    void toQLNhanVien(MouseEvent event) {\n   484\t        try {\n   485\t            loadFXML(\"/fxml/QL_NhanVien_gui.fxml\");\n   486\t        } catch (Exception e) {\n   487\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý nhân viên\");\n   488\t        }\n   489\t    }\n   490\t\n   491\t    @FXML\n   492\t    void toQLPhieuNhap(MouseEvent event) {\n   493\t        try {\n   494\t            loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n   495\t        } catch (Exception e) {\n   496\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý phiếu nhập\");\n   497\t        }\n   498\t    }\n   499\t\n   500\t    @FXML\n   501\t    void toQLSanPham(MouseEvent event) {\n   502\t        try {\n   503\t            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n   504\t        } catch (Exception e) {\n   505\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý sản phẩm\");\n   506\t        }\n   507\t    }\n   508\t\n   509\t    @FXML\n   510\t    void toQLTaiKhoan(MouseEvent event) {\n   511\t        try {\n   512\t            loadFXML(\"/fxml/QL_TaiKhoan_gui.fxml\");\n   513\t        } catch (Exception e) {\n   514\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý tài khoản\");\n   515\t        }\n   516\t    }\n   517\t\n   518\t    @FXML\n   519\t    void toTKDoanhThu(MouseEvent event) {\n   520\t        try {\n   521\t            loadFXML(\"/fxml/ThongKeDoanhThu_gui.fxml\");\n   522\t        } catch (Exception e) {\n   523\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê doanh thu\");\n   524\t        }\n   525\t    }\n   526\t\n   527\t    @FXML\n   528\t    void toTKSanPham(MouseEvent event) {\n   529\t        try {\n   530\t            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n   531\t        } catch (Exception e) {\n   532\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê sản phẩm\");\n   533\t        }\n   534\t    }\n   535\t\n   536\t}\n   537\t\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01TKJtwbGEwNdCfkUktKxuwi"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Let's check the TraCuu_controller.java file:\n","workspace_file_chunks":[]},{"status":"success","request_id":"7fc40a4d-879b-4df8-a04a-135ffd8b9f6f","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01EMQkaBPuS9w81SXviPwTkK","tool_name":"str-replace-editor","input_json":"{\"command\": \"view\", \"path\": \"src/main/java/iuh/fit/controller/TraCuu_controller.java\", \"view_range\": [370, 405]}"}},{"id":0,"type":0,"content":"Let's check the setupComboBoxHandler method in TraCuu_controller.java:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here's the result of running `cat -n` on src/main/java/iuh/fit/controller/TraCuu_controller.java:\n   400\t            } catch (Exception e) {\n   401\t                showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n   402\t                cbb_GiaoDien.setValue(\"Sản phẩm\");\n   403\t            }\n   404\t        });\n   405\t    }\n   406\t\n   407\t    private void showError(String title, String content) {\n   408\t        Alert alert = new Alert(Alert.AlertType.ERROR);\n   409\t        alert.setTitle(title);\n   410\t        alert.setHeaderText(null);\n   411\t        alert.setContentText(content);\n   412\t        alert.showAndWait();\n   413\t    }\n   414\t\n   415\t    private void initializeTableColumns() {\n   416\t        // Cột STT\n   417\t        cl_txt.setCellFactory(col -> new TableCell<SanPham, String>() {\n   418\t            @Override\n   419\t            protected void updateItem(String item, boolean empty) {\n   420\t                super.updateItem(item, empty);\n   421\t                if (empty) {\n   422\t                    setText(null);\n   423\t                } else {\n   424\t                    setText(String.valueOf(getIndex() + 1));\n   425\t                }\n   426\t            }\n   427\t        });\n   428\t\n   429\t        // Các cột khác\n   430\t        cl_maSP.setCellValueFactory(new PropertyValueFactory<>(\"maSP\"));\nTotal lines in file: 580\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01JWgi2KtgkUJcEerVLDw7T4"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Let's check the setupComboBoxHandler method in TraCuu_controller.java:\n","workspace_file_chunks":[]},{"status":"success","request_id":"10dbf01c-d7b8-4711-b61d-dbf7e698acda","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_014b2krgA8mFNpEuHfnghw2T","tool_name":"str-replace-editor","input_json":"{\"command\": \"str_replace\", \"path\": \"src/main/java/iuh/fit/controller/TraCuu_controller.java\", \"str_replace_entries\": [{\"old_str\": \"    private void setupComboBoxHandler() {\\n        cbb_GiaoDien.setOnAction(event -> {\\n            String selectedValue = cbb_GiaoDien.getValue();\\n            if (selectedValue.equals(\\\"S\\u1ea3n ph\\u1ea9m\\\")) {\\n                return;\\n            }\\n            \\n            try {\\n                String fxmlFile = switch (selectedValue) {\\n                    case \\\"T\\u00e0i kho\\u1ea3n\\\" -> \\\"TraCuuTaiKhoan_gui\\\";\\n                    case \\\"Ho\\u00e1 \\u0111\\u01a1n\\\" -> \\\"TraCuuHoaDon_gui\\\";\\n                    case \\\"Phi\\u1ebfu nh\\u1eadp\\\" -> \\\"TraCuuPhieuNhap_gui\\\";\\n                    case \\\"Nh\\u00e2n vi\\u00ean\\\" -> \\\"TraCuuNhanVien_gui\\\";\\n                    case \\\"Kh\\u00e1ch h\\u00e0ng\\\" -> \\\"TraCuuKhachHang_gui\\\";\\n                    default -> throw new IllegalArgumentException(\\\"Unexpected value: \\\" + selectedValue);\\n                };\\n                \\n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\\\"/fxml/\\\" + fxmlFile + \\\".fxml\\\"));\\n                Scene scene = new Scene(loader.load());\\n                Stage stage = (Stage) cbb_GiaoDien.getScene().getWindow();\\n                stage.setScene(scene);\\n                stage.show();\\n                \\n            } catch (Exception e) {\\n                showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Tra c\\u1ee9u \\\" + selectedValue.toLowerCase());\\n                cbb_GiaoDien.setValue(\\\"S\\u1ea3n ph\\u1ea9m\\\");\\n            }\\n        });\\n    }\", \"new_str\": \"    private void setupComboBoxHandler() {\\n        cbb_GiaoDien.setOnAction(event -> {\\n            String selectedValue = cbb_GiaoDien.getValue();\\n            if (selectedValue.equals(\\\"S\\u1ea3n ph\\u1ea9m\\\")) {\\n                return;\\n            }\\n            \\n            try {\\n                String fxmlFile = switch (selectedValue) {\\n                    case \\\"T\\u00e0i kho\\u1ea3n\\\" -> \\\"TraCuuTaiKhoan_gui\\\";\\n                    case \\\"Ho\\u00e1 \\u0111\\u01a1n\\\" -> \\\"TraCuuHoaDon_gui\\\";\\n                    case \\\"Phi\\u1ebfu nh\\u1eadp\\\" -> \\\"TraCuuPhieuNhap_gui\\\";\\n                    case \\\"Nh\\u00e2n vi\\u00ean\\\" -> \\\"TraCuuNhanVien_gui\\\";\\n                    case \\\"Kh\\u00e1ch h\\u00e0ng\\\" -> \\\"TraCuuKhachHang_gui\\\";\\n                    default -> throw new IllegalArgumentException(\\\"Unexpected value: \\\" + selectedValue);\\n                };\\n                \\n                loadFXML(\\\"/fxml/\\\" + fxmlFile + \\\".fxml\\\");\\n                \\n            } catch (Exception e) {\\n                showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Tra c\\u1ee9u \\\" + selectedValue.toLowerCase());\\n                cbb_GiaoDien.setValue(\\\"S\\u1ea3n ph\\u1ea9m\\\");\\n            }\\n        });\\n    }\\n    \\n    private void loadFXML(String fxmlPath) throws Exception {\\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\\n        Scene scene = new Scene(root);\\n        Stage stage = (Stage) cbb_GiaoDien.getScene().getWindow();\\n        stage.setScene(scene);\\n        stage.show();\\n    }\", \"old_str_start_line_number\": 377, \"old_str_end_line_number\": 405}]}"}},{"id":0,"type":0,"content":"Let's fix the setupComboBoxHandler method in TraCuu_controller.java:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here's the result of running `cat -n` on src/main/java/iuh/fit/controller/TraCuu_controller.java:\n   370\t                \"Sản phẩm\", \"Tài khoản\", \"Hoá đơn\", \"Phiếu nhập\", \"Nhân viên\", \"Khách hàng\"\n   371\t        );\n   372\t        cbb_GiaoDien.setItems(list);\n   373\t        cbb_GiaoDien.setValue(\"Sản phẩm\");\n   374\t        setupComboBoxHandler();\n   375\t    }\n   376\t\n   377\t    private void setupComboBoxHandler() {\n   378\t        cbb_GiaoDien.setOnAction(event -> {\n   379\t            String selectedValue = cbb_GiaoDien.getValue();\n   380\t            if (selectedValue.equals(\"Sản phẩm\")) {\n   381\t                return;\n   382\t            }\n   383\t            \n   384\t            try {\n   385\t                String fxmlFile = switch (selectedValue) {\n   386\t                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n   387\t                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n   388\t                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n   389\t                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n   390\t                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n   391\t                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n   392\t                };\n   393\t                \n   394\t                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n   395\t                Scene scene = new Scene(loader.load());\n   396\t                Stage stage = (Stage) cbb_GiaoDien.getScene().getWindow();\n   397\t                stage.setScene(scene);\n   398\t                stage.show();\n   399\t                \n   400\t            } catch (Exception e) {\n   401\t                showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n   402\t                cbb_GiaoDien.setValue(\"Sản phẩm\");\n   403\t            }\n   404\t        });\n   405\t    }\nTotal lines in file: 580\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01EMQkaBPuS9w81SXviPwTkK"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Let's fix the setupComboBoxHandler method in TraCuu_controller.java:\n","workspace_file_chunks":[]},{"status":"success","request_id":"ed4e0b49-3e28-4c77-bfbe-3e27c19f5146","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_019oE5icCiLcL6y3UwTNuB5q","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Find any navigation methods (like toQLHoaDon, toQLSanPham, etc.) in TraCuu_controller.java\"}"}},{"id":0,"type":0,"content":"Let's check if there are any navigation methods in TraCuu_controller.java that need to be fixed:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Successfully edited the file src/main/java/iuh/fit/controller/TraCuu_controller.java.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n   373\t        cbb_GiaoDien.setValue(\"Sản phẩm\");\n   374\t        setupComboBoxHandler();\n   375\t    }\n   376\t\n   377\t    private void setupComboBoxHandler() {\n   378\t        cbb_GiaoDien.setOnAction(event -> {\n   379\t            String selectedValue = cbb_GiaoDien.getValue();\n   380\t            if (selectedValue.equals(\"Sản phẩm\")) {\n   381\t                return;\n   382\t            }\n   383\t\n   384\t            try {\n   385\t                String fxmlFile = switch (selectedValue) {\n   386\t                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n   387\t                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n   388\t                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n   389\t                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n   390\t                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n   391\t                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n   392\t                };\n   393\t\n   394\t                loadFXML(\"/fxml/\" + fxmlFile + \".fxml\");\n   395\t\n   396\t            } catch (Exception e) {\n   397\t                showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n   398\t                cbb_GiaoDien.setValue(\"Sản phẩm\");\n   399\t            }\n   400\t        });\n   401\t    }\n   402\t\n   403\t    private void loadFXML(String fxmlPath) throws Exception {\n   404\t        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n   405\t        Scene scene = new Scene(root);\n   406\t        Stage stage = (Stage) cbb_GiaoDien.getScene().getWindow();\n   407\t        stage.setScene(scene);\n   408\t        stage.show();\n   409\t    }\n   410\t\n   411\t    private void showError(String title, String content) {\n   412\t        Alert alert = new Alert(Alert.AlertType.ERROR);\n   413\t        alert.setTitle(title);\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_014b2krgA8mFNpEuHfnghw2T"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Let's check if there are any navigation methods in TraCuu_controller.java that need to be fixed:\n","workspace_file_chunks":[]},{"status":"success","request_id":"ab9963f7-03b8-4445-b686-432ec587e0f2","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01Ee73mSHUCgVhdgY4CGRg6g","tool_name":"str-replace-editor","input_json":"{\"command\": \"str_replace\", \"path\": \"src/main/java/iuh/fit/controller/TraCuu_controller.java\", \"str_replace_entries\": [{\"old_str\": \"    @FXML\\n    void toQLHoaDon(MouseEvent event) {\\n        try {\\n            App.setRoot(\\\"QuanLyHoaDon_gui\\\");\\n        } catch (IOException e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd h\\u00f3a \\u0111\\u01a1n\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLKhachHang(MouseEvent event) {\\n        try {\\n            App.setRoot(\\\"QuanLyKhachHang_gui\\\");\\n        } catch (IOException e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd kh\\u00e1ch h\\u00e0ng\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLNhanVien(MouseEvent event) {\\n        try {\\n            App.setRoot(\\\"QuanLyNhanVien_gui\\\");\\n        } catch (IOException e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd nh\\u00e2n vi\\u00ean\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLPhieuNhap(MouseEvent event) {\\n        try {\\n            App.setRoot(\\\"QuanLyPhieuNhap_gui\\\");\\n        } catch (IOException e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd phi\\u1ebfu nh\\u1eadp\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLSanPham(MouseEvent event) {\\n        try {\\n            App.setRoot(\\\"QuanLySanPham_gui\\\");\\n        } catch (IOException e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd s\\u1ea3n ph\\u1ea9m\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLTaiKhoan(MouseEvent event) {\\n        try {\\n            App.setRoot(\\\"QuanLyTaiKhoan_gui\\\");\\n        } catch (IOException e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd t\\u00e0i kho\\u1ea3n\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toTKDoanhThu(MouseEvent event) {\\n        try {\\n            App.setRoot(\\\"ThongKeDoanhThu_gui\\\");\\n        } catch (IOException e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Th\\u1ed1ng k\\u00ea doanh thu\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toTKSanPham(MouseEvent event) {\\n        try {\\n            App.setRoot(\\\"ThongKeSanPham_gui\\\");\\n        } catch (IOException e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Th\\u1ed1ng k\\u00ea s\\u1ea3n ph\\u1ea9m\\\");\\n        }\\n    }\", \"new_str\": \"    @FXML\\n    void toQLHoaDon(MouseEvent event) {\\n        try {\\n            loadFXML(\\\"/fxml/QL_HoaDon_gui.fxml\\\");\\n        } catch (Exception e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd h\\u00f3a \\u0111\\u01a1n\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLKhachHang(MouseEvent event) {\\n        try {\\n            loadFXML(\\\"/fxml/QL_KhachHang_gui.fxml\\\");\\n        } catch (Exception e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd kh\\u00e1ch h\\u00e0ng\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLNhanVien(MouseEvent event) {\\n        try {\\n            loadFXML(\\\"/fxml/QL_NhanVien_gui.fxml\\\");\\n        } catch (Exception e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd nh\\u00e2n vi\\u00ean\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLPhieuNhap(MouseEvent event) {\\n        try {\\n            loadFXML(\\\"/fxml/QL_PhieuNhap_gui.fxml\\\");\\n        } catch (Exception e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd phi\\u1ebfu nh\\u1eadp\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLSanPham(MouseEvent event) {\\n        try {\\n            loadFXML(\\\"/fxml/QL_SanPham_gui.fxml\\\");\\n        } catch (Exception e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd s\\u1ea3n ph\\u1ea9m\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toQLTaiKhoan(MouseEvent event) {\\n        try {\\n            loadFXML(\\\"/fxml/QL_TaiKhoan_gui.fxml\\\");\\n        } catch (Exception e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Qu\\u1ea3n l\\u00fd t\\u00e0i kho\\u1ea3n\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toTKDoanhThu(MouseEvent event) {\\n        try {\\n            loadFXML(\\\"/fxml/ThongKeDoanhThu_gui.fxml\\\");\\n        } catch (Exception e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Th\\u1ed1ng k\\u00ea doanh thu\\\");\\n        }\\n    }\\n\\n    @FXML\\n    void toTKSanPham(MouseEvent event) {\\n        try {\\n            loadFXML(\\\"/fxml/ThongKeSanPham_gui.fxml\\\");\\n        } catch (Exception e) {\\n            showError(\\\"L\\u1ed7i chuy\\u1ec3n giao di\\u1ec7n\\\", \\\"Kh\\u00f4ng th\\u1ec3 m\\u1edf giao di\\u1ec7n Th\\u1ed1ng k\\u00ea s\\u1ea3n ph\\u1ea9m\\\");\\n        }\\n    }\", \"old_str_start_line_number\": 520, \"old_str_end_line_number\": 580}]}"}},{"id":0,"type":0,"content":"Let's fix the navigation methods in TraCuu_controller.java:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Hoá đơn\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\n\n\n    @FXML\n    void toQLHoaDon(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyHoaDon_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý hóa đơn\");\n        }\n    }\n\n    @FXML\n    void toQLKhachHang(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyKhachHang_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý khách hàng\");\n        }\n    }\n\n    @FXML\n    void toQLNhanVien(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyNhanVien_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý nhân viên\");\n        }\n    }\n\n    @FXML\n    void toQLPhieuNhap(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyPhieuNhap_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý phiếu nhập\");\n        }\n    }\n\n    @FXML\n    void toQLSanPham(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLySanPham_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý sản phẩm\");\n        }\n    }\n\n    @FXML\n    void toQLTaiKhoan(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyTaiKhoan_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý tài khoản\");\n        }\n    }\n\n    @FXML\n    void toTKDoanhThu(MouseEvent event) {\n        try {\n            App.setRoot(\"ThongKeDoanhThu_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê doanh thu\");\n        }\n    }\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            App.setRoot(\"ThongKeSanPham_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê sản phẩm\");\n        }\n    }\n    \n}\n...\nPath: src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Phiếu nhập\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\n    @FXML\n    void toQLHoaDon(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyHoaDon_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý hóa đơn\");\n        }\n    }\n\n    @FXML\n    void toQLKhachHang(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyKhachHang_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý khách hàng\");\n        }\n    }\n\n    @FXML\n    void toQLNhanVien(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyNhanVien_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý nhân viên\");\n        }\n    }\n...\nPath: src/main/java/iuh/fit/controller/TraCuu_controller.java\npackage iuh.fit.controller;\n...\n\n    @FXML\n    private TableColumn<SanPham, String> cl_tgcn;\n\n    @FXML\n    private TableColumn<SanPham, String> cl_txt;\n\n    @FXML\n    private ImageView img_HoaDon;\n\n    @FXML\n    private ImageView img_gioHang;\n\n    @FXML\n    private ImageView img_hoaDon;\n\n    @FXML\n    private ImageView img_nhanVien;\n\n    @FXML\n    private ImageView img_phieuNhap;\n\n    @FXML\n    private ImageView img_quanLy;\n\n    @FXML\n    private ImageView img_sanPham;\n\n    @FXML\n    private ImageView img_taiKhoan;\n\n    @FXML\n    private ImageView img_taiKhoan1;\n\n    @FXML\n    private ImageView img_thongKe;\n\n    @FXML\n    private ImageView img_thongKeDoanhThu;\n\n    @FXML\n    private ImageView img_thongKeSanPham;\n\n    @FXML\n    private ImageView img_timKiem;\n\n    @FXML\n    private Label lb_HoaDon;\n\n    @FXML\n    private Label lb_giaBan;\n\n    @FXML\n    private Label lb_giaNhap;\n\n    @FXML\n    private Label lb_hsd;\n\n    @FXML\n    private Label lb_loaiHang;\n\n    @FXML\n    private Label lb_maSP;\n\n    @FXML\n    private Label lb_ncc;\n\n    @FXML\n    private Label lb_nsx;\n\n    @FXML\n    private Label lb_slt;\n\n    @FXML\n    private Label lb_tenSP;\n\n    @FXML\n    private Label lb_tgcn;\n\n    @FXML\n    private Label lb_thongKe;\n\n    @FXML\n    private Label lb_thongKeDoanhThu;\n\n    @FXML\n    private Label lb_thongKeSanPham;\n\n    @FXML\n    private Label lb_timKiem;\n\n    @FXML\n    private Pane p_HoaDon;\n\n    @FXML\n    private Pane p_gioHang;\n\n    @FXML\n    private Pane p_hoaDon;\n\n    @FXML\n    private Pane p_nhanVien;\n\n    @FXML\n    private Pane p_phieuNhap;\n\n    @FXML\n    private Pane p_quanLy;\n\n    @FXML\n    private Pane p_sanPham;\n\n    @FXML\n    private Pane p_taiKhoan;\n\n    @FXML\n    private Pane p_thongKe;\n\n    @FXML\n    private Pane p_thongKeDoanhThu;\n\n    @FXML\n    private Pane p_thongKeSanPham;\n\n    @FXML\n    private Pane p_timKiem;\n\n    @FXML\n    private VBox quanLySubMenuList;\n\n    @FXML\n    private VBox quanLySubVBox;\n\n    @FXML\n    private VBox thongKeSubMenuList;\n\n    @FXML\n    private VBox thongKeSubVBox;\n\n    @FXML\n    private VBox timKiemSubMenuList;\n\n    @FXML\n    private VBox timKiemSubVBox;\n\n    @FXML\n    private TextField txt_maSP;\n\n    @FXML\n    private TableView<SanPham> tableSanPham;\n\n    @FXML\n    private VBox vBox;\n\n    Map<VBox,VBox> map = new HashMap<VBox,VBox>();\n    public void addMenusToMap() {\n        addMenusToMapImpl();\n    }\n\n    private void addMenusToMapImpl() {\n        map.put(banHangSubVBox, banHangSubMenuList);\n        map.put(quanLySubVBox, quanLySubMenuList);\n        map.put(timKiemSubVBox, timKiemSubMenuList);\n        map.put(thongKeSubVBox,thongKeSubMenuList);\n\n        /**\n         * Remove the components from VBox on load of stage\n         */\n        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n            entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n    /**\n     * Menu slider\n     * @param menu\n     * @param subMenu\n     */\n    public void toolsSlider(VBox menu,VBox subMenu){\n        toolsSliderImpl(menu,subMenu);\n    }\n\n    private void toolsSliderImpl(VBox menu,VBox subMenu) {\n        if(menu.getChildren().contains(subMenu)){\n            final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n            transition.setFromValue(0.5);\n            transition.setToValue(1);\n            transition.setInterpolator(Interpolator.EASE_IN);\n            menu.getChildren().remove(subMenu);\n            transition.play();\n        }else{\n            final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n            transition.setFromValue(0.5);\n            transition.setToValue(1);\n            transition.setInterpolator(Interpolator.EASE_IN);\n            menu.getChildren().add(subMenu);\n            transition.play();\n        }\n    }\n    /**\n     * Remove other menus\n     * @param menu\n     */\n    public void removeOtherMenus(VBox menu){\n        removeOtherMenusImpl(menu);\n    }\n    private void removeOtherMenusImpl(VBox menu) {\n        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n            if(!entry.getKey().equals(menu))\n                entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n\n    @FXML\n    void handleGioHangClick(MouseEvent event) {\n        // Hiển thị menu bán hàng\n        toolsSlider(banHangSubVBox, banHangSubMenuList);\n        removeOtherMenus(banHangSubVBox);\n    }\n\n    @FXML\n    void handleQuanLyClick(MouseEvent event) {\n        toolsSlider(quanLySubVBox,quanLySubMenuList);\n        removeOtherMenus(quanLySubVBox);\n    }\n\n    @FXML\n    void handleThongKeClick(MouseEvent event) {\n        toolsSlider(thongKeSubVBox,thongKeSubMenuList);\n        removeOtherMenus(thongKeSubVBox);\n    }\n\n    @FXML\n    void handleTimKiemClick(MouseEvent event) {\n        // Hiển thị menu tìm kiếm\n        toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n        removeOtherMenus(timKiemSubVBox);\n    }\n\n    @FXML\n    void timKiem(MouseEvent event) {\n\n        String maSanPham = txt_maSP.getText();\n        App.maTraCuu = maSanPham;\n        SanPham sp = new SanPham_dao().read(maSanPham);\n        lb_maSP.setText(sp.getMaSP());\n        lb_tenSP.setText(sp.getTenSP());\n        lb_ncc.setText(sp.getNhaCC());\n        lb_slt.setText(String.valueOf(sp.getSoLuongTon()));\n        lb_giaNhap.setText(String.valueOf(sp.getGiaNhap()));\n        lb_giaBan.setText(String.valueOf(sp.getGiaBan()));\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\n        lb_nsx.setText(sp.getNgaySX().format(formatter));\n        lb_hsd.setText(sp.getHanSD().format(formatter));\n        lb_tgcn.setText(sp.getThoiGianCapNhat().format(formatter));\n        lb_loaiHang.setText(sp.getLoaiHang().toString());\n        highlightMatchingRow(maSanPham);\n    }\n...\n\n    private void initializeComboBox() {\n        ObservableList<String> list = FXCollections.observableArrayList(\n                \"Sản phẩm\", \"Tài khoản\", \"Hoá đơn\", \"Phiếu nhập\", \"Nhân viên\", \"Khách hàng\"\n        );\n        cbb_GiaoDien.setItems(list);\n        cbb_GiaoDien.setValue(\"Sản phẩm\");\n        setupComboBoxHandler();\n    }\n\n    private void setupComboBoxHandler() {\n        cbb_GiaoDien.setOnAction(event -> {\n            String selectedValue = cbb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Sản phẩm\")) {\n                return;\n            }\n\n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n\n                loadFXML(\"/fxml/\" + fxmlFile + \".fxml\");\n\n            } catch (Exception e) {\n                showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n                cbb_GiaoDien.setValue(\"Sản phẩm\");\n            }\n        });\n    }\n\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) cbb_GiaoDien.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n\n    private void showError(String title, String content) {\n        Alert alert = new Alert(Alert.AlertType.ERROR);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n\n    private void initializeTableColumns() {\n        // Cột STT\n        cl_txt.setCellFactory(col -> new TableCell<SanPham, String>() {\n            @Override\n            protected void updateItem(String item, boolean empty) {\n                super.updateItem(item, empty);\n                if (empty) {\n                    setText(null);\n                } else {\n                    setText(String.valueOf(getIndex() + 1));\n                }\n            }\n        });\n...\n\n    private void loadTableData() {\n        try {\n            SanPham_dao sanPhamDao = new SanPham_dao();\n            List<SanPham> dssp = sanPhamDao.readAll();\n            ObservableList<SanPham> data = FXCollections.observableArrayList(dssp);\n            tableSanPham.setItems(data);\n        } catch (Exception e) {\n            e.printStackTrace();\n            Alert alert = new Alert(Alert.AlertType.ERROR);\n            alert.setTitle(\"Lỗi\");\n            alert.setHeaderText(\"Lỗi khi tải dữ liệu\");\n            alert.setContentText(\"Đã xảy ra lỗi khi tải dữ liệu. Vui lòng thử lại sau.\");\n            alert.showAndWait();\n        }\n    }\n\n    private void setupTableClickEvent() {\n        tableSanPham.setOnMouseClicked(event -> {\n            SanPham selectedSanPham = tableSanPham.getSelectionModel().getSelectedItem();\n            if (selectedSanPham != null) {\n                updateLabels(selectedSanPham);\n            }\n        });\n    }\n...\n\n    @FXML\n    void toQLHoaDon(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyHoaDon_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý hóa đơn\");\n        }\n    }\n\n    @FXML\n    void toQLKhachHang(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyKhachHang_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý khách hàng\");\n        }\n    }\n\n    @FXML\n    void toQLNhanVien(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyNhanVien_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý nhân viên\");\n        }\n    }\n\n    @FXML\n    void toQLPhieuNhap(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyPhieuNhap_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý phiếu nhập\");\n        }\n    }\n\n    @FXML\n    void toQLSanPham(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLySanPham_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý sản phẩm\");\n        }\n    }\n\n    @FXML\n    void toQLTaiKhoan(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyTaiKhoan_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý tài khoản\");\n        }\n    }\n\n    @FXML\n    void toTKDoanhThu(MouseEvent event) {\n        try {\n            App.setRoot(\"ThongKeDoanhThu_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê doanh thu\");\n        }\n    }\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            App.setRoot(\"ThongKeSanPham_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê sản phẩm\");\n        }\n    }\n\n}...\nPath: src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Khách hàng\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Nhân viên\")) {\n                return;\n            }\n\n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n\n                loadFXML(\"/fxml/\" + fxmlFile + \".fxml\");\n\n            } catch (Exception e) {\n                showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n                ccb_GiaoDien.setValue(\"Nhân viên\");\n            }\n        });\n    }\n...\nPath: src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Tài khoản\")) {\n                return;\n            }\n\n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n\n                loadFXML(\"/fxml/\" + fxmlFile + \".fxml\");\n\n            } catch (Exception e) {\n                showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n                ccb_GiaoDien.setValue(\"Tài khoản\");\n            }\n        });\n    }\n...\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_019oE5icCiLcL6y3UwTNuB5q"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Let's fix the navigation methods in TraCuu_controller.java:\n","workspace_file_chunks":[]},{"status":"cancelled","request_id":"temp-fe-b87bd751-ff8c-4343-b653-5cda152adf85","request_message":"","seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Successfully edited the file src/main/java/iuh/fit/controller/TraCuu_controller.java.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n   508\t        lb_tgcn.setText(sp.getThoiGianCapNhat().format(formatter));\n   509\t        lb_loaiHang.setText(sp.getLoaiHang().toString());\n   510\t    }\n   511\t\n   512\t    @FXML\n   513\t    void toQLHoaDon(MouseEvent event) {\n   514\t        try {\n   515\t            loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n   516\t        } catch (Exception e) {\n   517\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý hóa đơn\");\n   518\t        }\n   519\t    }\n   520\t\n   521\t    @FXML\n   522\t    void toQLKhachHang(MouseEvent event) {\n   523\t        try {\n   524\t            loadFXML(\"/fxml/QL_KhachHang_gui.fxml\");\n   525\t        } catch (Exception e) {\n   526\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý khách hàng\");\n   527\t        }\n   528\t    }\n   529\t\n   530\t    @FXML\n   531\t    void toQLNhanVien(MouseEvent event) {\n   532\t        try {\n   533\t            loadFXML(\"/fxml/QL_NhanVien_gui.fxml\");\n   534\t        } catch (Exception e) {\n   535\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý nhân viên\");\n   536\t        }\n   537\t    }\n   538\t\n   539\t    @FXML\n   540\t    void toQLPhieuNhap(MouseEvent event) {\n   541\t        try {\n   542\t            loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n   543\t        } catch (Exception e) {\n   544\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý phiếu nhập\");\n   545\t        }\n   546\t    }\n   547\t\n   548\t    @FXML\n   549\t    void toQLSanPham(MouseEvent event) {\n   550\t        try {\n   551\t            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n   552\t        } catch (Exception e) {\n   553\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý sản phẩm\");\n   554\t        }\n   555\t    }\n   556\t\n   557\t    @FXML\n   558\t    void toQLTaiKhoan(MouseEvent event) {\n   559\t        try {\n   560\t            loadFXML(\"/fxml/QL_TaiKhoan_gui.fxml\");\n   561\t        } catch (Exception e) {\n   562\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý tài khoản\");\n   563\t        }\n   564\t    }\n   565\t\n   566\t    @FXML\n   567\t    void toTKDoanhThu(MouseEvent event) {\n   568\t        try {\n   569\t            loadFXML(\"/fxml/ThongKeDoanhThu_gui.fxml\");\n   570\t        } catch (Exception e) {\n   571\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê doanh thu\");\n   572\t        }\n   573\t    }\n   574\t\n   575\t    @FXML\n   576\t    void toTKSanPham(MouseEvent event) {\n   577\t        try {\n   578\t            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n   579\t        } catch (Exception e) {\n   580\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê sản phẩm\");\n   581\t        }\n   582\t    }\n   583\t\n   584\t}\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01Ee73mSHUCgVhdgY4CGRg6g"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}]},{"request_id":"19c173f0-3cd2-4a3d-bd42-1fd9213150bf","status":"cancelled","chatItemType":"agentic-turn-delimiter"},{"request_id":"c11f6074-bac6-4fc9-9bcd-fd5bbccdea91","uuid":"a0406ec3-879e-4b02-9ada-241589ed1284","chatItemType":"agentic-checkpoint-delimiter","status":"success","fromTimestamp":1744966459963,"toTimestamp":1744967923596,"seen_state":"seen"},{"request_id":"d85cf4d6-8ca6-4af5-b888-2c3552717dc6","uuid":"c078e633-8bc7-4e0e-9ec1-77add74d6303","chatItemType":"agentic-checkpoint-delimiter","status":"success","fromTimestamp":1744967923596,"toTimestamp":1744967925410,"seen_state":"seen"},{"request_id":"09529af6-5e49-48d4-940f-df3b544fc41c","status":"cancelled","chatItemType":"agentic-turn-delimiter"},{"status":"success","request_id":"eef05ad1-81e3-4730-831a-5c9796639db8","request_message":"hãy lấy cho tôi tất cả các phương thức navigator ở banhanggui dẫn tới giao diện khác cho tôi copy","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"hãy lấy cho tôi tất cả các phương thức navigator ở banhanggui dẫn tới giao diện khác cho tôi copy"}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_015nEx5CbfneZpp3HY8Yr9T3","tool_name":"str-replace-editor","input_json":"{\"command\": \"view\", \"path\": \"src/main/java/iuh/fit/controller/BanHang_controller.java\", \"view_range\": [442, 560]}"}},{"id":0,"type":0,"content":"Tôi sẽ lấy tất cả các phương thức điều hướng (navigation) từ BanHang_controller.java để bạn có thể copy. Đây là các phương thức điều hướng từ giao diện bán hàng đến các giao diện khác:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"hãy lấy cho tôi tất cả các phương thức navigator ở banhanggui dẫn tới giao diện khác cho tôi copy"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Tôi sẽ lấy tất cả các phương thức điều hướng (navigation) từ BanHang_controller.java để bạn có thể copy. Đây là các phương thức điều hướng từ giao diện bán hàng đến các giao diện khác:\n","workspace_file_chunks":[]},{"status":"success","request_id":"8a1d023e-de8b-4513-bf16-11b9f00ab84f","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01UsqSoDLbZU3wohte6hUW7a","tool_name":"str-replace-editor","input_json":"{\"command\": \"view\", \"path\": \"src/main/java/iuh/fit/controller/BanHang_controller.java\", \"view_range\": [1680, 1690]}"}},{"id":0,"type":0,"content":"Đây là phương thức loadFXML được sử dụng trong BanHang_controller.java:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here's the result of running `cat -n` on src/main/java/iuh/fit/controller/BanHang_controller.java:\n   442\t    @FXML\n   443\t    void handleTimKiemClick(MouseEvent event) {\n   444\t        try {\n   445\t            // Chuyển đến giao diện TraCuu_gui.fxml\n   446\t            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/TraCuu_gui.fxml\"));\n   447\t            Parent root = loader.load();\n   448\t            Scene scene = new Scene(root);\n   449\t\n   450\t            // Lấy stage hiện tại\n   451\t            Stage stage = (Stage) p_gioHang.getScene().getWindow();\n   452\t\n   453\t            // Thiết lập scene mới\n   454\t            stage.setScene(scene);\n   455\t            stage.setTitle(\"Tra cứu sản phẩm\");\n   456\t\n   457\t            // Hiển thị stage\n   458\t            stage.show();\n   459\t\n   460\t            System.out.println(\"Chuyển đến giao diện tra cứu thành công\");\n   461\t        } catch (Exception e) {\n   462\t            e.printStackTrace();\n   463\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu: \" + e.getMessage());\n   464\t\n   465\t            // Nếu không thể mở giao diện tra cứu, hiển thị giao diện tìm kiếm trên giao diện hiện tại\n   466\t            toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n   467\t            removeOtherMenus(timKiemSubVBox);\n   468\t\n   469\t            // Hiển thị giao diện tìm kiếm\n   470\t            showSearchInterface();\n   471\t        }\n   472\t    }\n   473\t\n   474\t    @FXML\n   475\t    void toQLHoaDon(MouseEvent event) {\n   476\t        try {\n   477\t            // Chuyển đến giao diện quản lý hóa đơn\n   478\t            loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n   479\t        } catch (Exception e) {\n   480\t            e.printStackTrace();\n   481\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý hóa đơn!\");\n   482\t        }\n   483\t    }\n   484\t\n   485\t    @FXML\n   486\t    void toQLKhachHang(MouseEvent event) {\n   487\t        try {\n   488\t            // Chuyển đến giao diện quản lý khách hàng\n   489\t            loadFXML(\"/fxml/QL_KhachHang_gui.fxml\");\n   490\t        } catch (Exception e) {\n   491\t            e.printStackTrace();\n   492\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý khách hàng!\");\n   493\t        }\n   494\t    }\n   495\t\n   496\t    @FXML\n   497\t    void toQLNhanVien(MouseEvent event) {\n   498\t        try {\n   499\t            // Chuyển đến giao diện quản lý nhân viên\n   500\t            loadFXML(\"/fxml/QL_NhanVien_gui.fxml\");\n   501\t        } catch (Exception e) {\n   502\t            e.printStackTrace();\n   503\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý nhân viên!\");\n   504\t        }\n   505\t    }\n   506\t\n   507\t    @FXML\n   508\t    void toQLPhieuNhap(MouseEvent event) {\n   509\t        try {\n   510\t            // Chuyển đến giao diện quản lý phiếu nhập\n   511\t            loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n   512\t        } catch (Exception e) {\n   513\t            e.printStackTrace();\n   514\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n   515\t        }\n   516\t    }\n   517\t\n   518\t    @FXML\n   519\t    void toQLSanPham(MouseEvent event) {\n   520\t        try {\n   521\t            // Chuyển đến giao diện quản lý sản phẩm\n   522\t            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n   523\t        } catch (Exception e) {\n   524\t            e.printStackTrace();\n   525\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n   526\t        }\n   527\t    }\n   528\t\n   529\t    @FXML\n   530\t    void toQLTaiKhoan(MouseEvent event) {\n   531\t        try {\n   532\t            // Chuyển đến giao diện quản lý tài khoản\n   533\t            loadFXML(\"/fxml/QL_TaiKhoan_gui.fxml\");\n   534\t        } catch (Exception e) {\n   535\t            e.printStackTrace();\n   536\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý tài khoản!\");\n   537\t        }\n   538\t    }\n   539\t\n   540\t    @FXML\n   541\t    void toTKDoanhThu(MouseEvent event) {\n   542\t        try {\n   543\t            // Chuyển đến giao diện thống kê doanh thu\n   544\t            loadFXML(\"/fxml/ThongKeDoanhThu_gui.fxml\");\n   545\t        } catch (Exception e) {\n   546\t            e.printStackTrace();\n   547\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê doanh thu!\");\n   548\t        }\n   549\t    }\n   550\t\n   551\t    @FXML\n   552\t    void toTKSanPham(MouseEvent event) {\n   553\t        try {\n   554\t            // Chuyển đến giao diện thống kê sản phẩm\n   555\t            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n   556\t        } catch (Exception e) {\n   557\t            e.printStackTrace();\n   558\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n   559\t        }\n   560\t    }\nTotal lines in file: 1696\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_015nEx5CbfneZpp3HY8Yr9T3"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Đây là phương thức loadFXML được sử dụng trong BanHang_controller.java:\n","workspace_file_chunks":[]},{"status":"success","request_id":"57b118c9-72f4-4f6b-ba23-26572b5605ac","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01FPcZi1jH4gKqBb4XBM4AMk","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Find the loadFXML method in BanHang_controller.java\"}"}},{"id":0,"type":0,"content":"Hãy tìm phương thức loadFXML:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here's the result of running `cat -n` on src/main/java/iuh/fit/controller/BanHang_controller.java:\n  1680\t            } else {\n  1681\t                // Tiền thừa âm - màu đỏ\n  1682\t                lb_tienThua.setText(tienThuaFormatted);\n  1683\t                lb_tienThua.setStyle(\"-fx-font-weight: bold; -fx-text-fill: #FF0000;\");\n  1684\t\n  1685\t                // Nếu tiền khách trả không đủ, không cho phép thanh toán\n  1686\t                btn_thanhToan.setDisable(true);\n  1687\t            }\n  1688\t        } catch (NumberFormatException e) {\n  1689\t            // Xử lý lỗi chuyển đổi số\n  1690\t            lb_tienThua.setText(\"0 VNĐ\");\nTotal lines in file: 1696\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01UsqSoDLbZU3wohte6hUW7a"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Hãy tìm phương thức loadFXML:\n","workspace_file_chunks":[]},{"status":"success","request_id":"00da6e6b-9af9-4a4f-8812-8368533a60b7","request_message":"","structured_output_nodes":[{"id":0,"type":0,"content":"Dưới đây là tất cả các phương thức điều hướng từ BanHang_controller.java để bạn có thể copy:\n\n```java\n// Phương thức loadFXML để tải giao diện mới\nprivate void loadFXML(String fxmlPath) throws Exception {\n    Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n    Scene scene = new Scene(root);\n    Stage stage = (Stage) p_gioHang.getScene().getWindow();\n    stage.setScene(scene);\n    stage.show();\n}\n\n// Phương thức điều hướng đến giao diện tìm kiếm\n@FXML\nvoid handleTimKiemClick(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện tra cứu\n        loadFXML(\"/fxml/TraCuu_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu: \" + e.getMessage());\n\n        // Nếu không thể mở giao diện tra cứu, hiển thị giao diện tìm kiếm trên giao diện hiện tại\n        toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n        removeOtherMenus(timKiemSubVBox);\n\n        // Hiển thị giao diện tìm kiếm\n        showSearchInterface();\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý hóa đơn\n@FXML\nvoid toQLHoaDon(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý hóa đơn\n        loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý hóa đơn!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý khách hàng\n@FXML\nvoid toQLKhachHang(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý khách hàng\n        loadFXML(\"/fxml/QL_KhachHang_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý khách hàng!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý nhân viên\n@FXML\nvoid toQLNhanVien(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý nhân viên\n        loadFXML(\"/fxml/QL_NhanVien_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý nhân viên!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý phiếu nhập\n@FXML\nvoid toQLPhieuNhap(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý phiếu nhập\n        loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý sản phẩm\n@FXML\nvoid toQLSanPham(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý sản phẩm\n        loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý tài khoản\n@FXML\nvoid toQLTaiKhoan(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý tài khoản\n        loadFXML(\"/fxml/QL_TaiKhoan_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý tài khoản!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện thống kê doanh thu\n@FXML\nvoid toTKDoanhThu(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện thống kê doanh thu\n        loadFXML(\"/fxml/ThongKeDoanhThu_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê doanh thu!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện thống kê sản phẩm\n@FXML\nvoid toTKSanPham(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện thống kê sản phẩm\n        loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n    }\n}\n```\n</java>\n\nBạn có thể sử dụng các phương thức này để chuẩn hóa việc điều hướng giữa các giao diện trong toàn bộ dự án của mình."},{"id":2,"type":2,"content":"Dưới đây là tất cả các phương thức điều hướng từ BanHang_controller.java để bạn có thể copy:\n\n```java\n// Phương thức loadFXML để tải giao diện mới\nprivate void loadFXML(String fxmlPath) throws Exception {\n    Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n    Scene scene = new Scene(root);\n    Stage stage = (Stage) p_gioHang.getScene().getWindow();\n    stage.setScene(scene);\n    stage.show();\n}\n\n// Phương thức điều hướng đến giao diện tìm kiếm\n@FXML\nvoid handleTimKiemClick(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện tra cứu\n        loadFXML(\"/fxml/TraCuu_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu: \" + e.getMessage());\n\n        // Nếu không thể mở giao diện tra cứu, hiển thị giao diện tìm kiếm trên giao diện hiện tại\n        toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n        removeOtherMenus(timKiemSubVBox);\n\n        // Hiển thị giao diện tìm kiếm\n        showSearchInterface();\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý hóa đơn\n@FXML\nvoid toQLHoaDon(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý hóa đơn\n        loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý hóa đơn!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý khách hàng\n@FXML\nvoid toQLKhachHang(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý khách hàng\n        loadFXML(\"/fxml/QL_KhachHang_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý khách hàng!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý nhân viên\n@FXML\nvoid toQLNhanVien(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý nhân viên\n        loadFXML(\"/fxml/QL_NhanVien_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý nhân viên!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý phiếu nhập\n@FXML\nvoid toQLPhieuNhap(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý phiếu nhập\n        loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý sản phẩm\n@FXML\nvoid toQLSanPham(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý sản phẩm\n        loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý tài khoản\n@FXML\nvoid toQLTaiKhoan(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý tài khoản\n        loadFXML(\"/fxml/QL_TaiKhoan_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý tài khoản!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện thống kê doanh thu\n@FXML\nvoid toTKDoanhThu(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện thống kê doanh thu\n        loadFXML(\"/fxml/ThongKeDoanhThu_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê doanh thu!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện thống kê sản phẩm\n@FXML\nvoid toTKSanPham(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện thống kê sản phẩm\n        loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n    }\n}\n```\n</java>\n\nBạn có thể sử dụng các phương thức này để chuẩn hóa việc điều hướng giữa các giao diện trong toàn bộ dự án của mình.\n"},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: src/main/java/iuh/fit/controller/BanHang_controller.java\n...\n\nimport iuh.fit.App;\nimport iuh.fit.daos.CaLam_dao;\nimport iuh.fit.daos.ChiTietHoaDon_SanPham_dao;\nimport iuh.fit.daos.HoaDon_dao;\nimport iuh.fit.daos.KhachHang_dao;\nimport iuh.fit.daos.NhanVien_dao;\nimport iuh.fit.daos.SanPham_dao;\nimport iuh.fit.entities.*;\nimport iuh.fit.enums.PhuongThucThanhToan;\nimport javafx.animation.FadeTransition;\nimport javafx.animation.Interpolator;\nimport javafx.animation.KeyFrame;\nimport javafx.animation.Timeline;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.event.ActionEvent;\nimport javafx.event.EventHandler;\nimport javafx.fxml.FXML;\nimport javafx.fxml.FXMLLoader;\nimport javafx.fxml.Initializable;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.scene.control.*;\nimport javafx.scene.control.Alert.AlertType;\nimport javafx.scene.control.cell.PropertyValueFactory;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.input.MouseEvent;\nimport javafx.scene.input.KeyEvent;\nimport javafx.scene.layout.AnchorPane;\nimport javafx.scene.layout.GridPane;\nimport javafx.scene.layout.Pane;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\nimport javafx.util.Duration;\n\n\npublic class BanHang_controller implements Initializable {\n\n    @FXML\n    private VBox banHangSubMenuList;\n\n    @FXML\n    private VBox banHangSubVBox;\n\n    @FXML\n    private Button btn_themSP;\n\n    @FXML\n    private ImageView img_HoaDon;\n\n    @FXML\n    private ImageView img_gioHang;\n\n    @FXML\n    private ImageView img_hoaDon;\n\n    @FXML\n    private ImageView img_nhanVien;\n\n    @FXML\n    private ImageView img_phieuNhap;\n\n    @FXML\n    private ImageView img_quanLy;\n\n    @FXML\n    private ImageView img_sanPham;\n\n    @FXML\n    private ImageView img_taiKhoan;\n\n    @FXML\n    private ImageView img_thongKe;\n\n    @FXML\n    private ImageView img_thongKeDoanhThu;\n\n    @FXML\n    private ImageView img_thongKeSanPham;\n\n    @FXML\n    private ImageView img_timKiem;\n\n    @FXML\n    private Label lb_HoaDon;\n\n    @FXML\n    private Label lb_gioHang;\n\n    @FXML\n    private Label lb_hoaDon;\n...\n\n    @FXML\n    private RadioButton rb_chuyenKhoan;\n\n    @FXML\n    private RadioButton rb_the;\n\n    @FXML\n    private ToggleGroup phuongThucTT;\n\n    @FXML\n    private Label lb_thongKe;\n\n    @FXML\n    private Label lb_thongKeDoanhThu;\n\n    @FXML\n    private Label lb_thongKeSanPham;\n\n    @FXML\n    private Label lb_timKiem;\n\n    @FXML\n    private Pane p_HoaDon;\n\n    @FXML\n    private Pane p_gioHang;\n\n    @FXML\n    private Pane p_hoaDon;\n\n    @FXML\n    private Pane p_nhanVien;\n\n    @FXML\n    private Pane p_phieuNhap;\n\n    @FXML\n    private Pane p_quanLy;\n\n    @FXML\n    private Pane p_sanPham;\n\n    @FXML\n    private Pane p_taiKhoan;\n\n    @FXML\n    private Pane p_thongKe;\n\n    @FXML\n    private Pane p_thongKeDoanhThu;\n\n    @FXML\n    private Pane p_thongKeSanPham;\n\n    @FXML\n    private Pane p_timKiem;\n\n    @FXML\n    private VBox quanLySubMenuList;\n\n    @FXML\n    private VBox quanLySubVBox;\n...\n\n    @FXML\n    private Label lb_tenNV;\n    @FXML\n    private ComboBox<?> cb_nganHang;\n\n    @FXML\n    private GridPane grid_chuyenKhoan;\n\n    @FXML\n    private GridPane grid_the;\n\n    @FXML\n    private GridPane grid_tienMat;\n\n    Map<VBox,VBox> map = new HashMap<VBox,VBox>();\n\n    // DAO để truy xuất dữ liệu\n    private SanPham_dao sanPhamDao;\n    private HoaDon_dao hoaDonDao;\n    private KhachHang_dao khachHangDao;\n    private ChiTietHoaDon_SanPham_dao chiTietHoaDonDao;\n    private CaLam_dao caLamDao;\n    private NhanVien_dao nhanVienDao;\n\n    // Danh sách các sản phẩm trong giỏ hàng\n    private ObservableList<SanPham> cartItems;\n\n    // Số lượng sản phẩm trong giỏ hàng\n    private Map<String, Integer> productQuantities = new HashMap<>();\n\n    public void initialize(URL location, ResourceBundle resources) {\n        // Khởi tạo các DAO\n        sanPhamDao = new SanPham_dao();\n        hoaDonDao = new HoaDon_dao();\n        khachHangDao = new KhachHang_dao();\n        chiTietHoaDonDao = new ChiTietHoaDon_SanPham_dao();\n        caLamDao = new CaLam_dao();\n        nhanVienDao = new NhanVien_dao();\n\n        // Khởi tạo các menu\n        addMenusToMap();\n\n        // Hiển thị ngày và thời gian hiện tại\n        displayCurrentDateTime();\n\n        // Khởi tạo bảng giỏ hàng\n        initializeTable();\n\n        // Khởi tạo thông tin hóa đơn\n        initializeInvoiceInfo();\n\n        // Khởi tạo tổng tiền\n        updateTotalAmount();\n\n        // Khởi tạo thông tin nhân viên\n        initializeNhanVien();\n        System.out.println(App.user);\n\n        // Thiết lập sự kiện cho các thành phần trong Pane thông tin đơn hàng\n        setupInvoiceEvents();\n    }\n\n    /**\n     * Add Menus to map\n     */\n    public void addMenusToMap() {\n        addMenusToMapImpl();\n    }\n\n    private void addMenusToMapImpl() {\n        map.put(banHangSubVBox, banHangSubMenuList);\n        map.put(quanLySubVBox, quanLySubMenuList);\n        map.put(timKiemSubVBox, timKiemSubMenuList);\n        map.put(thongKeSubVBox,thongKeSubMenuList);\n\n        /**\n         * Remove the components from VBox on load of stage\n         */\n        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n            entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n    /**\n     * Menu slider\n     * @param menu\n     * @param subMenu\n     */\n    public void toolsSlider(VBox menu,VBox subMenu){\n        toolsSliderImpl(menu,subMenu);\n    }\n...\n    private void removeOtherMenusImpl(VBox menu) {\n        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n            if(!entry.getKey().equals(menu))\n                entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n\n    @FXML\n    void handleGioHangClick(MouseEvent event) {\n        try {\n            // Hiển thị menu bán hàng\n            if (banHangSubVBox != null && banHangSubMenuList != null) {\n                toolsSlider(banHangSubVBox, banHangSubMenuList);\n                removeOtherMenus(banHangSubVBox);\n            }\n\n            // Hiển thị giao diện bán hàng chính\n            showMainSalesInterface();\n\n            // Làm mới giỏ hàng\n            updateTotalAmount();\n        } catch (Exception e) {\n            System.err.println(\"Lỗi trong handleGioHangClick: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n\n    @FXML\n    void handleQuanLyClick(MouseEvent event) {\n        toolsSlider(quanLySubVBox,quanLySubMenuList);\n        removeOtherMenus(quanLySubVBox);\n    }\n\n    @FXML\n    void handleThongKeClick(MouseEvent event) {\n        toolsSlider(thongKeSubVBox,thongKeSubMenuList);\n        removeOtherMenus(thongKeSubVBox);\n    }\n\n    @FXML\n    void handleTimKiemClick(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện TraCuu_gui.fxml\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/TraCuu_gui.fxml\"));\n            Parent root = loader.load();\n            Scene scene = new Scene(root);\n\n            // Lấy stage hiện tại\n            Stage stage = (Stage) p_gioHang.getScene().getWindow();\n\n            // Thiết lập scene mới\n            stage.setScene(scene);\n            stage.setTitle(\"Tra cứu sản phẩm\");\n\n            // Hiển thị stage\n            stage.show();\n\n            System.out.println(\"Chuyển đến giao diện tra cứu thành công\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu: \" + e.getMessage());\n\n            // Nếu không thể mở giao diện tra cứu, hiển thị giao diện tìm kiếm trên giao diện hiện tại\n            toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n            removeOtherMenus(timKiemSubVBox);\n\n            // Hiển thị giao diện tìm kiếm\n            showSearchInterface();\n        }\n    }\n    @FXML\n    void themSanPham(MouseEvent event) {\n        // Lấy mã sản phẩm và số lượng từ các trường nhập liệu\n        String maSP = txt_nhapMa.getText().trim();\n        String soLuongStr = txt_nhapSL.getText().trim();\n\n        // Kiểm tra dữ liệu nhập vào\n        if (maSP.isEmpty()) {\n            showAlert(AlertType.WARNING, \"Thông báo\", \"Vui lòng nhập mã sản phẩm!\");\n            txt_nhapMa.requestFocus();\n            return;\n        }\n\n        if (soLuongStr.isEmpty()) {\n            showAlert(AlertType.WARNING, \"Thông báo\", \"Vui lòng nhập số lượng!\");\n            txt_nhapSL.requestFocus();\n            return;\n        }\n\n        try {\n            int soLuong = Integer.parseInt(soLuongStr);\n            if (soLuong <= 0) {\n                showAlert(AlertType.WARNING, \"Thông báo\", \"Số lượng phải lớn hơn 0!\");\n                txt_nhapSL.requestFocus();\n                return;\n            }\n\n            // Tìm kiếm sản phẩm theo mã và thêm vào giỏ hàng\n            addProductToCart(maSP, soLuong);\n\n            // Xóa dữ liệu trong các trường nhập liệu\n            txt_nhapMa.clear();\n            txt_nhapSL.clear();\n            txt_nhapMa.requestFocus();\n\n        } catch (NumberFormatException e) {\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Số lượng phải là số nguyên!\");\n            txt_nhapSL.requestFocus();\n        }\n    }\n\n    @FXML\n    void toQLHoaDon(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý hóa đơn\n            loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý hóa đơn!\");\n        }\n    }\n\n    @FXML\n    void toQLKhachHang(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý khách hàng\n            loadFXML(\"/fxml/QL_KhachHang_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý khách hàng!\");\n        }\n    }\n\n    @FXML\n    void toQLNhanVien(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý nhân viên\n            loadFXML(\"/fxml/QL_NhanVien_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý nhân viên!\");\n        }\n    }\n\n    @FXML\n    void toQLPhieuNhap(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý phiếu nhập\n            loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n        }\n    }\n\n    @FXML\n    void toQLSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý sản phẩm\n            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n        }\n    }\n\n    @FXML\n    void toQLTaiKhoan(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý tài khoản\n            loadFXML(\"/fxml/QL_TaiKhoan_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý tài khoản!\");\n        }\n    }\n\n    @FXML\n    void toTKDoanhThu(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê doanh thu\n            loadFXML(\"/fxml/ThongKeDoanhThu_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê doanh thu!\");\n        }\n    }\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê sản phẩm\n            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n        }\n    }\n...\n\n            // Khởi tạo danh sách giỏ hàng trống\n            cartItems = FXCollections.observableArrayList();\n            if (tableView != null) {\n                tableView.setItems(cartItems);\n\n                // Thêm sự kiện nhấp đúp vào bảng\n                tableView.setOnMouseClicked(this::handleSearchResultDoubleClick);\n\n                // Thêm context menu cho bảng\n                setupTableContextMenu();\n            } else {\n                System.out.println(\"TableView is null. Check your FXML file.\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.out.println(\"Error initializing table: \" + e.getMessage());\n        }\n    }\n...\n\n    /**\n     * Khởi tạo dữ liệu tìm kiếm\n     */\n    private void initializeSearchData() {\n        try {\n            // Tạo danh sách sản phẩm cho tìm kiếm\n            ObservableList<SanPham> searchResults = FXCollections.observableArrayList();\n\n            // Lấy tất cả sản phẩm từ database\n            List<SanPham> allProducts = sanPhamDao.readAll();\n            searchResults.addAll(allProducts);\n\n            // Hiển thị kết quả tìm kiếm trong bảng\n            // Sử dụng bảng hiện tại để hiển thị kết quả tìm kiếm\n            tableView.setItems(searchResults);\n\n\n            // Thêm sự kiện cho trường tìm kiếm\n            setupSearchField();\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể khởi tạo dữ liệu tìm kiếm: \" + e.getMessage());\n        }\n    }\n...\n\n    /**\n     * Hiển thị thông báo\n     */\n    private void showAlert(AlertType alertType, String title, String content) {\n        Alert alert = new Alert(alertType);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n\n    /**\n     * Load FXML file\n     */\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n\n    @FXML\n    private void togglePaymentMethod() {\n        // Show/hide appropriate payment fields based on selection\n        boolean isCashSelected = rb_tienMat.isSelected();\n        boolean isTransferSelected = rb_chuyenKhoan.isSelected();\n        boolean isCardSelected = rb_the.isSelected();\n\n        grid_tienMat.setVisible(isCashSelected);\n        grid_tienMat.setManaged(isCashSelected);\n\n        grid_chuyenKhoan.setVisible(isTransferSelected);\n        grid_chuyenKhoan.setManaged(isTransferSelected);\n\n        grid_the.setVisible(isCardSelected);\n        grid_the.setManaged(isCardSelected);\n    }\n...\nPath: src/main/java/iuh/fit/controller/QL_KhachHang_controller.java\n...\n\n    @FXML\n    void handleQuanLyClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleThongKeClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleTimKiemClick(MouseEvent event) {\n        try {\n            loadFXML(\"/fxml/TraCuu_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu!\");\n        }\n    }\n\n\n    @FXML\n    void toQLHoaDon(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý hóa đơn\n            loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý hóa đơn!\");\n        }\n    }\n...\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê sản phẩm\n            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n        }\n    }\n    private void showAlert(Alert.AlertType alertType, String title, String content) {\n        Alert alert = new Alert(alertType);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n\n    @FXML\n    void moGiaoDienTimKiemKH(MouseEvent event) {\n        try{\n            loadFXML(\"/fxml/TraCuuKhachHang_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tìm kiếm khách hàng!\");\n        }\n    }\n...\n\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n...\nPath: src/main/java/iuh/fit/controller/QL_PhieuNhap_controller.java\n...\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n    private void loadTableData() {\n        try {\n            // Tạo DAO object\n            PhieuNhapHang_dao pNhapDAO = new PhieuNhapHang_dao();\n\n            // Xóa dữ liệu cũ trong table\n            table_PNhap.getItems().clear();\n...\nPath: src/main/java/iuh/fit/controller/QL_SanPham_controller.java\n...\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê sản phẩm\n            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n        }\n    }\n    private void showAlert(Alert.AlertType alertType, String title, String content) {\n        Alert alert = new Alert(alertType);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n\n\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n...\nPath: src/main/java/iuh/fit/controller/QL_TaiKoan_controller.java\n...\n\n    @FXML\n    void xoaNV(MouseEvent event) {\n\n    }\n\n    @FXML\n    void xoaTrang(MouseEvent event) {\n\n    }\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n...\nPath: src/main/java/iuh/fit/controller/QL_HoaDon_controller.java\n...\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê sản phẩm\n            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n        }\n    }\n    private void showAlert(Alert.AlertType alertType, String title, String content) {\n        Alert alert = new Alert(alertType);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n...\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01FPcZi1jH4gKqBb4XBM4AMk"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Dưới đây là tất cả các phương thức điều hướng từ BanHang_controller.java để bạn có thể copy:\n\n```java\n// Phương thức loadFXML để tải giao diện mới\nprivate void loadFXML(String fxmlPath) throws Exception {\n    Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n    Scene scene = new Scene(root);\n    Stage stage = (Stage) p_gioHang.getScene().getWindow();\n    stage.setScene(scene);\n    stage.show();\n}\n\n// Phương thức điều hướng đến giao diện tìm kiếm\n@FXML\nvoid handleTimKiemClick(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện tra cứu\n        loadFXML(\"/fxml/TraCuu_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu: \" + e.getMessage());\n\n        // Nếu không thể mở giao diện tra cứu, hiển thị giao diện tìm kiếm trên giao diện hiện tại\n        toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n        removeOtherMenus(timKiemSubVBox);\n\n        // Hiển thị giao diện tìm kiếm\n        showSearchInterface();\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý hóa đơn\n@FXML\nvoid toQLHoaDon(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý hóa đơn\n        loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý hóa đơn!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý khách hàng\n@FXML\nvoid toQLKhachHang(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý khách hàng\n        loadFXML(\"/fxml/QL_KhachHang_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý khách hàng!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý nhân viên\n@FXML\nvoid toQLNhanVien(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý nhân viên\n        loadFXML(\"/fxml/QL_NhanVien_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý nhân viên!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý phiếu nhập\n@FXML\nvoid toQLPhieuNhap(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý phiếu nhập\n        loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý sản phẩm\n@FXML\nvoid toQLSanPham(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý sản phẩm\n        loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý tài khoản\n@FXML\nvoid toQLTaiKhoan(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý tài khoản\n        loadFXML(\"/fxml/QL_TaiKhoan_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý tài khoản!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện thống kê doanh thu\n@FXML\nvoid toTKDoanhThu(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện thống kê doanh thu\n        loadFXML(\"/fxml/ThongKeDoanhThu_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê doanh thu!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện thống kê sản phẩm\n@FXML\nvoid toTKSanPham(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện thống kê sản phẩm\n        loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n    }\n}\n```\n</java>\n\nBạn có thể sử dụng các phương thức này để chuẩn hóa việc điều hướng giữa các giao diện trong toàn bộ dự án của mình.\n","workspace_file_chunks":[]},{"request_id":"f7540b20-4b69-4eae-819f-16fafa4cf8ef","status":"cancelled","chatItemType":"agentic-turn-delimiter"},{"status":"success","request_id":"8c14e5c0-99c9-4e5c-8fe7-96da67685317","request_message":"với cả các phương thức đóng mở menu nữa á","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"với cả các phương thức đóng mở menu nữa á"}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":0,"type":0,"content":"Dưới đây là các phương thức đóng mở menu từ BanHang_controller.java để bạn có thể copy:\n\n```java\n// Phương thức thêm menu vào map\npublic void addMenusToMap() {\n    addMenusToMapImpl();\n}\n\nprivate void addMenusToMapImpl() {\n    map.put(banHangSubVBox, banHangSubMenuList);\n    map.put(quanLySubVBox, quanLySubMenuList);\n    map.put(timKiemSubVBox, timKiemSubMenuList);\n    map.put(thongKeSubVBox, thongKeSubMenuList);\n\n    /**\n     * Remove the components from VBox on load of stage\n     */\n    for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n        entry.getKey().getChildren().remove(entry.getValue());\n    }\n}\n\n/**\n * Menu slider - hiệu ứng trượt menu\n * @param menu\n * @param subMenu\n */\npublic void toolsSlider(VBox menu, VBox subMenu) {\n    toolsSliderImpl(menu, subMenu);\n}\n\nprivate void toolsSliderImpl(VBox menu, VBox subMenu) {\n    if(menu.getChildren().contains(subMenu)) {\n        final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n        transition.setFromValue(0.5);\n        transition.setToValue(1);\n        transition.setInterpolator(Interpolator.EASE_IN);\n        menu.getChildren().remove(subMenu);\n        transition.play();\n    } else {\n        final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n        transition.setFromValue(0.5);\n        transition.setToValue(1);\n        transition.setInterpolator(Interpolator.EASE_IN);\n        menu.getChildren().add(subMenu);\n        transition.play();\n    }\n}\n\n/**\n * Remove other menus - đóng các menu khác\n * @param menu\n */\npublic void removeOtherMenus(VBox menu) {\n    removeOtherMenusImpl(menu);\n}\n\nprivate void removeOtherMenusImpl(VBox menu) {\n    for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n        if(!entry.getKey().equals(menu))\n            entry.getKey().getChildren().remove(entry.getValue());\n    }\n}\n\n// Các phương thức xử lý sự kiện click vào menu\n@FXML\nvoid handleGioHangClick(MouseEvent event) {\n    try {\n        // Hiển thị menu bán hàng\n        if (banHangSubVBox != null && banHangSubMenuList != null) {\n            toolsSlider(banHangSubVBox, banHangSubMenuList);\n            removeOtherMenus(banHangSubVBox);\n        }\n\n        // Hiển thị giao diện bán hàng chính\n        showMainSalesInterface();\n\n        // Làm mới giỏ hàng\n        updateTotalAmount();\n    } catch (Exception e) {\n        System.err.println(\"Lỗi trong handleGioHangClick: \" + e.getMessage());\n        e.printStackTrace();\n    }\n}\n\n@FXML\nvoid handleQuanLyClick(MouseEvent event) {\n    toolsSlider(quanLySubVBox, quanLySubMenuList);\n    removeOtherMenus(quanLySubVBox);\n}\n\n@FXML\nvoid handleThongKeClick(MouseEvent event) {\n    toolsSlider(thongKeSubVBox, thongKeSubMenuList);\n    removeOtherMenus(thongKeSubVBox);\n}\n\n@FXML\nvoid handleTimKiemClick(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện tra cứu\n        loadFXML(\"/fxml/TraCuu_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu: \" + e.getMessage());\n\n        // Nếu không thể mở giao diện tra cứu, hiển thị giao diện tìm kiếm trên giao diện hiện tại\n        toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n        removeOtherMenus(timKiemSubVBox);\n\n        // Hiển thị giao diện tìm kiếm\n        showSearchInterface();\n    }\n}\n```\n</java>\n\nĐây là các phương thức chính để quản lý việc đóng mở menu trong ứng dụng của bạn. Bạn cần đảm bảo rằng các biến như `banHangSubVBox`, `banHangSubMenuList`, `quanLySubVBox`, `quanLySubMenuList`, v.v. được khai báo đúng trong các controller khác khi bạn sử dụng các phương thức này."},{"id":2,"type":2,"content":"Dưới đây là các phương thức đóng mở menu từ BanHang_controller.java để bạn có thể copy:\n\n```java\n// Phương thức thêm menu vào map\npublic void addMenusToMap() {\n    addMenusToMapImpl();\n}\n\nprivate void addMenusToMapImpl() {\n    map.put(banHangSubVBox, banHangSubMenuList);\n    map.put(quanLySubVBox, quanLySubMenuList);\n    map.put(timKiemSubVBox, timKiemSubMenuList);\n    map.put(thongKeSubVBox, thongKeSubMenuList);\n\n    /**\n     * Remove the components from VBox on load of stage\n     */\n    for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n        entry.getKey().getChildren().remove(entry.getValue());\n    }\n}\n\n/**\n * Menu slider - hiệu ứng trượt menu\n * @param menu\n * @param subMenu\n */\npublic void toolsSlider(VBox menu, VBox subMenu) {\n    toolsSliderImpl(menu, subMenu);\n}\n\nprivate void toolsSliderImpl(VBox menu, VBox subMenu) {\n    if(menu.getChildren().contains(subMenu)) {\n        final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n        transition.setFromValue(0.5);\n        transition.setToValue(1);\n        transition.setInterpolator(Interpolator.EASE_IN);\n        menu.getChildren().remove(subMenu);\n        transition.play();\n    } else {\n        final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n        transition.setFromValue(0.5);\n        transition.setToValue(1);\n        transition.setInterpolator(Interpolator.EASE_IN);\n        menu.getChildren().add(subMenu);\n        transition.play();\n    }\n}\n\n/**\n * Remove other menus - đóng các menu khác\n * @param menu\n */\npublic void removeOtherMenus(VBox menu) {\n    removeOtherMenusImpl(menu);\n}\n\nprivate void removeOtherMenusImpl(VBox menu) {\n    for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n        if(!entry.getKey().equals(menu))\n            entry.getKey().getChildren().remove(entry.getValue());\n    }\n}\n\n// Các phương thức xử lý sự kiện click vào menu\n@FXML\nvoid handleGioHangClick(MouseEvent event) {\n    try {\n        // Hiển thị menu bán hàng\n        if (banHangSubVBox != null && banHangSubMenuList != null) {\n            toolsSlider(banHangSubVBox, banHangSubMenuList);\n            removeOtherMenus(banHangSubVBox);\n        }\n\n        // Hiển thị giao diện bán hàng chính\n        showMainSalesInterface();\n\n        // Làm mới giỏ hàng\n        updateTotalAmount();\n    } catch (Exception e) {\n        System.err.println(\"Lỗi trong handleGioHangClick: \" + e.getMessage());\n        e.printStackTrace();\n    }\n}\n\n@FXML\nvoid handleQuanLyClick(MouseEvent event) {\n    toolsSlider(quanLySubVBox, quanLySubMenuList);\n    removeOtherMenus(quanLySubVBox);\n}\n\n@FXML\nvoid handleThongKeClick(MouseEvent event) {\n    toolsSlider(thongKeSubVBox, thongKeSubMenuList);\n    removeOtherMenus(thongKeSubVBox);\n}\n\n@FXML\nvoid handleTimKiemClick(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện tra cứu\n        loadFXML(\"/fxml/TraCuu_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu: \" + e.getMessage());\n\n        // Nếu không thể mở giao diện tra cứu, hiển thị giao diện tìm kiếm trên giao diện hiện tại\n        toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n        removeOtherMenus(timKiemSubVBox);\n\n        // Hiển thị giao diện tìm kiếm\n        showSearchInterface();\n    }\n}\n```\n</java>\n\nĐây là các phương thức chính để quản lý việc đóng mở menu trong ứng dụng của bạn. Bạn cần đảm bảo rằng các biến như `banHangSubVBox`, `banHangSubMenuList`, `quanLySubVBox`, `quanLySubMenuList`, v.v. được khai báo đúng trong các controller khác khi bạn sử dụng các phương thức này.\n"},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"với cả các phương thức đóng mở menu nữa á"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Dưới đây là các phương thức đóng mở menu từ BanHang_controller.java để bạn có thể copy:\n\n```java\n// Phương thức thêm menu vào map\npublic void addMenusToMap() {\n    addMenusToMapImpl();\n}\n\nprivate void addMenusToMapImpl() {\n    map.put(banHangSubVBox, banHangSubMenuList);\n    map.put(quanLySubVBox, quanLySubMenuList);\n    map.put(timKiemSubVBox, timKiemSubMenuList);\n    map.put(thongKeSubVBox, thongKeSubMenuList);\n\n    /**\n     * Remove the components from VBox on load of stage\n     */\n    for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n        entry.getKey().getChildren().remove(entry.getValue());\n    }\n}\n\n/**\n * Menu slider - hiệu ứng trượt menu\n * @param menu\n * @param subMenu\n */\npublic void toolsSlider(VBox menu, VBox subMenu) {\n    toolsSliderImpl(menu, subMenu);\n}\n\nprivate void toolsSliderImpl(VBox menu, VBox subMenu) {\n    if(menu.getChildren().contains(subMenu)) {\n        final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n        transition.setFromValue(0.5);\n        transition.setToValue(1);\n        transition.setInterpolator(Interpolator.EASE_IN);\n        menu.getChildren().remove(subMenu);\n        transition.play();\n    } else {\n        final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n        transition.setFromValue(0.5);\n        transition.setToValue(1);\n        transition.setInterpolator(Interpolator.EASE_IN);\n        menu.getChildren().add(subMenu);\n        transition.play();\n    }\n}\n\n/**\n * Remove other menus - đóng các menu khác\n * @param menu\n */\npublic void removeOtherMenus(VBox menu) {\n    removeOtherMenusImpl(menu);\n}\n\nprivate void removeOtherMenusImpl(VBox menu) {\n    for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n        if(!entry.getKey().equals(menu))\n            entry.getKey().getChildren().remove(entry.getValue());\n    }\n}\n\n// Các phương thức xử lý sự kiện click vào menu\n@FXML\nvoid handleGioHangClick(MouseEvent event) {\n    try {\n        // Hiển thị menu bán hàng\n        if (banHangSubVBox != null && banHangSubMenuList != null) {\n            toolsSlider(banHangSubVBox, banHangSubMenuList);\n            removeOtherMenus(banHangSubVBox);\n        }\n\n        // Hiển thị giao diện bán hàng chính\n        showMainSalesInterface();\n\n        // Làm mới giỏ hàng\n        updateTotalAmount();\n    } catch (Exception e) {\n        System.err.println(\"Lỗi trong handleGioHangClick: \" + e.getMessage());\n        e.printStackTrace();\n    }\n}\n\n@FXML\nvoid handleQuanLyClick(MouseEvent event) {\n    toolsSlider(quanLySubVBox, quanLySubMenuList);\n    removeOtherMenus(quanLySubVBox);\n}\n\n@FXML\nvoid handleThongKeClick(MouseEvent event) {\n    toolsSlider(thongKeSubVBox, thongKeSubMenuList);\n    removeOtherMenus(thongKeSubVBox);\n}\n\n@FXML\nvoid handleTimKiemClick(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện tra cứu\n        loadFXML(\"/fxml/TraCuu_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu: \" + e.getMessage());\n\n        // Nếu không thể mở giao diện tra cứu, hiển thị giao diện tìm kiếm trên giao diện hiện tại\n        toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n        removeOtherMenus(timKiemSubVBox);\n\n        // Hiển thị giao diện tìm kiếm\n        showSearchInterface();\n    }\n}\n```\n</java>\n\nĐây là các phương thức chính để quản lý việc đóng mở menu trong ứng dụng của bạn. Bạn cần đảm bảo rằng các biến như `banHangSubVBox`, `banHangSubMenuList`, `quanLySubVBox`, `quanLySubMenuList`, v.v. được khai báo đúng trong các controller khác khi bạn sử dụng các phương thức này.\n","workspace_file_chunks":[]},{"request_id":"53c17d37-bebb-4ef7-93aa-de38b5e99533","status":"cancelled","chatItemType":"agentic-turn-delimiter"},{"status":"success","request_id":"ea616614-4db8-4ae7-ad1d-dfe34252f418","request_message":"bạn hãy gộp 2 yêu cầu đó trả về đủ navigator và menu","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"bạn hãy gộp 2 yêu cầu đó trả về đủ navigator và menu"}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":0,"type":0,"content":"Dưới đây là tất cả các phương thức điều hướng (navigation) và đóng mở menu từ BanHang_controller.java để bạn có thể copy và sử dụng trong toàn bộ dự án:\n\n```java\n// ===== PHẦN 1: CÁC PHƯƠNG THỨC QUẢN LÝ MENU =====\n\n// Khai báo Map để quản lý menu\nMap<VBox,VBox> map = new HashMap<VBox,VBox>();\n\n// Phương thức thêm menu vào map\npublic void addMenusToMap() {\n    addMenusToMapImpl();\n}\n\nprivate void addMenusToMapImpl() {\n    map.put(banHangSubVBox, banHangSubMenuList);\n    map.put(quanLySubVBox, quanLySubMenuList);\n    map.put(timKiemSubVBox, timKiemSubMenuList);\n    map.put(thongKeSubVBox, thongKeSubMenuList);\n\n    /**\n     * Remove the components from VBox on load of stage\n     */\n    for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n        entry.getKey().getChildren().remove(entry.getValue());\n    }\n}\n\n/**\n * Menu slider - hiệu ứng trượt menu\n * @param menu\n * @param subMenu\n */\npublic void toolsSlider(VBox menu, VBox subMenu) {\n    toolsSliderImpl(menu, subMenu);\n}\n\nprivate void toolsSliderImpl(VBox menu, VBox subMenu) {\n    if(menu.getChildren().contains(subMenu)) {\n        final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n        transition.setFromValue(0.5);\n        transition.setToValue(1);\n        transition.setInterpolator(Interpolator.EASE_IN);\n        menu.getChildren().remove(subMenu);\n        transition.play();\n    } else {\n        final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n        transition.setFromValue(0.5);\n        transition.setToValue(1);\n        transition.setInterpolator(Interpolator.EASE_IN);\n        menu.getChildren().add(subMenu);\n        transition.play();\n    }\n}\n\n/**\n * Remove other menus - đóng các menu khác\n * @param menu\n */\npublic void removeOtherMenus(VBox menu) {\n    removeOtherMenusImpl(menu);\n}\n\nprivate void removeOtherMenusImpl(VBox menu) {\n    for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n        if(!entry.getKey().equals(menu))\n            entry.getKey().getChildren().remove(entry.getValue());\n    }\n}\n\n// ===== PHẦN 2: CÁC PHƯƠNG THỨC XỬ LÝ SỰ KIỆN CLICK VÀO MENU =====\n\n@FXML\nvoid handleGioHangClick(MouseEvent event) {\n    try {\n        // Hiển thị menu bán hàng\n        if (banHangSubVBox != null && banHangSubMenuList != null) {\n            toolsSlider(banHangSubVBox, banHangSubMenuList);\n            removeOtherMenus(banHangSubVBox);\n        }\n\n        // Hiển thị giao diện bán hàng chính\n        showMainSalesInterface();\n\n        // Làm mới giỏ hàng\n        updateTotalAmount();\n    } catch (Exception e) {\n        System.err.println(\"Lỗi trong handleGioHangClick: \" + e.getMessage());\n        e.printStackTrace();\n    }\n}\n\n@FXML\nvoid handleQuanLyClick(MouseEvent event) {\n    toolsSlider(quanLySubVBox, quanLySubMenuList);\n    removeOtherMenus(quanLySubVBox);\n}\n\n@FXML\nvoid handleThongKeClick(MouseEvent event) {\n    toolsSlider(thongKeSubVBox, thongKeSubMenuList);\n    removeOtherMenus(thongKeSubVBox);\n}\n\n@FXML\nvoid handleTimKiemClick(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện tra cứu\n        loadFXML(\"/fxml/TraCuu_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu: \" + e.getMessage());\n\n        // Nếu không thể mở giao diện tra cứu, hiển thị giao diện tìm kiếm trên giao diện hiện tại\n        toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n        removeOtherMenus(timKiemSubVBox);\n\n        // Hiển thị giao diện tìm kiếm\n        showSearchInterface();\n    }\n}\n\n// ===== PHẦN 3: PHƯƠNG THỨC LOADFXML ĐỂ TẢI GIAO DIỆN MỚI =====\n\n/**\n * Load FXML file\n */\nprivate void loadFXML(String fxmlPath) throws Exception {\n    Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n    Scene scene = new Scene(root);\n    Stage stage = (Stage) p_gioHang.getScene().getWindow();\n    stage.setScene(scene);\n    stage.show();\n}\n\n// ===== PHẦN 4: CÁC PHƯƠNG THỨC ĐIỀU HƯỚNG ĐẾN CÁC GIAO DIỆN KHÁC =====\n\n// Phương thức điều hướng đến giao diện quản lý hóa đơn\n@FXML\nvoid toQLHoaDon(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý hóa đơn\n        loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý hóa đơn!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý khách hàng\n@FXML\nvoid toQLKhachHang(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý khách hàng\n        loadFXML(\"/fxml/QL_KhachHang_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý khách hàng!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý nhân viên\n@FXML\nvoid toQLNhanVien(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý nhân viên\n        loadFXML(\"/fxml/QL_NhanVien_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý nhân viên!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý phiếu nhập\n@FXML\nvoid toQLPhieuNhap(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý phiếu nhập\n        loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý sản phẩm\n@FXML\nvoid toQLSanPham(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý sản phẩm\n        loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý tài khoản\n@FXML\nvoid toQLTaiKhoan(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý tài khoản\n        loadFXML(\"/fxml/QL_TaiKhoan_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý tài khoản!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện thống kê doanh thu\n@FXML\nvoid toTKDoanhThu(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện thống kê doanh thu\n        loadFXML(\"/fxml/ThongKeDoanhThu_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê doanh thu!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện thống kê sản phẩm\n@FXML\nvoid toTKSanPham(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện thống kê sản phẩm\n        loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n    }\n}\n\n// Phương thức hiển thị thông báo\nprivate void showAlert(AlertType alertType, String title, String content) {\n    Alert alert = new Alert(alertType);\n    alert.setTitle(title);\n    alert.setHeaderText(null);\n    alert.setContentText(content);\n    alert.showAndWait();\n}\n```\n</html>"},{"id":2,"type":2,"content":"Dưới đây là tất cả các phương thức điều hướng (navigation) và đóng mở menu từ BanHang_controller.java để bạn có thể copy và sử dụng trong toàn bộ dự án:\n\n```java\n// ===== PHẦN 1: CÁC PHƯƠNG THỨC QUẢN LÝ MENU =====\n\n// Khai báo Map để quản lý menu\nMap<VBox,VBox> map = new HashMap<VBox,VBox>();\n\n// Phương thức thêm menu vào map\npublic void addMenusToMap() {\n    addMenusToMapImpl();\n}\n\nprivate void addMenusToMapImpl() {\n    map.put(banHangSubVBox, banHangSubMenuList);\n    map.put(quanLySubVBox, quanLySubMenuList);\n    map.put(timKiemSubVBox, timKiemSubMenuList);\n    map.put(thongKeSubVBox, thongKeSubMenuList);\n\n    /**\n     * Remove the components from VBox on load of stage\n     */\n    for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n        entry.getKey().getChildren().remove(entry.getValue());\n    }\n}\n\n/**\n * Menu slider - hiệu ứng trượt menu\n * @param menu\n * @param subMenu\n */\npublic void toolsSlider(VBox menu, VBox subMenu) {\n    toolsSliderImpl(menu, subMenu);\n}\n\nprivate void toolsSliderImpl(VBox menu, VBox subMenu) {\n    if(menu.getChildren().contains(subMenu)) {\n        final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n        transition.setFromValue(0.5);\n        transition.setToValue(1);\n        transition.setInterpolator(Interpolator.EASE_IN);\n        menu.getChildren().remove(subMenu);\n        transition.play();\n    } else {\n        final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n        transition.setFromValue(0.5);\n        transition.setToValue(1);\n        transition.setInterpolator(Interpolator.EASE_IN);\n        menu.getChildren().add(subMenu);\n        transition.play();\n    }\n}\n\n/**\n * Remove other menus - đóng các menu khác\n * @param menu\n */\npublic void removeOtherMenus(VBox menu) {\n    removeOtherMenusImpl(menu);\n}\n\nprivate void removeOtherMenusImpl(VBox menu) {\n    for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n        if(!entry.getKey().equals(menu))\n            entry.getKey().getChildren().remove(entry.getValue());\n    }\n}\n\n// ===== PHẦN 2: CÁC PHƯƠNG THỨC XỬ LÝ SỰ KIỆN CLICK VÀO MENU =====\n\n@FXML\nvoid handleGioHangClick(MouseEvent event) {\n    try {\n        // Hiển thị menu bán hàng\n        if (banHangSubVBox != null && banHangSubMenuList != null) {\n            toolsSlider(banHangSubVBox, banHangSubMenuList);\n            removeOtherMenus(banHangSubVBox);\n        }\n\n        // Hiển thị giao diện bán hàng chính\n        showMainSalesInterface();\n\n        // Làm mới giỏ hàng\n        updateTotalAmount();\n    } catch (Exception e) {\n        System.err.println(\"Lỗi trong handleGioHangClick: \" + e.getMessage());\n        e.printStackTrace();\n    }\n}\n\n@FXML\nvoid handleQuanLyClick(MouseEvent event) {\n    toolsSlider(quanLySubVBox, quanLySubMenuList);\n    removeOtherMenus(quanLySubVBox);\n}\n\n@FXML\nvoid handleThongKeClick(MouseEvent event) {\n    toolsSlider(thongKeSubVBox, thongKeSubMenuList);\n    removeOtherMenus(thongKeSubVBox);\n}\n\n@FXML\nvoid handleTimKiemClick(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện tra cứu\n        loadFXML(\"/fxml/TraCuu_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu: \" + e.getMessage());\n\n        // Nếu không thể mở giao diện tra cứu, hiển thị giao diện tìm kiếm trên giao diện hiện tại\n        toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n        removeOtherMenus(timKiemSubVBox);\n\n        // Hiển thị giao diện tìm kiếm\n        showSearchInterface();\n    }\n}\n\n// ===== PHẦN 3: PHƯƠNG THỨC LOADFXML ĐỂ TẢI GIAO DIỆN MỚI =====\n\n/**\n * Load FXML file\n */\nprivate void loadFXML(String fxmlPath) throws Exception {\n    Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n    Scene scene = new Scene(root);\n    Stage stage = (Stage) p_gioHang.getScene().getWindow();\n    stage.setScene(scene);\n    stage.show();\n}\n\n// ===== PHẦN 4: CÁC PHƯƠNG THỨC ĐIỀU HƯỚNG ĐẾN CÁC GIAO DIỆN KHÁC =====\n\n// Phương thức điều hướng đến giao diện quản lý hóa đơn\n@FXML\nvoid toQLHoaDon(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý hóa đơn\n        loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý hóa đơn!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý khách hàng\n@FXML\nvoid toQLKhachHang(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý khách hàng\n        loadFXML(\"/fxml/QL_KhachHang_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý khách hàng!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý nhân viên\n@FXML\nvoid toQLNhanVien(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý nhân viên\n        loadFXML(\"/fxml/QL_NhanVien_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý nhân viên!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý phiếu nhập\n@FXML\nvoid toQLPhieuNhap(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý phiếu nhập\n        loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý sản phẩm\n@FXML\nvoid toQLSanPham(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý sản phẩm\n        loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý tài khoản\n@FXML\nvoid toQLTaiKhoan(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý tài khoản\n        loadFXML(\"/fxml/QL_TaiKhoan_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý tài khoản!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện thống kê doanh thu\n@FXML\nvoid toTKDoanhThu(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện thống kê doanh thu\n        loadFXML(\"/fxml/ThongKeDoanhThu_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê doanh thu!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện thống kê sản phẩm\n@FXML\nvoid toTKSanPham(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện thống kê sản phẩm\n        loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n    }\n}\n\n// Phương thức hiển thị thông báo\nprivate void showAlert(AlertType alertType, String title, String content) {\n    Alert alert = new Alert(alertType);\n    alert.setTitle(title);\n    alert.setHeaderText(null);\n    alert.setContentText(content);\n    alert.showAndWait();\n}\n```\n</html>\n"},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"bạn hãy gộp 2 yêu cầu đó trả về đủ navigator và menu"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Dưới đây là tất cả các phương thức điều hướng (navigation) và đóng mở menu từ BanHang_controller.java để bạn có thể copy và sử dụng trong toàn bộ dự án:\n\n```java\n// ===== PHẦN 1: CÁC PHƯƠNG THỨC QUẢN LÝ MENU =====\n\n// Khai báo Map để quản lý menu\nMap<VBox,VBox> map = new HashMap<VBox,VBox>();\n\n// Phương thức thêm menu vào map\npublic void addMenusToMap() {\n    addMenusToMapImpl();\n}\n\nprivate void addMenusToMapImpl() {\n    map.put(banHangSubVBox, banHangSubMenuList);\n    map.put(quanLySubVBox, quanLySubMenuList);\n    map.put(timKiemSubVBox, timKiemSubMenuList);\n    map.put(thongKeSubVBox, thongKeSubMenuList);\n\n    /**\n     * Remove the components from VBox on load of stage\n     */\n    for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n        entry.getKey().getChildren().remove(entry.getValue());\n    }\n}\n\n/**\n * Menu slider - hiệu ứng trượt menu\n * @param menu\n * @param subMenu\n */\npublic void toolsSlider(VBox menu, VBox subMenu) {\n    toolsSliderImpl(menu, subMenu);\n}\n\nprivate void toolsSliderImpl(VBox menu, VBox subMenu) {\n    if(menu.getChildren().contains(subMenu)) {\n        final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n        transition.setFromValue(0.5);\n        transition.setToValue(1);\n        transition.setInterpolator(Interpolator.EASE_IN);\n        menu.getChildren().remove(subMenu);\n        transition.play();\n    } else {\n        final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n        transition.setFromValue(0.5);\n        transition.setToValue(1);\n        transition.setInterpolator(Interpolator.EASE_IN);\n        menu.getChildren().add(subMenu);\n        transition.play();\n    }\n}\n\n/**\n * Remove other menus - đóng các menu khác\n * @param menu\n */\npublic void removeOtherMenus(VBox menu) {\n    removeOtherMenusImpl(menu);\n}\n\nprivate void removeOtherMenusImpl(VBox menu) {\n    for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n        if(!entry.getKey().equals(menu))\n            entry.getKey().getChildren().remove(entry.getValue());\n    }\n}\n\n// ===== PHẦN 2: CÁC PHƯƠNG THỨC XỬ LÝ SỰ KIỆN CLICK VÀO MENU =====\n\n@FXML\nvoid handleGioHangClick(MouseEvent event) {\n    try {\n        // Hiển thị menu bán hàng\n        if (banHangSubVBox != null && banHangSubMenuList != null) {\n            toolsSlider(banHangSubVBox, banHangSubMenuList);\n            removeOtherMenus(banHangSubVBox);\n        }\n\n        // Hiển thị giao diện bán hàng chính\n        showMainSalesInterface();\n\n        // Làm mới giỏ hàng\n        updateTotalAmount();\n    } catch (Exception e) {\n        System.err.println(\"Lỗi trong handleGioHangClick: \" + e.getMessage());\n        e.printStackTrace();\n    }\n}\n\n@FXML\nvoid handleQuanLyClick(MouseEvent event) {\n    toolsSlider(quanLySubVBox, quanLySubMenuList);\n    removeOtherMenus(quanLySubVBox);\n}\n\n@FXML\nvoid handleThongKeClick(MouseEvent event) {\n    toolsSlider(thongKeSubVBox, thongKeSubMenuList);\n    removeOtherMenus(thongKeSubVBox);\n}\n\n@FXML\nvoid handleTimKiemClick(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện tra cứu\n        loadFXML(\"/fxml/TraCuu_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu: \" + e.getMessage());\n\n        // Nếu không thể mở giao diện tra cứu, hiển thị giao diện tìm kiếm trên giao diện hiện tại\n        toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n        removeOtherMenus(timKiemSubVBox);\n\n        // Hiển thị giao diện tìm kiếm\n        showSearchInterface();\n    }\n}\n\n// ===== PHẦN 3: PHƯƠNG THỨC LOADFXML ĐỂ TẢI GIAO DIỆN MỚI =====\n\n/**\n * Load FXML file\n */\nprivate void loadFXML(String fxmlPath) throws Exception {\n    Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n    Scene scene = new Scene(root);\n    Stage stage = (Stage) p_gioHang.getScene().getWindow();\n    stage.setScene(scene);\n    stage.show();\n}\n\n// ===== PHẦN 4: CÁC PHƯƠNG THỨC ĐIỀU HƯỚNG ĐẾN CÁC GIAO DIỆN KHÁC =====\n\n// Phương thức điều hướng đến giao diện quản lý hóa đơn\n@FXML\nvoid toQLHoaDon(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý hóa đơn\n        loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý hóa đơn!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý khách hàng\n@FXML\nvoid toQLKhachHang(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý khách hàng\n        loadFXML(\"/fxml/QL_KhachHang_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý khách hàng!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý nhân viên\n@FXML\nvoid toQLNhanVien(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý nhân viên\n        loadFXML(\"/fxml/QL_NhanVien_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý nhân viên!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý phiếu nhập\n@FXML\nvoid toQLPhieuNhap(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý phiếu nhập\n        loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý sản phẩm\n@FXML\nvoid toQLSanPham(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý sản phẩm\n        loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện quản lý tài khoản\n@FXML\nvoid toQLTaiKhoan(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện quản lý tài khoản\n        loadFXML(\"/fxml/QL_TaiKhoan_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý tài khoản!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện thống kê doanh thu\n@FXML\nvoid toTKDoanhThu(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện thống kê doanh thu\n        loadFXML(\"/fxml/ThongKeDoanhThu_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê doanh thu!\");\n    }\n}\n\n// Phương thức điều hướng đến giao diện thống kê sản phẩm\n@FXML\nvoid toTKSanPham(MouseEvent event) {\n    try {\n        // Chuyển đến giao diện thống kê sản phẩm\n        loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n    }\n}\n\n// Phương thức hiển thị thông báo\nprivate void showAlert(AlertType alertType, String title, String content) {\n    Alert alert = new Alert(alertType);\n    alert.setTitle(title);\n    alert.setHeaderText(null);\n    alert.setContentText(content);\n    alert.showAndWait();\n}\n```\n</html>\n","workspace_file_chunks":[]},{"request_id":"ab6eca4e-ab88-4632-8751-86769c600407","status":"cancelled","chatItemType":"agentic-turn-delimiter"},{"status":"success","request_id":"9e3577ca-571c-4112-a006-d942ec04335b","request_message":"bỏ comment đi","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"bỏ comment đi"}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":0,"type":0,"content":"Dưới đây là tất cả các phương thức điều hướng và đóng mở menu không có comment:\n\n```java\nMap<VBox,VBox> map = new HashMap<VBox,VBox>();\n\npublic void addMenusToMap() {\n    addMenusToMapImpl();\n}\n\nprivate void addMenusToMapImpl() {\n    map.put(banHangSubVBox, banHangSubMenuList);\n    map.put(quanLySubVBox, quanLySubMenuList);\n    map.put(timKiemSubVBox, timKiemSubMenuList);\n    map.put(thongKeSubVBox, thongKeSubMenuList);\n\n    for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n        entry.getKey().getChildren().remove(entry.getValue());\n    }\n}\n\npublic void toolsSlider(VBox menu, VBox subMenu) {\n    toolsSliderImpl(menu, subMenu);\n}\n\nprivate void toolsSliderImpl(VBox menu, VBox subMenu) {\n    if(menu.getChildren().contains(subMenu)) {\n        final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n        transition.setFromValue(0.5);\n        transition.setToValue(1);\n        transition.setInterpolator(Interpolator.EASE_IN);\n        menu.getChildren().remove(subMenu);\n        transition.play();\n    } else {\n        final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n        transition.setFromValue(0.5);\n        transition.setToValue(1);\n        transition.setInterpolator(Interpolator.EASE_IN);\n        menu.getChildren().add(subMenu);\n        transition.play();\n    }\n}\n\npublic void removeOtherMenus(VBox menu) {\n    removeOtherMenusImpl(menu);\n}\n\nprivate void removeOtherMenusImpl(VBox menu) {\n    for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n        if(!entry.getKey().equals(menu))\n            entry.getKey().getChildren().remove(entry.getValue());\n    }\n}\n\n@FXML\nvoid handleGioHangClick(MouseEvent event) {\n    try {\n        if (banHangSubVBox != null && banHangSubMenuList != null) {\n            toolsSlider(banHangSubVBox, banHangSubMenuList);\n            removeOtherMenus(banHangSubVBox);\n        }\n        showMainSalesInterface();\n        updateTotalAmount();\n    } catch (Exception e) {\n        System.err.println(\"Lỗi trong handleGioHangClick: \" + e.getMessage());\n        e.printStackTrace();\n    }\n}\n\n@FXML\nvoid handleQuanLyClick(MouseEvent event) {\n    toolsSlider(quanLySubVBox, quanLySubMenuList);\n    removeOtherMenus(quanLySubVBox);\n}\n\n@FXML\nvoid handleThongKeClick(MouseEvent event) {\n    toolsSlider(thongKeSubVBox, thongKeSubMenuList);\n    removeOtherMenus(thongKeSubVBox);\n}\n\n@FXML\nvoid handleTimKiemClick(MouseEvent event) {\n    try {\n        loadFXML(\"/fxml/TraCuu_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu: \" + e.getMessage());\n        toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n        removeOtherMenus(timKiemSubVBox);\n        showSearchInterface();\n    }\n}\n\nprivate void loadFXML(String fxmlPath) throws Exception {\n    Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n    Scene scene = new Scene(root);\n    Stage stage = (Stage) p_gioHang.getScene().getWindow();\n    stage.setScene(scene);\n    stage.show();\n}\n\n@FXML\nvoid toQLHoaDon(MouseEvent event) {\n    try {\n        loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý hóa đơn!\");\n    }\n}\n\n@FXML\nvoid toQLKhachHang(MouseEvent event) {\n    try {\n        loadFXML(\"/fxml/QL_KhachHang_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý khách hàng!\");\n    }\n}\n\n@FXML\nvoid toQLNhanVien(MouseEvent event) {\n    try {\n        loadFXML(\"/fxml/QL_NhanVien_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý nhân viên!\");\n    }\n}\n\n@FXML\nvoid toQLPhieuNhap(MouseEvent event) {\n    try {\n        loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n    }\n}\n\n@FXML\nvoid toQLSanPham(MouseEvent event) {\n    try {\n        loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n    }\n}\n\n@FXML\nvoid toQLTaiKhoan(MouseEvent event) {\n    try {\n        loadFXML(\"/fxml/QL_TaiKhoan_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý tài khoản!\");\n    }\n}\n\n@FXML\nvoid toTKDoanhThu(MouseEvent event) {\n    try {\n        loadFXML(\"/fxml/ThongKeDoanhThu_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê doanh thu!\");\n    }\n}\n\n@FXML\nvoid toTKSanPham(MouseEvent event) {\n    try {\n        loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n    }\n}\n\nprivate void showAlert(AlertType alertType, String title, String content) {\n    Alert alert = new Alert(alertType);\n    alert.setTitle(title);\n    alert.setHeaderText(null);\n    alert.setContentText(content);\n    alert.showAndWait();\n}\n```\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"bỏ comment đi"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client","folderRoot":"C:/Users/Hoang Son/git/LTPTJava_GiaVanVa_HK2-2024-2025_Client"}],"workspaceFoldersUnchanged":false}}],"response_text":"Dưới đây là tất cả các phương thức điều hướng và đóng mở menu không có comment:\n\n```java\nMap<VBox,VBox> map = new HashMap<VBox,VBox>();\n\npublic void addMenusToMap() {\n    addMenusToMapImpl();\n}\n\nprivate void addMenusToMapImpl() {\n    map.put(banHangSubVBox, banHangSubMenuList);\n    map.put(quanLySubVBox, quanLySubMenuList);\n    map.put(timKiemSubVBox, timKiemSubMenuList);\n    map.put(thongKeSubVBox, thongKeSubMenuList);\n\n    for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n        entry.getKey().getChildren().remove(entry.getValue());\n    }\n}\n\npublic void toolsSlider(VBox menu, VBox subMenu) {\n    toolsSliderImpl(menu, subMenu);\n}\n\nprivate void toolsSliderImpl(VBox menu, VBox subMenu) {\n    if(menu.getChildren().contains(subMenu)) {\n        final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n        transition.setFromValue(0.5);\n        transition.setToValue(1);\n        transition.setInterpolator(Interpolator.EASE_IN);\n        menu.getChildren().remove(subMenu);\n        transition.play();\n    } else {\n        final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n        transition.setFromValue(0.5);\n        transition.setToValue(1);\n        transition.setInterpolator(Interpolator.EASE_IN);\n        menu.getChildren().add(subMenu);\n        transition.play();\n    }\n}\n\npublic void removeOtherMenus(VBox menu) {\n    removeOtherMenusImpl(menu);\n}\n\nprivate void removeOtherMenusImpl(VBox menu) {\n    for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n        if(!entry.getKey().equals(menu))\n            entry.getKey().getChildren().remove(entry.getValue());\n    }\n}\n\n@FXML\nvoid handleGioHangClick(MouseEvent event) {\n    try {\n        if (banHangSubVBox != null && banHangSubMenuList != null) {\n            toolsSlider(banHangSubVBox, banHangSubMenuList);\n            removeOtherMenus(banHangSubVBox);\n        }\n        showMainSalesInterface();\n        updateTotalAmount();\n    } catch (Exception e) {\n        System.err.println(\"Lỗi trong handleGioHangClick: \" + e.getMessage());\n        e.printStackTrace();\n    }\n}\n\n@FXML\nvoid handleQuanLyClick(MouseEvent event) {\n    toolsSlider(quanLySubVBox, quanLySubMenuList);\n    removeOtherMenus(quanLySubVBox);\n}\n\n@FXML\nvoid handleThongKeClick(MouseEvent event) {\n    toolsSlider(thongKeSubVBox, thongKeSubMenuList);\n    removeOtherMenus(thongKeSubVBox);\n}\n\n@FXML\nvoid handleTimKiemClick(MouseEvent event) {\n    try {\n        loadFXML(\"/fxml/TraCuu_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu: \" + e.getMessage());\n        toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n        removeOtherMenus(timKiemSubVBox);\n        showSearchInterface();\n    }\n}\n\nprivate void loadFXML(String fxmlPath) throws Exception {\n    Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n    Scene scene = new Scene(root);\n    Stage stage = (Stage) p_gioHang.getScene().getWindow();\n    stage.setScene(scene);\n    stage.show();\n}\n\n@FXML\nvoid toQLHoaDon(MouseEvent event) {\n    try {\n        loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý hóa đơn!\");\n    }\n}\n\n@FXML\nvoid toQLKhachHang(MouseEvent event) {\n    try {\n        loadFXML(\"/fxml/QL_KhachHang_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý khách hàng!\");\n    }\n}\n\n@FXML\nvoid toQLNhanVien(MouseEvent event) {\n    try {\n        loadFXML(\"/fxml/QL_NhanVien_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý nhân viên!\");\n    }\n}\n\n@FXML\nvoid toQLPhieuNhap(MouseEvent event) {\n    try {\n        loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n    }\n}\n\n@FXML\nvoid toQLSanPham(MouseEvent event) {\n    try {\n        loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n    }\n}\n\n@FXML\nvoid toQLTaiKhoan(MouseEvent event) {\n    try {\n        loadFXML(\"/fxml/QL_TaiKhoan_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý tài khoản!\");\n    }\n}\n\n@FXML\nvoid toTKDoanhThu(MouseEvent event) {\n    try {\n        loadFXML(\"/fxml/ThongKeDoanhThu_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê doanh thu!\");\n    }\n}\n\n@FXML\nvoid toTKSanPham(MouseEvent event) {\n    try {\n        loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n    }\n}\n\nprivate void showAlert(AlertType alertType, String title, String content) {\n    Alert alert = new Alert(alertType);\n    alert.setTitle(title);\n    alert.setHeaderText(null);\n    alert.setContentText(content);\n    alert.showAndWait();\n}\n```\n","workspace_file_chunks":[]}],"feedbackStates":{"temp-fe-f964560d-6504-4734-8a7a-ac061ad14cdb":{"selectedRating":0,"feedbackNote":""},"temp-fe-14651157-7bf2-4342-9ad8-1fe91ee65281":{"selectedRating":0,"feedbackNote":""},"temp-fe-68be8e97-667c-490a-971f-885f2ba473b5":{"selectedRating":0,"feedbackNote":""},"temp-fe-e4d32617-8084-4c21-831a-dcecfbacb593":{"selectedRating":0,"feedbackNote":""},"temp-fe-59a2365b-4da7-4571-9910-1ca8a2140d61":{"selectedRating":0,"feedbackNote":""},"temp-fe-14c96bb5-7891-4158-b35a-bffa35ce970f":{"selectedRating":0,"feedbackNote":""},"temp-fe-66c31957-6ce4-4dae-a183-055a62b6e352":{"selectedRating":0,"feedbackNote":""},"temp-fe-137abeb2-27ad-4f14-9623-d0d2e63d7b62":{"selectedRating":0,"feedbackNote":""},"temp-fe-89afd1d2-0411-4be5-90c1-924f1160d796":{"selectedRating":0,"feedbackNote":""},"temp-fe-0050140e-ae85-45ef-930c-d9c4a5f70588":{"selectedRating":0,"feedbackNote":""},"temp-fe-381e6119-f913-4edb-9b52-16582b8f4628":{"selectedRating":0,"feedbackNote":""},"temp-fe-40075822-4e93-456e-9b9d-f8605cec84d3":{"selectedRating":0,"feedbackNote":""},"temp-fe-56016d44-85fd-4616-b794-e30656b5fbe6":{"selectedRating":0,"feedbackNote":""},"temp-fe-aa6bf4c2-54a3-4c29-aa37-9e739e063141":{"selectedRating":0,"feedbackNote":""},"temp-fe-1538c77f-5818-4af4-a90e-f804ef360c4c":{"selectedRating":0,"feedbackNote":""},"temp-fe-35d26c9e-23bf-49c1-bae4-ffbb256d261c":{"selectedRating":0,"feedbackNote":""},"temp-fe-7e7f466f-c5e5-43a0-b3a6-b3d578323093":{"selectedRating":0,"feedbackNote":""},"temp-fe-5be22215-96ec-4f00-b677-40f96318d8bf":{"selectedRating":0,"feedbackNote":""},"temp-fe-04ed3963-0d9a-4f18-8a7c-d6562969558d":{"selectedRating":0,"feedbackNote":""},"temp-fe-28e15ed5-12a3-48ae-b406-8503620f6c7e":{"selectedRating":0,"feedbackNote":""},"temp-fe-28b684af-4f01-49b1-81b9-b78c8910652d":{"selectedRating":0,"feedbackNote":""},"temp-fe-c01a84c9-1245-49b1-8b48-234d69bd4cb9":{"selectedRating":0,"feedbackNote":""},"temp-fe-e83aef96-6f02-408d-aa34-0fc0977abc6d":{"selectedRating":0,"feedbackNote":""},"temp-fe-b87bd751-ff8c-4343-b653-5cda152adf85":{"selectedRating":0,"feedbackNote":""},"temp-fe-b8eb989a-2db2-4e68-8aae-abc33670ed4f":{"selectedRating":0,"feedbackNote":""},"temp-fe-b55c8090-bf8e-4024-8038-885ebd410459":{"selectedRating":0,"feedbackNote":""},"temp-fe-c3a21b90-5606-4dc9-811c-ba03eafc5d26":{"selectedRating":0,"feedbackNote":""},"temp-fe-606cde6b-9897-44c2-88ae-951c633a9f3c":{"selectedRating":0,"feedbackNote":""},"temp-fe-f1d76c21-67bd-49ad-b8bb-f5e2569f5516":{"selectedRating":0,"feedbackNote":""},"temp-fe-be857ccc-8c8e-4693-ab6d-204f4b7d1072":{"selectedRating":0,"feedbackNote":""},"temp-fe-ad07996b-dc32-4f74-9ef2-9a78d47c536e":{"selectedRating":0,"feedbackNote":""}},"toolUseStates":{"1f271c94-3772-4bfe-bfcd-1794f81c7cf7;toolu_vrtx_013tL4KxbFkj36pnoWewEMoe":{"phase":5,"result":{"text":"The following code sections were retrieved:\nPath: src/main/java/iuh/fit/controller/QL_SanPham_controller.java\n...\n\n    @FXML\n    private Label lb_thongKe;\n\n    @FXML\n    private Label lb_thongKeDoanhThu;\n\n    @FXML\n    private Label lb_thongKeSanPham;\n\n    @FXML\n    private Label lb_timKiem;\n\n    @FXML\n    private TableColumn<?, ?> lc_giaNhap;\n\n    @FXML\n    private Pane p_HoaDon;\n\n    @FXML\n    private Pane p_gioHang;\n\n    @FXML\n    private Pane p_hoaDon;\n\n    @FXML\n    private Pane p_nhanVien;\n\n    @FXML\n    private Pane p_phieuNhap;\n\n    @FXML\n    private Pane p_quanLy;\n\n    @FXML\n    private Pane p_sanPham;\n\n    @FXML\n    private Pane p_taiKhoan;\n\n    @FXML\n    private Pane p_thongKe;\n\n    @FXML\n    private Pane p_thongKeDoanhThu;\n\n    @FXML\n    private Pane p_thongKeSanPham;\n\n    @FXML\n    private Pane p_timKiem;\n\n    @FXML\n    private VBox quanLySubMenuList;\n\n    @FXML\n    private VBox quanLySubVBox;\n\n    @FXML\n    private TableView<SanPham> table_SP;\n\n    @FXML\n    private VBox thongKeSubMenuList;\n...\n\n    @FXML\n    void handleTimKiemClick(MouseEvent event) {\n        try {\n            loadFXML(\"/fxml/TraCuu_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu!\");\n        }\n    }\n\n    @FXML\n    void moGiaoDienTimKiemSP(MouseEvent event) {\n        try {\n            loadFXML(\"/fxml/TraCuu_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu!\");\n        }\n    }\n...\n\n    @FXML\n    void toQLPhieuNhap(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý phiếu nhập\n            loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n        }\n    }\n\n    @FXML\n    void toQLSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý sản phẩm\n            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n        }\n    }\n...\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê sản phẩm\n            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n        }\n    }\n    private void showAlert(Alert.AlertType alertType, String title, String content) {\n        Alert alert = new Alert(alertType);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n\n\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n...\nPath: src/main/java/iuh/fit/controller/QL_TaiKoan_controller.java\n...\n\n    @FXML\n    private VBox vBox;\n\n    @FXML\n    void handleGioHangClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleQuanLyClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleThongKeClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleTimKiemClick(MouseEvent event) {\n        try {\n            loadFXML(\"/fxml/TraCuu_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu!\");\n        }\n    }\n...\nPath: src/main/java/iuh/fit/controller/QL_KhachHang_controller.java\n...\n\n    @FXML\n    void toQLPhieuNhap(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý phiếu nhập\n            loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n        }\n    }\n\n    @FXML\n    void toQLSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý sản phẩm\n            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n        }\n    }\n...\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê sản phẩm\n            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n        }\n    }\n    private void showAlert(Alert.AlertType alertType, String title, String content) {\n        Alert alert = new Alert(alertType);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n\n    @FXML\n    void moGiaoDienTimKiemKH(MouseEvent event) {\n        try{\n            loadFXML(\"/fxml/TraCuuKhachHang_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tìm kiếm khách hàng!\");\n        }\n    }\n...\nPath: src/main/java/iuh/fit/controller/QL_HoaDon_controller.java\n...\n\n    @FXML\n    void handleGioHangClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleQuanLyClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleThongKeClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleTimKiemClick(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện tìm kiếm\n            loadFXML(\"/fxml/TraCuu_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu!\");\n        }\n    }\n\n    @FXML\n    void toQLHoaDon(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý hóa đơn\n            loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý hóa đơn!\");\n        }\n    }\n...\n\n    @FXML\n    void toQLPhieuNhap(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý phếu nhập\n            loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n        }\n    }\n\n    @FXML\n    void toQLSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý sản phẩm\n            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n        }\n    }\n...\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê sản phẩm\n            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n        }\n    }\n    private void showAlert(Alert.AlertType alertType, String title, String content) {\n        Alert alert = new Alert(alertType);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n...\nPath: src/main/java/iuh/fit/controller/QL_PhieuNhap_controller.java\n...\n\n    @FXML\n    private TextField txt_MaPhieuNhap;\n\n    @FXML\n    private TextField txt_SoSP;\n\n    @FXML\n    private TextField txt_TenNV;\n\n    @FXML\n    private TextField txt_ThanhTien;\n\n    @FXML\n    private TextField txt_ThoiGian;\n\n    @FXML\n    private VBox vBox;\n\n    @FXML\n    void handleGioHangClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleQuanLyClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleThongKeClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleTimKiemClick(MouseEvent event) {\n        try {\n            loadFXML(\"/fxml/TraCuu_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu!\");\n        }\n    }\n...\n\n    @FXML\n    void toQLSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý sản phẩm\n            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n        }\n    }\n\n    @FXML\n    void toQLTaiKhoan(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý tài khoản\n            loadFXML(\"/fxml/QL_TaiKhoan_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý tài khoản!\");\n        }\n    }\n...\nPath: src/main/java/iuh/fit/controller/BanHang_controller.java\n...\n\n    @FXML\n    void toQLPhieuNhap(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý phiếu nhập\n            loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n        }\n    }\n\n    @FXML\n    void toQLSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý sản phẩm\n            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n        }\n    }\n...\nPath: src/main/java/iuh/fit/App.java\npackage iuh.fit;\n\nimport java.io.IOException;\nimport java.net.URL;\nimport java.time.LocalDateTime;\nimport java.util.List;\n\nimport iuh.fit.daos.HoaDon_dao;\nimport iuh.fit.daos.SanPham_dao;\nimport iuh.fit.daos.TaiKhoan_dao;\nimport iuh.fit.entities.HoaDon;\nimport iuh.fit.entities.SanPham;\nimport iuh.fit.entities.TaiKhoan;\nimport javafx.application.Application;\nimport javafx.application.Platform;\nimport javafx.fxml.FXMLLoader;\nimport javafx.geometry.Rectangle2D;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.stage.Modality;\nimport javafx.stage.Screen;\nimport javafx.stage.Stage;\nimport jakarta.persistence.EntityManagerFactory;\nimport jakarta.persistence.Persistence;\n\n/**\n * Lớp chính của ứng dụng\n */\npublic class App extends Application {\n//    public static final int widthModalLogin = 600;\n//    public static final int heightModalLogin = 400;\n    public static Stage stage;\n    public static Scene primaryScene;\n    public static String user;\n    public static String ma;\n    public static TaiKhoan taiKhoan;\n    public static String maTraCuu;\n\n    // Biến để theo dõi trạng thái đăng nhập\n    private static boolean loginScreenOpened = false;\n\n    public static void main(String[] args) {\n        System.setProperty(\"javafx.preloader\", AppPreloader.class.getName());\n        launch(args);\n    }\n\n    @Override\n    public void init() throws Exception {\n        try {\n            // Kết nối đến cơ sở dữ liệu\n            EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"mariadb\");\n\n            // Kiểm tra và cập nhật dữ liệu khi khởi động ứng dụng\n            checkSanPham();\n        } catch (Exception e) {\n            System.err.println(\"Lỗi khi khởi tạo ứng dụng: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n        System.out.println(\"App.start() called\");\n        stage = primaryStage;\n\n        // Thiết lập sự kiện khi đóng cửa sổ chính\n        stage.setOnCloseRequest(event -> {\n            System.out.println(\"Application is closing\");\n            Platform.exit();\n            System.exit(0);\n        });\n\n        // Chỉ mở giao diện đăng nhập nếu không có splash screen\n        if (AppPreloader.splashStage == null) {\n            System.out.println(\"No splash screen detected, opening login screen directly\");\n//            openLoginGUI();\n        }\n    }\n\n    /**\n     * Mở giao diện chính của ứng dụng\n     */\n    public static void openMainGUI() throws IOException {\n        try {\n            // Load the main GUI\n            Parent root = FXMLLoader.load(App.class.getResource(\"/fxml/BanHang_gui.fxml\"));\n            Scene scene = new Scene(root);\n            scene.getStylesheets().add(App.class.getResource(\"/styles/menu.css\").toExternalForm());\n\n            // Set the new scene for the stage\n            stage.setScene(scene);\n            stage.setMaximized(true);\n            stage.setTitle(\"Hệ thống quản lý bán hàng\");\n\n            // Show the main GUI\n            stage.show();\n        } catch (IOException ex) {\n            System.err.println(\"Error loading BanHang_gui.fxml: \" + ex.getMessage());\n            throw ex;\n        }\n    }\n...\n\n//            if (loginFxmlUrl == null) {\n//                System.err.println(\"Login_gui.fxml not found! Trying to open BanHang_gui.fxml instead.\");\n//                openMainGUI();\n//                return;\n//            }\n\n            // Load giao diện đăng nhập\n            FXMLLoader fxmlLoader = new FXMLLoader(loginFxmlUrl);\n            Parent root = fxmlLoader.load();\n\n            // Tạo scene mới\n            Scene scene = new Scene(root);\n            stage.setScene(scene);\n            stage.setTitle(\"Đăng nhập\");\n            stage.setMaximized(true);\n\n            // Đặt kích thước và vị trí của cửa sổ\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n            stage.setX((primaryScreenBounds.getWidth() - root.prefWidth(-1)) / 2);\n            stage.setY((primaryScreenBounds.getHeight() - root.prefHeight(-1)) / 2);\n...\nPath: src/main/java/iuh/fit/MainApp.java\npackage iuh.fit;\n\nimport javafx.application.Application;\nimport javafx.fxml.FXMLLoader;\nimport javafx.geometry.Rectangle2D;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.stage.Screen;\nimport javafx.stage.Stage;\n\n/**\n * Lớp để chạy ứng dụng trực tiếp từ màn hình bán hàng\n */\npublic class MainApp extends Application {\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n        try {\n            System.out.println(\"MainApp: Loading BanHang_gui.fxml\");\n            \n            // Load giao diện bán hàng\n            Parent root = FXMLLoader.load(getClass().getResource(\"/fxml/BanHang_gui.fxml\"));\n            Scene scene = new Scene(root);\n            \n            // Thêm stylesheet nếu có\n            try {\n                scene.getStylesheets().add(getClass().getResource(\"/styles/menu.css\").toExternalForm());\n            } catch (Exception e) {\n                System.err.println(\"MainApp: Could not load stylesheet: \" + e.getMessage());\n            }\n            \n            // Thiết lập stage\n            primaryStage.setScene(scene);\n            primaryStage.setTitle(\"Hệ thống quản lý bán hàng\");\n            \n            // Thiết lập kích thước stage theo màn hình chính\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n            primaryStage.setX(primaryScreenBounds.getMinX());\n            primaryStage.setY(primaryScreenBounds.getMinY());\n            primaryStage.setWidth(primaryScreenBounds.getWidth());\n            primaryStage.setHeight(primaryScreenBounds.getHeight());\n            \n            // Hiển thị stage\n            primaryStage.show();\n            \n            System.out.println(\"MainApp: Main screen opened successfully\");\n        } catch (Exception e) {\n            System.err.println(\"MainApp: Error loading BanHang_gui.fxml: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n...\nPath: src/main/java/iuh/fit/controller/Login_controller.java\npackage iuh.fit.controller;\n\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.ResourceBundle;\n\nimport iuh.fit.App;\nimport iuh.fit.daos.TaiKhoan_dao;\nimport iuh.fit.entities.TaiKhoan;\nimport javafx.event.ActionEvent;\nimport javafx.fxml.FXML;\nimport javafx.fxml.Initializable;\nimport javafx.scene.control.Alert;\nimport javafx.scene.control.Alert.AlertType;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.Hyperlink;\nimport javafx.scene.control.PasswordField;\nimport javafx.scene.control.TextField;\nimport javafx.scene.input.KeyCode;\nimport javafx.scene.input.KeyEvent;\n\n/**\n * Controller cho màn hình đăng nhập\n */\npublic class Login_controller implements Initializable {\n\n    @FXML\n    private TextField txtUsername;\n\n    @FXML\n    private PasswordField txtPassword;\n\n    @FXML\n    private Button btnLogin;\n\n    @FXML\n    private Hyperlink linkForgotPassword;\n\n    private TaiKhoan_dao taiKhoanDao;\n\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n        // Khởi tạo DAO\n        taiKhoanDao = new TaiKhoan_dao();\n\n        // Thêm sự kiện Enter cho các trường nhập liệu\n        txtUsername.setOnKeyPressed(this::handleEnterKey);\n        txtPassword.setOnKeyPressed(this::handleEnterKey);\n    }\n\n    /**\n     * Xử lý sự kiện nhấn Enter\n     */\n    private void handleEnterKey(KeyEvent event) {\n        if (event.getCode() == KeyCode.ENTER) {\n            login();\n        }\n    }\n\n    /**\n     * Xử lý sự kiện nhấn nút đăng nhập\n     */\n    @FXML\n    private void handleLoginButtonAction(ActionEvent event) {\n        login();\n    }\n\n    /**\n     * Xử lý sự kiện quên mật khẩu\n     */\n    @FXML\n    private void handleForgotPasswordAction(ActionEvent event) {\n        try {\n            App.openQuenMK();\n        } catch (IOException e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quên mật khẩu!\");\n        }\n    }\n\n    /**\n     * Thực hiện đăng nhập\n     */\n    private void login() {\n        String username = txtUsername.getText().trim();\n        String password = txtPassword.getText().trim();\n\n        // Validate input\n        if (username.isEmpty()) {\n            showAlert(AlertType.WARNING, \"Cảnh báo\", \"Vui lòng nhập tên đăng nhập!\");\n            txtUsername.requestFocus();\n            return;\n        }\n\n        if (password.isEmpty()) {\n            showAlert(AlertType.WARNING, \"Cảnh báo\", \"Vui lòng nhập mật khẩu!\");\n            txtPassword.requestFocus();\n            return;\n        }\n\n        // Check login\n        try {\n            TaiKhoan taiKhoan = taiKhoanDao.findByUsernameandPassword(username, password);\n            if (taiKhoan != null) {\n                // Save login information\n                App.taiKhoan = taiKhoan;\n                App.user = username;\n                App.ma = taiKhoan.getMaTaiKhoan();\n                txtUsername.getScene().getWindow().hide();\n                // Close the login screen and open the main GUI\n                App.openMainGUI();\n            } else {\n                showAlert(AlertType.ERROR, \"Lỗi đăng nhập\", \"Tên đăng nhập hoặc mật khẩu không đúng!\");\n                txtPassword.clear();\n                txtPassword.requestFocus();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\"...","isError":false,"requestId":""}},"420d66c4-884d-4776-a4b9-5c909ee0790f;toolu_vrtx_01Gvud9iXC981CsveJAUsoPr":{"phase":5,"result":{"text":"The following code sections were retrieved:\nPath: src/main/java/iuh/fit/controller/QL_SanPham_controller.java\n...\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê sản phẩm\n            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n        }\n    }\n    private void showAlert(Alert.AlertType alertType, String title, String content) {\n        Alert alert = new Alert(alertType);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n\n\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n...\nPath: src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Phiếu nhập\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/QL_TaiKoan_controller.java\n...\n\n    @FXML\n    private VBox vBox;\n\n    @FXML\n    void handleGioHangClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleQuanLyClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleThongKeClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleTimKiemClick(MouseEvent event) {\n        try {\n            loadFXML(\"/fxml/TraCuu_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu!\");\n        }\n    }\n...\n\n    @FXML\n    void xoaNV(MouseEvent event) {\n\n    }\n\n    @FXML\n    void xoaTrang(MouseEvent event) {\n\n    }\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n...\nPath: src/main/java/iuh/fit/controller/QL_KhachHang_controller.java\n...\n\n    @FXML\n    void handleQuanLyClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleThongKeClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleTimKiemClick(MouseEvent event) {\n        try {\n            loadFXML(\"/fxml/TraCuu_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu!\");\n        }\n    }\n\n\n    @FXML\n    void toQLHoaDon(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý hóa đơn\n            loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý hóa đơn!\");\n        }\n    }\n...\n\n    @FXML\n    void toQLPhieuNhap(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý phiếu nhập\n            loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n        }\n    }\n\n    @FXML\n    void toQLSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý sản phẩm\n            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n        }\n    }\n...\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê sản phẩm\n            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n        }\n    }\n    private void showAlert(Alert.AlertType alertType, String title, String content) {\n        Alert alert = new Alert(alertType);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n\n    @FXML\n    void moGiaoDienTimKiemKH(MouseEvent event) {\n        try{\n            loadFXML(\"/fxml/TraCuuKhachHang_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tìm kiếm khách hàng!\");\n        }\n    }\n...\n\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n...\nPath: src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Khách hàng\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/QL_HoaDon_controller.java\n...\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê sản phẩm\n            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n        }\n    }\n    private void showAlert(Alert.AlertType alertType, String title, String content) {\n        Alert alert = new Alert(alertType);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n...\nPath: src/main/java/iuh/fit/controller/QL_PhieuNhap_controller.java\n...\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n    private void loadTableData() {\n        try {\n            // Tạo DAO object\n            PhieuNhapHang_dao pNhapDAO = new PhieuNhapHang_dao();\n\n            // Xóa dữ liệu cũ trong table\n            table_PNhap.getItems().clear();\n...\nPath: src/main/java/iuh/fit/controller/TraCuu_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        cbb_GiaoDien.setOnAction(event -> {\n            String selectedValue = cbb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Sản phẩm\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) cbb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/Login_controller.java\npackage iuh.fit.controller;\n\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.ResourceBundle;\n\nimport iuh.fit.App;\nimport iuh.fit.daos.TaiKhoan_dao;\nimport iuh.fit.entities.TaiKhoan;\nimport javafx.event.ActionEvent;\nimport javafx.fxml.FXML;\nimport javafx.fxml.Initializable;\nimport javafx.scene.control.Alert;\nimport javafx.scene.control.Alert.AlertType;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.Hyperlink;\nimport javafx.scene.control.PasswordField;\nimport javafx.scene.control.TextField;\nimport javafx.scene.input.KeyCode;\nimport javafx.scene.input.KeyEvent;\n\n/**\n * Controller cho màn hình đăng nhập\n */\npublic class Login_controller implements Initializable {\n\n    @FXML\n    private TextField txtUsername;\n\n    @FXML\n    private PasswordField txtPassword;\n\n    @FXML\n    private Button btnLogin;\n\n    @FXML\n    private Hyperlink linkForgotPassword;\n\n    private TaiKhoan_dao taiKhoanDao;\n\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n        // Khởi tạo DAO\n        taiKhoanDao = new TaiKhoan_dao();\n\n        // Thêm sự kiện Enter cho các trường nhập liệu\n        txtUsername.setOnKeyPressed(this::handleEnterKey);\n        txtPassword.setOnKeyPressed(this::handleEnterKey);\n    }\n\n    /**\n     * Xử lý sự kiện nhấn Enter\n     */\n    private void handleEnterKey(KeyEvent event) {\n        if (event.getCode() == KeyCode.ENTER) {\n            login();\n        }\n    }\n\n    /**\n     * Xử lý sự kiện nhấn nút đăng nhập\n     */\n    @FXML\n    private void handleLoginButtonAction(ActionEvent event) {\n        login();\n    }\n\n    /**\n     * Xử lý sự kiện quên mật khẩu\n     */\n    @FXML\n    private void handleForgotPasswordAction(ActionEvent event) {\n        try {\n            App.openQuenMK();\n        } catch (IOException e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quên mật khẩu!\");\n        }\n    }\n\n    /**\n     * Thực hiện đăng nhập\n     */\n    private void login() {\n        String username = txtUsername.getText().trim();\n        String password = txtPassword.getText().trim();\n\n        // Validate input\n        if (username.isEmpty()) {\n            showAlert(AlertType.WARNING, \"Cảnh báo\", \"Vui lòng nhập tên đăng nhập!\");\n            txtUsername.requestFocus();\n            return;\n        }\n\n        if (password.isEmpty()) {\n            showAlert(AlertType.WARNING, \"Cảnh báo\", \"Vui lòng nhập mật khẩu!\");\n            txtPassword.requestFocus();\n            return;\n        }\n\n        // Check login\n        try {\n            TaiKhoan taiKhoan = taiKhoanDao.findByUsernameandPassword(username, password);\n            if (taiKhoan != null) {\n                // Save login information\n                App.taiKhoan = taiKhoan;\n                App.user = username;\n                App.ma = taiKhoan.getMaTaiKhoan();\n                txtUsername.getScene().getWindow().hide();\n                // Close the login screen and open the main GUI\n                App.openMainGUI();\n            } else {\n                showAlert(AlertType.ERROR, \"Lỗi đăng nhập\", \"Tên đăng nhập hoặc mật khẩu không đúng!\");\n                txtPassword.clear();\n                txtPassword.requestFocus();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Lỗi khi đăng nhập: \" + e.getMessage());\n        }\n    }\n...\nPath: src/main/java/iuh/fit/controller/BanHang_controller.java\n...\n\n    @FXML\n    void toQLKhachHang(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý khách hàng\n            loadFXML(\"/fxml/QL_KhachHang_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý khách hàng!\");\n        }\n    }\n\n    @FXML\n    void toQLNhanVien(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý nhân viên\n            loadFXML(\"/fxml/QL_NhanVien_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý nhân viên!\");\n        }\n    }\n\n    @FXML\n    void toQLPhieuNhap(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý phiếu nhập\n            loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n        }\n    }\n\n    @FXML\n    void toQLSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý sản phẩm\n            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n        }\n    }\n\n    @FXML\n    void toQLTaiKhoan(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý tài khoản\n            loadFXML(\"/fxml/QL_TaiKhoan_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý tài khoản!\");\n        }\n    }\n\n    @FXML\n    void toTKDoanhThu(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê doanh thu\n            loadFXML(\"/fxml/ThongKeDoanhThu_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê doanh thu!\");\n        }\n    }\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê sản phẩm\n            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n        }\n    }\n...\n\n    /**\n     * Hiển thị thông báo\n     */\n    private void showAlert(AlertType alertType, String title, String content) {\n        Alert alert = new Alert(alertType);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n\n    /**\n     * Load FXML file\n     */\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n...\nPath: src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java\n...\n\n    private void loadTableData() {\n        try {\n            NhanVien_dao nhanVienDao = new NhanVien_dao();\n            List<NhanVien> dsnv = nhanVienDao.readAllNhanVien();\n            ObservableList<NhanVien> data = FXCollections.observableArrayList(dsnv);\n            tableNhanVien.setItems(data);\n        } catch (Exception e) {\n            showError(\"Lỗi\", \"Không thể tải dữ liệu nhân viên\");\n        }\n    }\n\n    private void setupTableClickEvent() {\n        tableNhanVien.setOnMouseClicked(event -> {\n            NhanVien selectedNhanVien = tableNhanVien.getSelectionModel().getSelectedItem();\n            if (selectedNhanVien != null) {\n                updateLabels(selectedNhanVien);\n            }\n        });\n    }\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Nhân viên\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n                \n            } catch (Exception e) {\n                showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n                ccb_GiaoDien.setValue(\"Nhân viên\");\n            }\n        });\n    }\n\n    @FXML\n    void timKiem(MouseEvent event) {\n        String maNhanVien = txt_maNV.getText();\n        App.maTraCuu = maNhanVien;\n        NhanVien nhanVien = new NhanVien_dao().readNhanVien(maNhanVien);\n        lb_maNV.setText(nhanVien.getMaNV());\n        lb_tenNV.setText(nhanVien.getTenNV());\n        lb_cccd.setText(nhanVien.getCccd());\n        lb_sdt.setText(nhanVien.getSdt());\n        lb_email.setText(nhanVien.getEmail());\n        lb_diaChi.setText(nhanVien.getDiaChi());\n        lb_chucVu.setText(nhanVien.getChucVu().toString());\n        lb_ngaySinh.setText(nhanVien.getNgaySinh().format(dateFormatter));\n        highlightMatchingRow(maNhanVien);\n    }\n...\n\n    @FXML\n    void toQLHoaDon(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyHoaDon_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý hóa đơn\");\n        }\n    }\n\n    @FXML\n    void toQLKhachHang(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyKhachHang_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý khách hàng\");\n        }\n    }\n\n    @FXML\n    void toQLNhanVien(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyNhanVien_gui\");\n        } catch (IOException e) {\n            showErro...","isError":false,"requestId":""}},"5ac2c121-ebb4-4271-9660-c073b217609f;toolu_vrtx_01HE1PGeCyHumvvBG9TXXDXU":{"phase":5,"result":{"text":"The following code sections were retrieved:\nPath: src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java\n...\n\n    @FXML\n    private VBox thongKeSubMenuList;\n\n    @FXML\n    private VBox thongKeSubVBox;\n\n    @FXML\n    private VBox timKiemSubMenuList;\n\n    @FXML\n    private VBox timKiemSubVBox;\n\n    @FXML\n    private TextField txt_maPN;\n\n    @FXML\n    private TableView<PhieuNhapHang> tablePhieuNhap;\n\n    @FXML\n    private VBox vBox;\n\n    Map<VBox,VBox> map = new HashMap<VBox,VBox>();\n    public void addMenusToMap() {\n        addMenusToMapImpl();\n    }\n\n    private void addMenusToMapImpl() {\n        map.put(banHangSubVBox, banHangSubMenuList);\n        map.put(quanLySubVBox, quanLySubMenuList);\n        map.put(timKiemSubVBox, timKiemSubMenuList);\n        map.put(thongKeSubVBox,thongKeSubMenuList);\n\n        /**\n         * Remove the components from VBox on load of stage\n         */\n        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n            entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Phiếu nhập\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/App.java\n...\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n        System.out.println(\"App.start() called\");\n        stage = primaryStage;\n\n        // Thiết lập sự kiện khi đóng cửa sổ chính\n        stage.setOnCloseRequest(event -> {\n            System.out.println(\"Application is closing\");\n            Platform.exit();\n            System.exit(0);\n        });\n\n        // Chỉ mở giao diện đăng nhập nếu không có splash screen\n        if (AppPreloader.splashStage == null) {\n            System.out.println(\"No splash screen detected, opening login screen directly\");\n//            openLoginGUI();\n        }\n    }\n\n    /**\n     * Mở giao diện chính của ứng dụng\n     */\n    public static void openMainGUI() throws IOException {\n        try {\n            // Load the main GUI\n            Parent root = FXMLLoader.load(App.class.getResource(\"/fxml/BanHang_gui.fxml\"));\n            Scene scene = new Scene(root);\n            scene.getStylesheets().add(App.class.getResource(\"/styles/menu.css\").toExternalForm());\n\n            // Set the new scene for the stage\n            stage.setScene(scene);\n            stage.setMaximized(true);\n            stage.setTitle(\"Hệ thống quản lý bán hàng\");\n\n            // Show the main GUI\n            stage.show();\n        } catch (IOException ex) {\n            System.err.println(\"Error loading BanHang_gui.fxml: \" + ex.getMessage());\n            throw ex;\n        }\n    }\n...\n\n//            if (loginFxmlUrl == null) {\n//                System.err.println(\"Login_gui.fxml not found! Trying to open BanHang_gui.fxml instead.\");\n//                openMainGUI();\n//                return;\n//            }\n\n            // Load giao diện đăng nhập\n            FXMLLoader fxmlLoader = new FXMLLoader(loginFxmlUrl);\n            Parent root = fxmlLoader.load();\n\n            // Tạo scene mới\n            Scene scene = new Scene(root);\n            stage.setScene(scene);\n            stage.setTitle(\"Đăng nhập\");\n            stage.setMaximized(true);\n\n            // Đặt kích thước và vị trí của cửa sổ\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n            stage.setX((primaryScreenBounds.getWidth() - root.prefWidth(-1)) / 2);\n            stage.setY((primaryScreenBounds.getHeight() - root.prefHeight(-1)) / 2);\n\n            // Hiển thị cửa sổ\n            stage.show();\n            System.out.println(1);\n            System.out.println(\"Login GUI opened successfully\");\n        } catch (Exception ex) {\n            System.err.println(\"Error opening Login_gui.fxml: \" + ex.getMessage());\n            ex.printStackTrace();\n        }\n    }\n\n    /**\n     * Mở giao diện quên mật khẩu\n     */\n    public static void openQuenMK() throws IOException {\n        try {\n            FXMLLoader fxmlLoader = new FXMLLoader(App.class.getResource(\"/fxml/QuenMatKhau_gui.fxml\"));\n            Parent root = fxmlLoader.load();\n            Scene scene = new Scene(root, 600, 400);\n            stage.setScene(scene);\n            stage.setTitle(\"Quên mật khẩu\");\n            stage.show();\n        } catch (NullPointerException ex) {\n            System.err.println(\"Không tìm thấy file QuenMatKhau_gui.fxml: \" + ex.getMessage());\n            ex.printStackTrace();\n            throw ex;\n        }\n    }\n...\n\n    /**\n     * Thay đổi root của scene\n     */\n    public static void setRoot(String fxml) throws IOException {\n        FXMLLoader loader = new FXMLLoader(App.class.getResource(\"/fxml/\" + fxml + \".fxml\"));\n        System.out.println(\"Loading FXML: \" + loader.getLocation());\n        try {\n            Parent newRoot = loader.load();\n            if (primaryScene != null)\n                primaryScene.setRoot(newRoot);\n            stage.setScene(primaryScene);\n            stage.sizeToScene();\n            stage.show();\n        } catch (IOException ex) {\n            System.err.println(\"Không tìm thấy file: \" + fxml);\n            throw ex;\n        }\n    }\n\n    /**\n     * Load FXML file\n     */\n    public static Parent loadFXML(String fxml) throws IOException {\n        FXMLLoader fxmlLoader = new FXMLLoader(App.class.getResource(\"/fxml/\" + fxml + \".fxml\"));\n        return fxmlLoader.load();\n    }\n...\nPath: src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Khách hàng\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Hoá đơn\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/TraCuu_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        cbb_GiaoDien.setOnAction(event -> {\n            String selectedValue = cbb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Sản phẩm\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) cbb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Nhân viên\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Tài khoản\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/QL_TaiKoan_controller.java\n...\n\n    @FXML\n    private VBox vBox;\n\n    @FXML\n    void handleGioHangClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleQuanLyClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleThongKeClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleTimKiemClick(MouseEvent event) {\n        try {\n            loadFXML(\"/fxml/TraCuu_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu!\");\n        }\n    }\n...\n\n    @FXML\n    void xoaNV(MouseEvent event) {\n\n    }\n\n    @FXML\n    void xoaTrang(MouseEvent event) {\n\n    }\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n...\nPath: src/main/java/iuh/fit/controller/Login_controller.java\npackage iuh.fit.controller;\n\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.ResourceBundle;\n\nimport iuh.fit.App;\nimport iuh.fit.daos.TaiKhoan_dao;\nimport iuh.fit.entities.TaiKhoan;\nimport javafx.event.ActionEvent;\nimport javafx.fxml.FXML;\nimport javafx.fxml.Initializable;\nimport javafx.scene.control.Alert;\nimport javafx.scene.control.Alert.AlertType;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.Hyperlink;\nimport javafx.scene.control.PasswordField;\nimport javafx.scene.control.TextField;\nimport javafx.scene.input.KeyCode;\nimport javafx.scene.input.KeyEvent;\n\n/**\n * Controller cho màn hình đăng nhập\n */\npublic class Login_controller implements Initializable {\n\n    @FXML\n    private TextField txtUsername;\n\n    @FXML\n    private PasswordField txtPassword;\n\n    @FXML\n    private Button btnLogin;\n\n    @FXML\n    private Hyperlink linkForgotPassword;\n\n    private TaiKhoan_dao taiKhoanDao;\n\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n        // Khởi tạo DAO\n        taiKhoanDao = new TaiKhoan_dao();\n\n        // Thêm sự kiện Enter cho các trường nhập liệu\n        txtUsername.setOnKeyPressed(this::handleEnterKey);\n        txtPassword.setOnKeyPressed(this::handleEnterKey);\n    }\n\n    /**\n     * Xử lý sự kiện nhấn Enter\n     */\n    private void handleEnterKey(KeyEvent event) {\n        if (event.getCode() == KeyCode.ENTER) {\n            login();\n        }\n    }\n\n    /**\n     * Xử lý sự kiện nhấn nút đăng nhập\n     */\n    @FXML\n    private void handleLoginButtonAction(ActionEvent event) {\n        login();\n    }\n\n    /**\n     * Xử lý sự kiện quên mật khẩu\n     */\n    @FXML\n    private void handleForgotPasswordAction(ActionEvent event) {\n        try {\n            App.openQuenMK();\n        } catch (IOException e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quên mật khẩu!\");\n        }\n    }\n\n    /**\n     * Thực hiện đăng nhập\n     */\n    private void login() {\n        String username = txtUsername.getText().trim();\n        String password = txtPassword.getText().trim();\n\n        // Validate input\n        if (username.isEmpty()) {\n            showAlert(AlertType.WARNING, \"Cảnh báo\", \"Vui lòng nhập tên đăng nhập!\");\n            txtUsername.requestFocus();\n            return;\n        }\n\n        if (password.isEmpty()) {\n            showAlert(AlertType.WARNING, \"Cảnh báo\", \"Vui lòng nhập mật khẩu!\");\n            txtPassword.requestFocus();\n            return;\n        }\n\n        // Check login\n        try {\n            TaiKhoan taiKhoan = taiKhoanDao.findByUsernameandPassword(username, password);\n            if (taiKhoan != null) {\n                // Save login information\n                App.taiKhoan = taiKhoan;\n                App.user = username;\n                App.ma = taiKhoan.getMaTaiKhoan();\n                txtUsername.getScene().getWindow().hide();\n                // Close the login screen and open the main GUI\n                App.openMainGUI();\n            } else {\n                showAlert(AlertType.ERROR, \"Lỗi đăng nhập\", \"Tên đăng nhập hoặc mật khẩu không đúng!\");\n                txtPassword.clear();\n                txtPassword.requestFocus();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Lỗi khi đăng nhập: \" + e.getMessage());\n        }\n    }\n...\nPath: src/main/java/iuh/fit/controller/SplashController.java\n...\n\n/**\n * Controller cho màn hình Splash\n */\npublic class SplashController implements Initializable {\n\n    @FXML\n    private ProgressBar progressBar;\n\n    @FXML\n    private Label lblStatus;\n\n    @FXML\n    private Label lblVersion;\n\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n        // Thiết lập phiên bản\n        lblVersion.setText(\"Phiên bản 1.0.0\");\n\n        // Tạo hiệu ứng mờ dần cho label\n        FadeTransition fadeTransition = new FadeTransition(Duration.seconds(1), lblStatus);\n        fadeTransition.setFromValue(1.0);\n        fadeTransition.setToValue(0.3);\n        fadeTransition.setCycleCount(Timeline.INDEFINITE);\n        fadeTransition.setAutoReverse(true);\n        fadeTransition.play();\n\n        // Khởi động quá trình tải ứng dụng\n        startLoadingProcess();\n    }\n\n    /**\n     * Khởi động quá trình tải ứng dụng\n     */\n    private void startLoadingProcess() {\n        Task<Void> task = new Task<Void>() {\n            @Override\n            protected Void call() throws Exception {\n                // Cập nhật tiến trình\n                updateProgress(0.1, 1.0);\n                updateMessage(\"Đang khởi động ứng dụng...\");\n                Thread.sleep(800);\n\n                // Kiểm tra kết nối cơ sở dữ liệu\n                updateProgress(0.3, 1.0);\n                updateMessage(\"Đang kết nối cơ sở dữ liệu...\");\n                Thread.sleep(800);\n\n                // Kiểm tra dữ liệu\n                updateProgress(0.5, 1.0);\n                updateMessage(\"Đang kiểm tra dữ liệu...\");\n                Thread.sleep(800);\n\n                // Tải dữ liệu\n                updateProgress(0.7, 1.0);\n                updateMessage(\"Đang tải dữ liệu...\");\n                Thread.sleep(800);\n\n                // Hoàn tất\n                updateProgress(1.0, 1.0);\n                updateMessage(\"Hoàn tất!\");\n                Thread.sleep(500);\n\n                return null;\n            }\n        };\n\n        // Liên kết progress bar với task\n        progressBar.progressProperty().bind(task.progressProperty());\n\n        // Liên kết label status với task\n        task.messageProperty().addListener((observable, oldValue, newValue) -> {\n            updateStatus(newValue);\n        });\n\n        // Khi task hoàn thành, mở màn hình đăng nhập\n        task.setOnSucceeded(event -> {\n            System.out.println(\"Loading task completed, opening login screen\");\n\n            // Tạo một task riêng để mở màn hình đăng nhập sau khi splash hoàn tất\n            new Thread(() -> {\n                try {\n                    // Đợi một chút trước khi mở màn hình đăng nhập\n                    Thread.sleep(1000);\n\n                    // Chuyển sang thread JavaFX để mở màn hình đăng nhập\n                    Platform.runLater(() -> {\n                        try {\n                            // Đóng màn hình splash\n                            if (iuh.fit.AppPreloader.splashStage != null) {\n                                iuh.fit.AppPreloader.splashStage.close();\n                                System.out.println(\"Splash screen closed\");\n                            }\n\n                            // Mở màn hình đăng nhập\n//                            App.openLoginGUI();\n                            System.out.println(\"Login screen opened\");\n                        } catch (Exception e) {\n ...","isError":false,"requestId":""}},"f0287184-7e58-4865-a833-21a572d26e20;toolu_vrtx_01A2AYKyJZgBnAAuk53DLSMu":{"phase":5,"result":{"text":"The following code sections were retrieved:\nPath: src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java\n...\n\n    @FXML\n    private VBox thongKeSubMenuList;\n\n    @FXML\n    private VBox thongKeSubVBox;\n\n    @FXML\n    private VBox timKiemSubMenuList;\n\n    @FXML\n    private VBox timKiemSubVBox;\n\n    @FXML\n    private TextField txt_maPN;\n\n    @FXML\n    private TableView<PhieuNhapHang> tablePhieuNhap;\n\n    @FXML\n    private VBox vBox;\n\n    Map<VBox,VBox> map = new HashMap<VBox,VBox>();\n    public void addMenusToMap() {\n        addMenusToMapImpl();\n    }\n\n    private void addMenusToMapImpl() {\n        map.put(banHangSubVBox, banHangSubMenuList);\n        map.put(quanLySubVBox, quanLySubMenuList);\n        map.put(timKiemSubVBox, timKiemSubMenuList);\n        map.put(thongKeSubVBox,thongKeSubMenuList);\n\n        /**\n         * Remove the components from VBox on load of stage\n         */\n        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n            entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Phiếu nhập\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/QL_PhieuNhap_controller.java\npackage iuh.fit.controller;\n\nimport iuh.fit.daos.PhieuNhapHang_dao;\nimport iuh.fit.entities.PhieuNhapHang;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.fxml.FXML;\nimport javafx.fxml.FXMLLoader;\nimport javafx.fxml.Initializable;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.scene.control.*;\nimport javafx.scene.control.cell.PropertyValueFactory;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.input.MouseEvent;\nimport javafx.scene.layout.Pane;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\n\nimport java.net.URL;\nimport java.util.ResourceBundle;\n\nimport static iuh.fit.App.loadFXML;\n...\n\n    @FXML\n    private Label lb_timKiem;\n\n    @FXML\n    private Pane p_HoaDon;\n\n    @FXML\n    private Pane p_gioHang;\n\n    @FXML\n    private Pane p_hoaDon;\n\n    @FXML\n    private Pane p_nhanVien;\n\n    @FXML\n    private Pane p_phieuNhap;\n\n    @FXML\n    private Pane p_quanLy;\n\n    @FXML\n    private Pane p_sanPham;\n\n    @FXML\n    private Pane p_taiKhoan;\n\n    @FXML\n    private Pane p_thongKe;\n\n    @FXML\n    private Pane p_thongKeDoanhThu;\n\n    @FXML\n    private Pane p_thongKeSanPham;\n\n    @FXML\n    private Pane p_timKiem;\n\n    @FXML\n    private VBox quanLySubMenuList;\n\n    @FXML\n    private VBox quanLySubVBox;\n\n    @FXML\n    private TableView<PhieuNhapHang> table_PNhap;\n\n    @FXML\n    private VBox thongKeSubMenuList;\n\n    @FXML\n    private VBox thongKeSubVBox;\n\n    @FXML\n    private VBox timKiemSubMenuList;\n\n    @FXML\n    private VBox timKiemSubVBox;\n\n    @FXML\n    private TextField txt_MaNV;\n...\nPath: src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java\n...\n\n    @FXML\n    private VBox vBox;\n    Map<VBox,VBox> map = new HashMap<VBox,VBox>();\n    public void addMenusToMap() {\n        addMenusToMapImpl();\n    }\n\n    private void addMenusToMapImpl() {\n        map.put(banHangSubVBox, banHangSubMenuList);\n        map.put(quanLySubVBox, quanLySubMenuList);\n        map.put(timKiemSubVBox, timKiemSubMenuList);\n        map.put(thongKeSubVBox,thongKeSubMenuList);\n\n        /**\n         * Remove the components from VBox on load of stage\n         */\n        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n            entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n    /**\n     * Menu slider\n     * @param menu\n     * @param subMenu\n     */\n    public void toolsSlider(VBox menu,VBox subMenu){\n        toolsSliderImpl(menu,subMenu);\n    }\n...\nPath: src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java\n...\n\n    @FXML\n    private VBox timKiemSubVBox;\n\n    @FXML\n    private TextField txt_maTK;\n    \n    @FXML\n    private TableView<TaiKhoan> tableTaiKhoan;\n\n    @FXML\n    private VBox vBox;\n\n    Map<VBox,VBox> map = new HashMap<VBox,VBox>();\n    public void addMenusToMap() {\n        addMenusToMapImpl();\n    }\n\n    private void addMenusToMapImpl() {\n        map.put(banHangSubVBox, banHangSubMenuList);\n        map.put(quanLySubVBox, quanLySubMenuList);\n        map.put(timKiemSubVBox, timKiemSubMenuList);\n        map.put(thongKeSubVBox,thongKeSubMenuList);\n\n        /**\n         * Remove the components from VBox on load of stage\n         */\n        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n            entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n    /**\n     * Menu slider\n     * @param menu\n     * @param subMenu\n     */\n    public void toolsSlider(VBox menu,VBox subMenu){\n        toolsSliderImpl(menu,subMenu);\n    }\n...\nPath: src/main/java/iuh/fit/controller/BanHang_controller.java\n...\n\nimport iuh.fit.App;\nimport iuh.fit.daos.CaLam_dao;\nimport iuh.fit.daos.ChiTietHoaDon_SanPham_dao;\nimport iuh.fit.daos.HoaDon_dao;\nimport iuh.fit.daos.KhachHang_dao;\nimport iuh.fit.daos.NhanVien_dao;\nimport iuh.fit.daos.SanPham_dao;\nimport iuh.fit.entities.*;\nimport iuh.fit.enums.PhuongThucThanhToan;\nimport javafx.animation.FadeTransition;\nimport javafx.animation.Interpolator;\nimport javafx.animation.KeyFrame;\nimport javafx.animation.Timeline;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.event.ActionEvent;\nimport javafx.event.EventHandler;\nimport javafx.fxml.FXML;\nimport javafx.fxml.FXMLLoader;\nimport javafx.fxml.Initializable;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\n...\n\n    @FXML\n    private RadioButton rb_chuyenKhoan;\n\n    @FXML\n    private RadioButton rb_the;\n\n    @FXML\n    private ToggleGroup phuongThucTT;\n\n    @FXML\n    private Label lb_thongKe;\n\n    @FXML\n    private Label lb_thongKeDoanhThu;\n\n    @FXML\n    private Label lb_thongKeSanPham;\n\n    @FXML\n    private Label lb_timKiem;\n\n    @FXML\n    private Pane p_HoaDon;\n\n    @FXML\n    private Pane p_gioHang;\n\n    @FXML\n    private Pane p_hoaDon;\n\n    @FXML\n    private Pane p_nhanVien;\n\n    @FXML\n    private Pane p_phieuNhap;\n\n    @FXML\n    private Pane p_quanLy;\n\n    @FXML\n    private Pane p_sanPham;\n\n    @FXML\n    private Pane p_taiKhoan;\n\n    @FXML\n    private Pane p_thongKe;\n\n    @FXML\n    private Pane p_thongKeDoanhThu;\n\n    @FXML\n    private Pane p_thongKeSanPham;\n\n    @FXML\n    private Pane p_timKiem;\n\n    @FXML\n    private VBox quanLySubMenuList;\n\n    @FXML\n    private VBox quanLySubVBox;\n...\n\n    public void initialize(URL location, ResourceBundle resources) {\n        // Khởi tạo các DAO\n        sanPhamDao = new SanPham_dao();\n        hoaDonDao = new HoaDon_dao();\n        khachHangDao = new KhachHang_dao();\n        chiTietHoaDonDao = new ChiTietHoaDon_SanPham_dao();\n        caLamDao = new CaLam_dao();\n        nhanVienDao = new NhanVien_dao();\n\n        // Khởi tạo các menu\n        addMenusToMap();\n\n        // Hiển thị ngày và thời gian hiện tại\n        displayCurrentDateTime();\n\n        // Khởi tạo bảng giỏ hàng\n        initializeTable();\n\n        // Khởi tạo thông tin hóa đơn\n        initializeInvoiceInfo();\n\n        // Khởi tạo tổng tiền\n        updateTotalAmount();\n\n        // Khởi tạo thông tin nhân viên\n        initializeNhanVien();\n        System.out.println(App.user);\n\n        // Thiết lập sự kiện cho các thành phần trong Pane thông tin đơn hàng\n        setupInvoiceEvents();\n    }\n\n    /**\n     * Add Menus to map\n     */\n    public void addMenusToMap() {\n        addMenusToMapImpl();\n    }\n\n    private void addMenusToMapImpl() {\n        map.put(banHangSubVBox, banHangSubMenuList);\n        map.put(quanLySubVBox, quanLySubMenuList);\n        map.put(timKiemSubVBox, timKiemSubMenuList);\n        map.put(thongKeSubVBox,thongKeSubMenuList);\n\n        /**\n         * Remove the components from VBox on load of stage\n         */\n        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n            entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n    /**\n     * Menu slider\n     * @param menu\n     * @param subMenu\n     */\n    public void toolsSlider(VBox menu,VBox subMenu){\n        toolsSliderImpl(menu,subMenu);\n    }\n...\nPath: src/main/java/iuh/fit/controller/ThongKeSanPham_controller.java\n...\n\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n        addMenusToMap();\n        setupCharts();\n    }\n\n    /**\n     * Add Menus to map\n     */\n    public void addMenusToMap() {\n        addMenusToMapImpl();\n    }\n\n    private void addMenusToMapImpl() {\n        map.put(banHangSubVBox, banHangSubMenuList);\n        map.put(quanLySubVBox, quanLySubMenuList);\n        map.put(timKiemSubVBox, timKiemSubMenuList);\n        map.put(thongKeSubVBox, thongKeSubMenuList);\n\n        /**\n         * Remove the components from VBox on load of stage\n         */\n        for (Map.Entry<VBox, VBox> entry : map.entrySet()) {\n            entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n\n    /**\n     * Menu slider\n     *\n     * @param menu\n     * @param subMenu\n     */\n    public void toolsSlider(VBox menu, VBox subMenu) {\n        toolsSliderImpl(menu, subMenu);\n    }\n...\nPath: src/main/java/iuh/fit/controller/ThongKeDoanhThu_controller.java\n...\n\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n        addMenusToMap();\n        setupCharts();\n    }\n\n    /**\n     * Add Menus to map\n     */\n    public void addMenusToMap() {\n        addMenusToMapImpl();\n    }\n\n    private void addMenusToMapImpl() {\n        map.put(banHangSubVBox, banHangSubMenuList);\n        map.put(quanLySubVBox, quanLySubMenuList);\n        map.put(timKiemSubVBox, timKiemSubMenuList);\n        map.put(thongKeSubVBox, thongKeSubMenuList);\n\n        /**\n         * Remove the components from VBox on load of stage\n         */\n        for (Map.Entry<VBox, VBox> entry : map.entrySet()) {\n            entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n\n    /**\n     * Menu slider\n     *\n     * @param menu\n     * @param subMenu\n     */\n    public void toolsSlider(VBox menu, VBox subMenu) {\n        toolsSliderImpl(menu, subMenu);\n    }\n...\nPath: src/main/java/iuh/fit/App.java\n...\n\n/**\n * Lớp chính của ứng dụng\n */\npublic class App extends Application {\n//    public static final int widthModalLogin = 600;\n//    public static final int heightModalLogin = 400;\n    public static Stage stage;\n    public static Scene primaryScene;\n    public static String user;\n    public static String ma;\n    public static TaiKhoan taiKhoan;\n    public static String maTraCuu;\n\n    // Biến để theo dõi trạng thái đăng nhập\n    private static boolean loginScreenOpened = false;\n\n    public static void main(String[] args) {\n        System.setProperty(\"javafx.preloader\", AppPreloader.class.getName());\n        launch(args);\n    }\n...\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n        System.out.println(\"App.start() called\");\n        stage = primaryStage;\n\n        // Thiết lập sự kiện khi đóng cửa sổ chính\n        stage.setOnCloseRequest(event -> {\n            System.out.println(\"Application is closing\");\n            Platform.exit();\n            System.exit(0);\n        });\n\n        // Chỉ mở giao diện đăng nhập nếu không có splash screen\n        if (AppPreloader.splashStage == null) {\n            System.out.println(\"No splash screen detected, opening login screen directly\");\n//            openLoginGUI();\n        }\n    }\n\n    /**\n     * Mở giao diện chính của ứng dụng\n     */\n    public static void openMainGUI() throws IOException {\n        try {\n            // Load the main GUI\n            Parent root = FXMLLoader.load(App.class.getResource(\"/fxml/BanHang_gui.fxml\"));\n            Scene scene = new Scene(root);\n            scene.getStylesheets().add(App.class.getResource(\"/styles/menu.css\").toExternalForm());\n\n            // Set the new scene for the stage\n            stage.setScene(scene);\n            stage.setMaximized(true);\n            stage.setTitle(\"Hệ thống quản lý bán hàng\");\n\n            // Show the main GUI\n            stage.show();\n        } catch (IOException ex) {\n            System.err.println(\"Error loading BanHang_gui.fxml: \" + ex.getMessage());\n            throw ex;\n        }\n    }\n...\n\n//            if (loginFxmlUrl == null) {\n//                System.err.println(\"Login_gui.fxml not found! Trying to open BanHang_gui.fxml instead.\");\n//                openMainGUI();\n//                return;\n//            }\n\n            // Load giao diện đăng nhập\n            FXMLLoader fxmlLoader = new FXMLLoader(loginFxmlUrl);\n            Parent root = fxmlLoader.load();\n\n            // Tạo scene mới\n            Scene scene = new Scene(root);\n            stage.setScene(scene);\n            stage.setTitle(\"Đăng nhập\");\n            stage.setMaximized(true);\n\n            // Đặt kích thước và vị trí của cửa sổ\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n            stage.setX((primaryScreenBounds.getWidth() - root.prefWidth(-1)) / 2);\n            stage.setY((primaryScreenBounds.getHeight() - root.prefHeight(-1)) / 2);\n\n            // Hiển thị cửa sổ\n            stage.show();\n            System.out.println(1);\n            System.out.println(\"Login GUI opened successfully\");\n        } catch (Exception ex) {\n            System.err.println(\"Error opening Login_gui.fxml: \" + ex.getMessage());\n            ex.printStackTrace();\n        }\n    }\n\n    /**\n     * Mở giao diện quên mật khẩu\n     */\n    public static void openQuenMK() throws IOException {\n        try {\n            FXMLLoader fxmlLoader = new FXMLLoader(App.class.getResource(\"/fxml/QuenMatKhau_gui.fxml\"));\n            Parent root = fxmlLoader.load();\n            Scene scene = new Scene(root, 600, 400);\n            stage.setScene(scene);\n            stage.setTitle(\"Quên mật khẩu\");\n            stage.show();\n        } catch (NullPointerException ex) {\n            System.err.println(\"Không tìm thấy file QuenMatKhau_gui.fxml: \" + ex.getMessage());\n            ex.printStackTrace();\n            throw ex;\n        }\n    }\n...\n\n    /**\n     * Thay đổi root của scene\n     */\n    public static void setRoot(String fxml) throws IOException {\n        FXMLLoader loader = new FXMLLoader(App.class.getResource(\"/fxml/\" + fxml + \".fxml\"));\n        System.out.println(\"Loading FXML: \" + loader.getLocation());\n        try {\n            Parent newRoot = loader.load();\n            if (primaryScene != null)\n                primaryScene.setRoot(newRoot);\n            stage.setScene(primaryScene);\n            stage.sizeToScene();\n            stage.show();\n        } catch (IOException ex) {\n            System.err.println(\"Không tìm thấy file: \" + fxml);\n            throw ex;\n        }\n    }\n\n    /**\n     * Load FXML file\n     */\n    public static Parent loadFXML(String fxml) throws IOException {\n        FXMLLoader fxmlLoader = new FXMLLoader(App.class.getResource(\"/fxml/\" + fxml + \".fxml\"));\n        return fxmlLoader.load();\n    }\n...\nPath: src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java\n...\n\n    private void addMenusToMapImpl() {\n        map.put(banHangSubVBox, banHangSubMenuList);\n        map.put(quanLySubVBox, quanLySubMenuList);\n        map.put(timKiemSubVBox, timKiemSubMenuList);\n        map.put(thongKeSubVBox,thongKeSubMenuList);\n\n        /**\n         * Remove the components from VBox on load of stage\n         */\n        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n            entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n    /**\n     * Menu slider\n     * @param menu\n     * @param subMenu\n     */\n    public void toolsSlider(VBox menu,VBox subMenu){\n        toolsSliderImpl(menu,subMenu);\n    }\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Nhân viên\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/TraCuu_controller.java\n...\n\nimport iuh.fit.App;\nimport iuh.fit.daos.SanPham_dao;\nimport iuh.fit.entities.SanPham;\nimport javafx.animation.FadeTransition;\nimport javafx.animation.Interpolator;\nimport javafx.beans.property.ReadOnlyStringWrapper;\nimport javafx.beans.property.SimpleStringProperty;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.fxml.FXML;\nimport javafx.fxml.FXMLLoader;\nimport javafx.fxml.Initializable;\nimport javafx.scene.Scene;\nimport javafx.scene.control.*;\nimport javafx.scene.control.cell.PropertyValueFactory;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.input.MouseEvent;\nimport javafx.scene.layout.Pane;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\nimport javafx.util.Duration;\n...\n\n    private void setupComboBoxHandler() {\n        cbb_GiaoDien.setOnAction(event -> {\n            String selectedValue = cbb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Sản phẩm\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) cbb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/QL_KhachHang_controller.java\npackage iuh.fit.controller;\n\nimport iuh.fit.daos.HoaDon_dao;\nimport iuh.fit.daos.KhachHang_dao;\nimport iuh.fit.entities.HoaDon;\nimport iuh.fit.entities.KhachHang;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.fxml.FXML;\nimport j...","isError":false,"requestId":""}},"d7b8aa61-e67c-4437-9d3d-d09029d5f2d8;toolu_vrtx_01XQuACphaoCSirB29gCrjU3":{"phase":5,"result":{"text":"Here's the result of running `cat -n` on src/main/java/iuh/fit/controller/BanHang_controller.java:\n     1\tpackage iuh.fit.controller;\n     2\t\n     3\timport java.net.URL;\n     4\timport java.text.DecimalFormat;\n     5\timport java.text.NumberFormat;\n     6\timport java.time.LocalDate;\n     7\timport java.time.LocalTime;\n     8\timport java.time.format.DateTimeFormatter;\n     9\timport java.util.ArrayList;\n    10\timport java.util.HashMap;\n    11\timport java.util.List;\n    12\timport java.util.Locale;\n    13\timport java.util.Map;\n    14\timport java.util.ResourceBundle;\n    15\t\n    16\timport iuh.fit.App;\n    17\timport iuh.fit.daos.CaLam_dao;\n    18\timport iuh.fit.daos.ChiTietHoaDon_SanPham_dao;\n    19\timport iuh.fit.daos.HoaDon_dao;\n    20\timport iuh.fit.daos.KhachHang_dao;\n    21\timport iuh.fit.daos.NhanVien_dao;\n    22\timport iuh.fit.daos.SanPham_dao;\n    23\timport iuh.fit.entities.*;\n    24\timport iuh.fit.enums.PhuongThucThanhToan;\n    25\timport javafx.animation.FadeTransition;\n    26\timport javafx.animation.Interpolator;\n    27\timport javafx.animation.KeyFrame;\n    28\timport javafx.animation.Timeline;\n    29\timport javafx.collections.FXCollections;\n    30\timport javafx.collections.ObservableList;\n    31\timport javafx.event.ActionEvent;\n    32\timport javafx.event.EventHandler;\n    33\timport javafx.fxml.FXML;\n    34\timport javafx.fxml.FXMLLoader;\n    35\timport javafx.fxml.Initializable;\n    36\timport javafx.scene.Parent;\n    37\timport javafx.scene.Scene;\n    38\timport javafx.scene.control.*;\n    39\timport javafx.scene.control.Alert.AlertType;\n    40\timport javafx.scene.control.cell.PropertyValueFactory;\n    41\timport javafx.scene.image.ImageView;\n    42\timport javafx.scene.input.MouseEvent;\n    43\timport javafx.scene.input.KeyEvent;\n    44\timport javafx.scene.layout.AnchorPane;\n    45\timport javafx.scene.layout.GridPane;\n    46\timport javafx.scene.layout.Pane;\n    47\timport javafx.scene.layout.VBox;\n    48\timport javafx.stage.Stage;\n    49\timport javafx.util.Duration;\n    50\t\n    51\t\n    52\tpublic class BanHang_controller implements Initializable {\n    53\t\n    54\t    @FXML\n    55\t    private VBox banHangSubMenuList;\n    56\t\n    57\t    @FXML\n    58\t    private VBox banHangSubVBox;\n    59\t\n    60\t    @FXML\n    61\t    private Button btn_themSP;\n    62\t\n    63\t    @FXML\n    64\t    private ImageView img_HoaDon;\n    65\t\n    66\t    @FXML\n    67\t    private ImageView img_gioHang;\n    68\t\n    69\t    @FXML\n    70\t    private ImageView img_hoaDon;\n    71\t\n    72\t    @FXML\n    73\t    private ImageView img_nhanVien;\n    74\t\n    75\t    @FXML\n    76\t    private ImageView img_phieuNhap;\n    77\t\n    78\t    @FXML\n    79\t    private ImageView img_quanLy;\n    80\t\n    81\t    @FXML\n    82\t    private ImageView img_sanPham;\n    83\t\n    84\t    @FXML\n    85\t    private ImageView img_taiKhoan;\n    86\t\n    87\t    @FXML\n    88\t    private ImageView img_thongKe;\n    89\t\n    90\t    @FXML\n    91\t    private ImageView img_thongKeDoanhThu;\n    92\t\n    93\t    @FXML\n    94\t    private ImageView img_thongKeSanPham;\n    95\t\n    96\t    @FXML\n    97\t    private ImageView img_timKiem;\n    98\t\n    99\t    @FXML\n   100\t    private Label lb_HoaDon;\n   101\t\n   102\t    @FXML\n   103\t    private Label lb_gioHang;\n   104\t\n   105\t    @FXML\n   106\t    private Label lb_hoaDon;\n   107\t\n   108\t    @FXML\n   109\t    private Label lb_ngayLap;\n   110\t\n   111\t    @FXML\n   112\t    private Label lb_nhanVien;\n   113\t\n   114\t    @FXML\n   115\t    private Label lb_phieuNhap;\n   116\t\n   117\t    @FXML\n   118\t    private Label lb_quanLy;\n   119\t\n   120\t    @FXML\n   121\t    private Label lb_sanPham;\n   122\t\n   123\t    @FXML\n   124\t    private Label lb_taiKhoan;\n   125\t\n   126\t    @FXML\n   127\t    private Label lb_thoiGian;\n   128\t\n   129\t    @FXML\n   130\t    private Label lb_tongTien;\n   131\t\n   132\t    @FXML\n   133\t    private Label lb_tongThanhToan;\n   134\t\n   135\t    @FXML\n   136\t    private Label lb_giamGia;\n   137\t\n   138\t    @FXML\n   139\t    private Label lb_tongSoSP;\n   140\t\n   141\t    @FXML\n   142\t    private Label lb_tongSL;\n   143\t\n   144\t    @FXML\n   145\t    private Label lb_tamTinh;\n   146\t\n   147\t    @FXML\n   148\t    private TextField txt_tienKhachTra;\n   149\t\n   150\t    @FXML\n   151\t    private Label lb_tienThua;\n   152\t\n   153\t    @FXML\n   154\t    private Button btn_thanhToan;\n   155\t\n   156\t    @FXML\n   157\t    private Button btn_apDungMa;\n   158\t\n   159\t    @FXML\n   160\t    private Button btn_dangXuat;\n   161\t\n   162\t    @FXML\n   163\t    private TextField txt_maGiamGia;\n   164\t\n   165\t    @FXML\n   166\t    private TextArea ta_ghiChu;\n   167\t\n   168\t    @FXML\n   169\t    private RadioButton rb_tienMat;\n   170\t\n   171\t    @FXML\n   172\t    private RadioButton rb_chuyenKhoan;\n   173\t\n   174\t    @FXML\n   175\t    private RadioButton rb_the;\n   176\t\n   177\t    @FXML\n   178\t    private ToggleGroup phuongThucTT;\n   179\t\n   180\t    @FXML\n   181\t    private Label lb_thongKe;\n   182\t\n   183\t    @FXML\n   184\t    private Label lb_thongKeDoanhThu;\n   185\t\n   186\t    @FXML\n   187\t    private Label lb_thongKeSanPham;\n   188\t\n   189\t    @FXML\n   190\t    private Label lb_timKiem;\n   191\t\n   192\t    @FXML\n   193\t    private Pane p_HoaDon;\n   194\t\n   195\t    @FXML\n   196\t    private Pane p_gioHang;\n   197\t\n   198\t    @FXML\n   199\t    private Pane p_hoaDon;\n   200\t\n   201\t    @FXML\n   202\t    private Pane p_nhanVien;\n   203\t\n   204\t    @FXML\n   205\t    private Pane p_phieuNhap;\n   206\t\n   207\t    @FXML\n   208\t    private Pane p_quanLy;\n   209\t\n   210\t    @FXML\n   211\t    private Pane p_sanPham;\n   212\t\n   213\t    @FXML\n   214\t    private Pane p_taiKhoan;\n   215\t\n   216\t    @FXML\n   217\t    private Pane p_thongKe;\n   218\t\n   219\t    @FXML\n   220\t    private Pane p_thongKeDoanhThu;\n   221\t\n   222\t    @FXML\n   223\t    private Pane p_thongKeSanPham;\n   224\t\n   225\t    @FXML\n   226\t    private Pane p_timKiem;\n   227\t\n   228\t    @FXML\n   229\t    private VBox quanLySubMenuList;\n   230\t\n   231\t    @FXML\n   232\t    private VBox quanLySubVBox;\n   233\t\n   234\t    @FXML\n   235\t    private TableColumn<SanPham, Double> tcDonGia;\n   236\t\n   237\t    @FXML\n   238\t    private TableColumn<SanPham, String> tcMaSP;\n   239\t\n   240\t    @FXML\n   241\t    private TableColumn<SanPham, Integer> tcSTT;\n   242\t\n   243\t    @FXML\n   244\t    private TableColumn<SanPham, Integer> tcSoLuong;\n   245\t\n   246\t    @FXML\n   247\t    private TableColumn<SanPham, String> tcTenSP;\n   248\t\n   249\t    @FXML\n   250\t    private TableColumn<SanPham, Double> tcThanhTien;\n   251\t\n   252\t    @FXML\n   253\t    private TableView<SanPham> tableView;\n   254\t\n   255\t    @FXML\n   256\t    private TextField txt_timKiem;\n   257\t\n   258\t    @FXML\n   259\t    private VBox thongKeSubMenuList;\n   260\t\n   261\t    @FXML\n   262\t    private VBox thongKeSubVBox;\n   263\t\n   264\t    @FXML\n   265\t    private VBox timKiemSubMenuList;\n   266\t\n   267\t    @FXML\n   268\t    private VBox timKiemSubVBox;\n   269\t\n   270\t    @FXML\n   271\t    private TextField txt_nhapMa;\n   272\t\n   273\t    @FXML\n   274\t    private TextField txt_nhapSL;\n   275\t\n   276\t    @FXML\n   277\t    private TextField txt_sdt;\n   278\t\n   279\t    @FXML\n   280\t    private TextField txt_tenKH;\n   281\t\n   282\t    @FXML\n   283\t    private VBox vBox;\n   284\t\n   285\t    @FXML\n   286\t    private Label lb_chucVu;\n   287\t\n   288\t    @FXML\n   289\t    private Label lb_tenNV;\n   290\t    @FXML\n   291\t    private ComboBox<?> cb_nganHang;\n   292\t\n   293\t    @FXML\n   294\t    private GridPane grid_chuyenKhoan;\n   295\t\n   296\t    @FXML\n   297\t    private GridPane grid_the;\n   298\t\n   299\t    @FXML\n   300\t    private GridPane grid_tienMat;\n   301\t\n   302\t    Map<VBox,VBox> map = new HashMap<VBox,VBox>();\n   303\t\n   304\t    // DAO để truy xuất dữ liệu\n   305\t    private SanPham_dao sanPhamDao;\n   306\t    private HoaDon_dao hoaDonDao;\n   307\t    private KhachHang_dao khachHangDao;\n   308\t    private ChiTietHoaDon_SanPham_dao chiTietHoaDonDao;\n   309\t    private CaLam_dao caLamDao;\n   310\t    private NhanVien_dao nhanVienDao;\n   311\t\n   312\t    // Danh sách các sản phẩm trong giỏ hàng\n   313\t    private ObservableList<SanPham> cartItems;\n   314\t\n   315\t    // Số lượng sản phẩm trong giỏ hàng\n   316\t    private Map<String, Integer> productQuantities = new HashMap<>();\n   317\t\n   318\t    public void initialize(URL location, ResourceBundle resources) {\n   319\t        // Khởi tạo các DAO\n   320\t        sanPhamDao = new SanPham_dao();\n   321\t        hoaDonDao = new HoaDon_dao();\n   322\t        khachHangDao = new KhachHang_dao();\n   323\t        chiTietHoaDonDao = new ChiTietHoaDon_SanPham_dao();\n   324\t        caLamDao = new CaLam_dao();\n   325\t        nhanVienDao = new NhanVien_dao();\n   326\t\n   327\t        // Khởi tạo các menu\n   328\t        addMenusToMap();\n   329\t\n   330\t        // Hiển thị ngày và thời gian hiện tại\n   331\t        displayCurrentDateTime();\n   332\t\n   333\t        // Khởi tạo bảng giỏ hàng\n   334\t        initializeTable();\n   335\t\n   336\t        // Khởi tạo thông tin hóa đơn\n   337\t        initializeInvoiceInfo();\n   338\t\n   339\t        // Khởi tạo tổng tiền\n   340\t        updateTotalAmount();\n   341\t\n   342\t        // Khởi tạo thông tin nhân viên\n   343\t        initializeNhanVien();\n   344\t        System.out.println(App.user);\n   345\t\n   346\t        // Thiết lập sự kiện cho các thành phần trong Pane thông tin đơn hàng\n   347\t        setupInvoiceEvents();\n   348\t    }\n   349\t\n   350\t    /**\n   351\t     * Add Menus to map\n   352\t     */\n   353\t    public void addMenusToMap() {\n   354\t        addMenusToMapImpl();\n   355\t    }\n   356\t\n   357\t    private void addMenusToMapImpl() {\n   358\t        map.put(banHangSubVBox, banHangSubMenuList);\n   359\t        map.put(quanLySubVBox, quanLySubMenuList);\n   360\t        map.put(timKiemSubVBox, timKiemSubMenuList);\n   361\t        map.put(thongKeSubVBox,thongKeSubMenuList);\n   362\t\n   363\t        /**\n   364\t         * Remove the components from VBox on load of stage\n   365\t         */\n   366\t        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n   367\t            entry.getKey().getChildren().remove(entry.getValue());\n   368\t        }\n   369\t    }\n   370\t    /**\n   371\t     * Menu slider\n   372\t     * @param menu\n   373\t     * @param subMenu\n   374\t     */\n   375\t    public void toolsSlider(VBox menu,VBox subMenu){\n   376\t        toolsSliderImpl(menu,subMenu);\n   377\t    }\n   378\t\n   379\t    private void toolsSliderImpl(VBox menu,VBox subMenu) {\n   380\t        if(menu.getChildren().contains(subMenu)){\n   381\t            final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n   382\t            transition.setFromValue(0.5);\n   383\t            transition.setToValue(1);\n   384\t            transition.setInterpolator(Interpolator.EASE_IN);\n   385\t            menu.getChildren().remove(subMenu);\n   386\t            transition.play();\n   387\t        }else{\n   388\t            final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n   389\t            transition.setFromValue(0.5);\n   390\t            transition.setToValue(1);\n   391\t            transition.setInterpolator(Interpolator.EASE_IN);\n   392\t            menu.getChildren().add(subMenu);\n   393\t            transition.play();\n   394\t        }\n   395\t    }\n   396\t    /**\n   397\t     * Remove other menus\n   398\t     * @param menu\n   399\t     */\n   400\t    public void removeOtherMenus(VBox menu){\n   401\t        removeOtherMenusImpl(menu);\n   402\t    }\n   403\t    private void removeOtherMenusImpl(VBox menu) {\n   404\t        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n   405\t            if(!entry.getKey().equals(menu))\n   406\t                entry.getKey().getChildren().remove(entry.getValue());\n   407\t        }\n   408\t    }\n   409\t\n   410\t    @FXML\n   411\t    void handleGioHangClick(MouseEvent event) {\n   412\t        try {\n   413\t            // Hiển thị menu bán hàng\n   414\t            if (banHangSubVBox != null && banHangSubMenuList != null) {\n   415\t                toolsSlider(banHangSubVBox, banHangSubMenuList);\n   416\t                removeOtherMenus(banHangSubVBox);\n   417\t            }\n   418\t\n   419\t            // Hiển thị giao diện bán hàng chính\n   420\t            showMainSalesInterface();\n   421\t\n   422\t            // Làm mới giỏ hàng\n   423\t            updateTotalAmount();\n   424\t        } catch (Exception e) {\n   425\t            System.err.println(\"Lỗi trong handleGioHangClick: \" + e.getMessage());\n   426\t            e.printStackTrace();\n   427\t        }\n   428\t    }\n   429\t\n   430\t    @FXML\n   431\t    void handleQuanLyClick(MouseEvent event) {\n   432\t        toolsSlider(quanLySubVBox,quanLySubMenuList);\n   433\t        removeOtherMenus(quanLySubVBox);\n   434\t    }\n   435\t\n   436\t    @FXML\n   437\t    void handleThongKeClick(MouseEvent event) {\n   438\t        toolsSlider(thongKeSubVBox,thongKeSubMenuList);\n   439\t        removeOtherMenus(thongKeSubVBox);\n   440\t    }\n   441\t\n   442\t    @FXML\n   443\t    void handleTimKiemClick(MouseEvent event) {\n   444\t        try {\n   445\t            // Chuyển đến giao diện TraCuu_gui.fxml\n   446\t            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/TraCuu_gui.fxml\"));\n   447\t            Parent root = loader.load();\n   448\t            Scene scene = new Scene(root);\n   449\t\n   450\t            // Lấy stage hiện tại\n   451\t            Stage stage = (Stage) p_gioHang.getScene().getWindow();\n   452\t\n   453\t            // Thiết lập scene mới\n   454\t            stage.setScene(scene);\n   455\t            stage.setTitle(\"Tra cứu sản phẩm\");\n   456\t\n   457\t            // Hiển thị stage\n   458\t            stage.show();\n   459\t\n   460\t            System.out.println(\"Chuyển đến giao diện tra cứu thành công\");\n   461\t        } catch (Exception e) {\n   462\t            e.printStackTrace();\n   463\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu: \" + e.getMessage());\n   464\t\n   465\t            // Nếu không thể mở giao diện tra cứu, hiển thị giao diện tìm kiếm trên giao diện hiện tại\n   466\t            toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n   467\t            removeOtherMenus(timKiemSubVBox);\n   468\t\n   469\t            // Hiển thị giao diện tìm kiếm\n   470\t            showSearchInterface();\n   471\t        }\n   472\t    }\n   473\t\n   474\t    @FXML\n   475\t    void toQLHoaDon(MouseEvent event) {\n   476\t        try {\n   477\t            // Chuyển đến giao diện quản lý hóa đơn\n   478\t            loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n   479\t        } catch (Exception e) {\n   480\t            e.printStackTrace();\n   481\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý hóa đơn!\");\n   482\t        }\n   483\t    }\n   484\t\n   485\t    @FXML\n   486\t    void toQLKhachHang(MouseEvent event) {\n   487\t        try {\n   488\t            // Chuyển đến giao diện quản lý khách hàng\n   489\t            loadFXML(\"/fxml/QL_KhachHang_gui.fxml\");\n   490\t        } catch (Exception e) {\n   491\t            e.printStackTrace();\n   492\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý khách hàng!\");\n   493\t        }\n   494\t    }\n   495\t\n   496\t    @FXML\n   497\t    void toQLNhanVien(MouseEvent event) {\n   498\t        try {\n   499\t            // Chuyển đến giao diện quản lý nhân viên\n   500\t            loadFXML(\"/fxml/QL_NhanVien_gui.fxml\");\n   501\t        } catch (Exception e) {\n   502\t            e.printStackTrace();\n   503\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý nhân viên!\");\n   504\t        }\n   505\t    }\n   506\t\n   507\t    @FXML\n   508\t    void toQLPhieuNhap(MouseEvent event) {\n   509\t        try {\n   510\t            // Chuyển đến giao diện quản lý phiếu nhập\n   511\t            loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n   512\t        } catch (Exception e) {\n   513\t            e.printStackTrace();\n   514\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n   515\t        }\n   516\t    }\n   517\t\n   518\t    @FXML\n   519\t    void toQLSanPham(MouseEvent event) {\n   520\t        try {\n   521\t            // Chuyển đến giao diện quản lý sản phẩm\n   522\t            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n   523\t        } catch (Exception e) {\n   524\t            e.printStackTrace();\n   525\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n   526\t        }\n   527\t    }\n   528\t\n   529\t    @FXML\n   530\t    void toQLTaiKhoan(MouseEvent event) {\n   531\t        try {\n   532\t            // Chuyển đến giao diện quản lý tài khoản\n   533\t            loadFXML(\"/fxml/QL_TaiKhoan_gui.fxml\");\n   534\t        } catch (Exception e) {\n   535\t            e.printStackTrace();\n   536\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý tài khoản!\");\n   537\t        }\n   538\t    }\n   539\t\n   540\t    @FXML\n   541\t    void toTKDoanhThu(MouseEvent event) {\n   542\t        try {\n   543\t            // Chuyển đến giao diện thống kê doanh thu\n   544\t            loadFXML(\"/fxml/ThongKeDoanhThu_gui.fxml\");\n   545\t        } catch (Exception e) {\n   546\t            e.printStackTrace();\n   547\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê doanh thu!\");\n   548\t        }\n   549\t    }\n   550\t\n   551\t    @FXML\n   552\t    void toTKSanPham(MouseEvent event) {\n   553\t        try {\n   554\t            // Chuyển đến giao diện thống kê sản phẩm\n   555\t            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n   556\t        } catch (Exception e) {\n   557\t            e.printStackTrace();\n   558\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n   559\t        }\n   560\t    }\n   561\t\n   562\t    @FXML\n   563\t    void themSanPham(MouseEvent event) {\n   564\t        // Lấy mã sản phẩm và số lượng từ các trường nhập liệu\n   565\t        String maSP = txt_nhapMa.getText().trim();\n   566\t        String soLuongStr = txt_nhapSL.getText().trim();\n   567\t\n   568\t        // Kiểm tra dữ liệu nhập vào\n   569\t        if (maSP.isEmpty()) {\n   570\t            showAlert(AlertType.WARNING, \"Thông báo\", \"Vui lòng nhập mã sản phẩm!\");\n   571\t            txt_nhapMa.requestFocus();\n   572\t            return;\n   573\t        }\n   574\t\n   575\t        if (soLuongStr.isEmpty()) {\n   576\t            showAlert(AlertType.WARNING, \"Thông báo\", \"Vui lòng nhập số lượng!\");\n   577\t            txt_nhapSL.requestFocus();\n   578\t            return;\n   579\t        }\n   580\t\n   581\t        try {\n   582\t            int soLuong = Integer.parseInt(soLuongStr);\n   583\t            if (soLuong <= 0) {\n   584\t                showAlert(AlertType.WARNING, \"Thông báo\", \"Số lượng phải lớn hơn 0!\");\n   585\t                txt_nhapSL.requestFocus();\n   586\t                return;\n   587\t            }\n   588\t\n   589\t            // Tìm kiếm sản phẩm theo mã và thêm vào giỏ hàng\n   590\t            addProductToCart(maSP, soLuong);\n   591\t\n   592\t            // Xóa dữ liệu trong các trường nhập liệu\n   593\t            txt_nhapMa.clear();\n   594\t            txt_nhapSL.clear();\n   595\t            txt_nhapMa.requestFocus();\n   596\t\n   597\t        } catch (NumberFormatException e) {\n   598\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Số lượng phải là số nguyên!\");\n   599\t            txt_nhapSL.requestFocus();\n   600\t        }\n   601\t    }\n   602\t\n   603\t    /**\n   604\t     * Hiển thị ngày và thời gian hiện tại\n   605\t     */\n   606\t    private void displayCurrentDateTime() {\n   607\t        // Hiển thị ngày hiện tại\n   608\t        LocalDate currentDate = LocalDate.now();\n   609\t        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\n   610\t        lb_ngayLap.setText(currentDate.format(dateFormatter));\n   611\t\n   612\t        // Hiển thị và cập nhật thời gian hiện tại mỗi giây\n   613\t        Timeline clock = new Timeline(new KeyFrame(Duration.ZERO, e -> {\n   614\t            LocalTime currentTime = LocalTime.now();\n   615\t            DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\n   616\t            lb_thoiGian.setText(currentTime.format(timeFormatter));\n   617\t        }), new KeyFrame(Duration.seconds(1)));\n   618\t\n   619\t        clock.setCycleCount(Timeline.INDEFINITE);\n   620\t        clock.play();\n   621\t    }\n   622\t\n   623\t    private void initializeNhanVien() {\n   624\t        try {\n   625\t            TaiKhoan taiKhoan = App.taiKhoan;\n   626\t            System.out.println(taiKhoan);\n   627\t            NhanVien nhanVien = taiKhoan.getNhanVien();\n   628\t            lb_tenNV.setText(nhanVien.getTenNV());\n   629\t            lb_chucVu.setText(nhanVien.getChucVu().toString());\n   630\t        } catch (Exception e) {\n   631\t            e.printStackTrace();\n   632\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể lấy thông tin nhân viên: \" + e.getMessage());\n   633\t        }\n   634\t    }\n   635\t\n   636\t    /**\n   637\t     * Khởi tạo thông tin hóa đơn\n   638\t     */\n   639\t    private void initializeInvoiceInfo() {\n   640\t        try {\n   641\t            // Hiển thị ngày lập hóa đơn\n   642\t            if (lb_ngayLap != null) {\n   643\t                DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\n   644\t                lb_ngayLap.setText(LocalDate.now().format(formatter));\n   645\t            }\n   646\t\n   647\t            // Thiết lập giá trị mặc định cho các trường\n   648\t            if (lb_giamGia != null) {\n   649\t                lb_giamGia.setText(\"0 VNĐ\");\n   650\t            }\n   651\t\n   652\t            if (lb_tongThanhToan != null) {\n   653\t                lb_tongThanhToan.setText(\"0 VNĐ\");\n   654\t            }\n   655\t\n   656\t            if (lb_tongSoSP != null) {\n   657\t                lb_tongSoSP.setText(\"0\");\n   658\t            }\n   659\t\n   660\t            if (lb_tongSL != null) {\n   661\t                lb_tongSL.setText(\"0\");\n   662\t            }\n   663\t\n   664\t            if (lb_tamTinh != null) {\n   665\t                lb_tamTinh.setText(\"0 VNĐ\");\n   666\t            }\n   667\t\n   668\t            if (txt_maGiamGia != null) {\n   669\t                txt_maGiamGia.setText(\"\");\n   670\t            }\n   671\t\n   672\t            if (ta_ghiChu != null) {\n   673\t                ta_ghiChu.setText(\"\");\n   674\t            }\n   675\t\n   676\t            // Thiết lập phương thức thanh toán mặc định\n   677\t            if (rb_tienMat != null) {\n   678\t                rb_tienMat.setSelected(true);\n   679\t            }\n   680\t\n   681\t            // Thiết lập giá trị mặc định cho tiền khách trả và tiền thừa\n   682\t            if (txt_tienKhachTra != null) {\n   683\t                txt_tienKhachTra.setText(\"\");\n   684\t            }\n   685\t\n   686\t            if (lb_tienThua != null) {\n   687\t                lb_tienThua.setText(\"0 VNĐ\");\n   688\t                lb_tienThua.setStyle(\"-fx-font-weight: bold; -fx-text-fill: #009900;\");\n   689\t            }\n   690\t\n   691\t            // Mặc định, nút thanh toán bị vô hiệu hóa cho đến khi khách hàng trả đủ tiền\n   692\t            if (btn_thanhToan != null) {\n   693\t                btn_thanhToan.setDisable(true);\n   694\t            }\n   695\t        } catch (Exception e) {\n   696\t            e.printStackTrace();\n   697\t            System.err.println(\"Lỗi khi khởi tạo thông tin hóa đơn: \" + e.getMessage());\n   698\t        }\n   699\t    }\n   700\t\n   701\t    /**\n   702\t     * Thiết lập sự kiện cho các thành phần trong Pane thông tin đơn hàng\n   703\t     */\n   704\t    private void setupInvoiceEvents() {\n   705\t        try {\n   706\t            // Sự kiện khi nhấn nút áp dụng mã giảm giá\n   707\t            if (btn_apDungMa != null) {\n   708\t                btn_apDungMa.setOnAction(event -> apDungMaGiamGia());\n   709\t            }\n   710\t\n   711\t            // Sự kiện khi thay đổi phương thức thanh toán\n   712\t            if (phuongThucTT != null) {\n   713\t                phuongThucTT.selectedToggleProperty().addListener((observable, oldValue, newValue) -> {\n   714\t                    updateTotalAmount();\n   715\t                });\n   716\t            }\n   717\t        } catch (Exception e) {\n   718\t            e.printStackTrace();\n   719\t            System.err.println(\"Lỗi khi thiết lập sự kiện cho thông tin hóa đơn: \" + e.getMessage());\n   720\t        }\n   721\t    }\n   722\t\n   723\t    /**\n   724\t     * Khởi tạo bảng giỏ hàng\n   725\t     */\n   726\t    private void initializeTable() {\n   727\t        try {\n   728\t            // Khởi tạo các cột cho bảng giỏ hàng\n   729\t            tcSTT.setCellValueFactory(cellData -> {\n   730\t                int index = cartItems.indexOf(cellData.getValue()) + 1;\n   731\t                return javafx.beans.binding.Bindings.createObjectBinding(() -> index);\n   732\t            });\n   733\t\n   734\t            tcMaSP.setCellValueFactory(new PropertyValueFactory<>(\"maSP\"));\n   735\t            tcTenSP.setCellValueFactory(new PropertyValueFactory<>(\"tenSP\"));\n   736\t\n   737\t            // Số lượng sản phẩm trong giỏ hàng\n   738\t            tcSoLuong.setCellValueFactory(cellData -> {\n   739\t                SanPham sp = cellData.getValue();\n   740\t                Integer quantity = productQuantities.getOrDefault(sp.getMaSP(), 0);\n   741\t                return javafx.beans.binding.Bindings.createObjectBinding(() -> quantity);\n   742\t            });\n   743\t\n   744\t            tcDonGia.setCellValueFactory(new PropertyValueFactory<>(\"giaBan\"));\n   745\t\n   746\t            // Thành tiền = giá bán * số lượng\n   747\t            tcThanhTien.setCellValueFactory(cellData -> {\n   748\t                SanPham sp = cellData.getValue();\n   749\t                Integer quantity = productQuantities.getOrDefault(sp.getMaSP(), 0);\n   750\t                Double thanhTien = sp.getGiaBan() * quantity;\n   751\t                return javafx.beans.binding.Bindings.createObjectBinding(() -> thanhTien);\n   752\t            });\n   753\t\n   754\t            // Định dạng hiển thị tiền tệ cho cột đơn giá và thành tiền\n   755\t            NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale(\"vi\", \"VN\"));\n   756\t\n   757\t            tcDonGia.setCellFactory(column -> new javafx.scene.control.TableCell<SanPham, Double>() {\n   758\t                @Override\n   759\t                protected void updateItem(Double item, boolean empty) {\n   760\t                    super.updateItem(item, empty);\n   761\t                    if (empty || item == null) {\n   762\t                        setText(null);\n   763\t                    } else {\n   764\t                        setText(currencyFormat.format(item));\n   765\t                    }\n   766\t                }\n   767\t            });\n   768\t\n   769\t            tcThanhTien.setCellFactory(column -> new javafx.scene.control.TableCell<SanPham, Double>() {\n   770\t                @Override\n   771\t                protected void updateItem(Double item, boolean empty) {\n   772\t                    super.updateItem(item, empty);\n   773\t                    if (empty || item == null) {\n   774\t                        setText(null);\n   775\t                    } else {\n   776\t                        setText(currencyFormat.format(item));\n   777\t                    }\n   778\t                }\n   779\t            });\n   780\t\n   781\t            // Khởi tạo danh sách giỏ hàng trống\n   782\t            cartItems = FXCollections.observableArrayList();\n   783\t            if (tableView != null) {\n   784\t                tableView.setItems(cartItems);\n   785\t\n   786\t                // Thêm sự kiện nhấp đúp vào bảng\n   787\t                tableView.setOnMouseClicked(this::handleSearchResultDoubleClick);\n   788\t\n   789\t                // Thêm context menu cho bảng\n   790\t                setupTableContextMenu();\n   791\t            } else {\n   792\t                System.out.println(\"TableView is null. Check your FXML file.\");\n   793\t            }\n   794\t        } catch (Exception e) {\n   795\t            e.printStackTrace();\n   796\t            System.out.println(\"Error initializing table: \" + e.getMessage());\n   797\t        }\n   798\t    }\n   799\t\n   800\t    /**\n   801\t     * Thêm sản phẩm vào giỏ hàng\n   802\t     */\n   803\t    private void addProductToCart(String maSP, int soLuong) {\n   804\t        try {\n   805\t            // Tìm kiếm sản phẩm theo mã\n   806\t            SanPham sanPham = sanPhamDao.read(maSP);\n   807\t\n   808\t            if (sanPham == null) {\n   809\t                showAlert(AlertType.ERROR, \"Lỗi\", \"Không tìm thấy sản phẩm có mã \" + maSP);\n   810\t                return;\n   811\t            }\n   812\t\n   813\t            // Kiểm tra số lượng tồn kho\n   814\t            if (sanPham.getSoLuongTon() < soLuong) {\n   815\t                showAlert(AlertType.WARNING, \"Cảnh báo\", \"Số lượng sản phẩm trong kho không đủ (còn \" + sanPham.getSoLuongTon() + \")\");\n   816\t                return;\n   817\t            }\n   818\t\n   819\t            // Kiểm tra xem sản phẩm đã có trong giỏ hàng chưa\n   820\t            boolean productExists = false;\n   821\t\n   822\t            for (SanPham sp : cartItems) {\n   823\t                if (sp.getMaSP().equals(maSP)) {\n   824\t                    // Nếu sản phẩm đã tồn tại, tăng số lượng\n   825\t                    int currentQuantity = productQuantities.getOrDefault(maSP, 0);\n   826\t                    productQuantities.put(maSP, currentQuantity + soLuong);\n   827\t                    productExists = true;\n   828\t                    break;\n   829\t                }\n   830\t            }\n   831\t\n   832\t            // Nếu sản phẩm chưa có trong giỏ hàng, thêm mới\n   833\t            if (!productExists) {\n   834\t                cartItems.add(sanPham);\n   835\t                productQuantities.put(maSP, soLuong);\n   836\t            }\n   837\t\n   838\t            // Cập nhật lại bảng\n   839\t            tableView.refresh();\n   840\t\n   841\t            // Cập nhật tổng tiền\n   842\t            updateTotalAmount();\n   843\t\n   844\t            // Hiển thị thông báo thành công\n   845\t            showAlert(AlertType.INFORMATION, \"Thông báo\", \"Đã thêm sản phẩm vào giỏ hàng!\");\n   846\t        } catch (Exception e) {\n   847\t            e.printStackTrace();\n   848\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể thêm sản phẩm vào giỏ hàng: \" + e.getMessage());\n   849\t        }\n   850\t    }\n   851\t\n   852\t    /**\n   853\t     * Hiển thị giao diện bán hàng chính\n   854\t     */\n   855\t    private void showMainSalesInterface() {\n   856\t        // Làm mới form nhập liệu\n   857\t        txt_nhapMa.clear();\n   858\t        txt_nhapSL.clear();\n   859\t        txt_tenKH.clear();\n   860\t        txt_sdt.clear();\n   861\t\n   862\t        // Focus vào trường nhập mã sản phẩm\n   863\t        txt_nhapMa.requestFocus();\n   864\t    }\n   865\t\n   866\t    /**\n   867\t     * Xóa sản phẩm khỏi giỏ hàng\n   868\t     */\n   869\t    private void removeProductFromCart(String maSP) {\n   870\t        try {\n   871\t            // Tìm sản phẩm trong giỏ hàng\n   872\t            SanPham productToRemove = null;\n   873\t            for (SanPham sp : cartItems) {\n   874\t                if (sp.getMaSP().equals(maSP)) {\n   875\t                    productToRemove = sp;\n   876\t                    break;\n   877\t                }\n   878\t            }\n   879\t\n   880\t            // Nếu tìm thấy sản phẩm, xóa khỏi giỏ hàng\n   881\t            if (productToRemove != null) {\n   882\t                cartItems.remove(productToRemove);\n   883\t                productQuantities.remove(maSP);\n   884\t                tableView.refresh();\n   885\t\n   886\t                // Cập nhật tổng tiền\n   887\t                updateTotalAmount();\n   888\t\n   889\t                showAlert(AlertType.INFORMATION, \"Thông báo\", \"Đã xóa sản phẩm khỏi giỏ hàng!\");\n   890\t            } else {\n   891\t                showAlert(AlertType.WARNING, \"Thông báo\", \"Không tìm thấy sản phẩm trong giỏ hàng!\");\n   892\t            }\n   893\t        } catch (Exception e) {\n   894\t            e.printStackTrace();\n   895\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể xóa sản phẩm khỏi giỏ hàng: \" + e.getMessage());\n   896\t        }\n   897\t    }\n   898\t\n   899\t    /**\n   900\t     * Tính tổng tiền hàng (chưa bao gồm thuế và giảm giá)\n   901\t     */\n   902\t    private double calculateSubtotal() {\n   903\t        double subtotal = 0;\n   904\t        for (SanPham sp : cartItems) {\n   905\t            int quantity = productQuantities.getOrDefault(sp.getMaSP(), 0);\n   906\t            subtotal += sp.getGiaBan() * quantity;\n   907\t        }\n   908\t        return subtotal;\n   909\t    }\n   910\t\n   911\t    /**\n   912\t     * Tính thuế VAT (8% tổng tiền hàng)\n   913\t     */\n   914\t    private double calculateVAT(double subtotal) {\n   915\t        return subtotal * 0.08; // 8% VAT\n   916\t    }\n   917\t\n   918\t    /**\n   919\t     * Tính giảm giá\n   920\t     */\n   921\t    private double calculateDiscount(double subtotal) {\n   922\t        try {\n   923\t            if (lb_giamGia != null && !lb_giamGia.getText().equals(\"0 VNĐ\")) {\n   924\t                try {\n   925\t                    String giamGiaStr = lb_giamGia.getText().replaceAll(\"[^\\\\d]\", \"\");\n   926\t                    return Double.parseDouble(giamGiaStr);\n   927\t                } catch (Exception e) {\n   928\t                    // Không làm gì nếu không thể chuyển đổi\n   929\t                }\n   930\t            }\n   931\t        } catch (Exception e) {\n   932\t            e.printStackTrace();\n   933\t        }\n   934\t        return 0;\n   935\t    }\n   936\t\n   937\t    /**\n   938\t     * Tính tổng tiền của giỏ hàng (bao gồm thuế và giảm giá)\n   939\t     */\n   940\t    private double calculateTotal() {\n   941\t        double subtotal = calculateSubtotal();\n   942\t        double vat = calculateVAT(subtotal);\n   943\t        double discount = calculateDiscount(subtotal);\n   944\t\n   945\t        return subtotal + vat - discount;\n   946\t    }\n   947\t\n   948\t    /**\n   949\t     * Tạo hóa đơn từ giỏ hàng\n   950\t     */\n   951\t    private void createInvoice() {\n   952\t        try {\n   953\t            // Check if the cart is empty\n   954\t            if (cartItems.isEmpty()) {\n   955\t                showAlert(AlertType.WARNING, \"Thông báo\", \"Giỏ hàng trống!\");\n   956\t                return;\n   957\t            }\n   958\t\n   959\t            // Validate customer information\n   960\t            String tenKH = txt_tenKH.getText().trim();\n   961\t            String sdt = txt_sdt.getText().trim();\n   962\t\n   963\t            // Generate invoice ID\n   964\t            String maHD = \"HD\" + System.currentTimeMillis();\n   965\t\n   966\t            // Handle shift (CaLam)\n   967\t            String maCa = \"CA\" + System.currentTimeMillis();\n   968\t            CaLam caLam = caLamDao.read(\"CA001\");\n   969\t            if (caLam == null) {\n   970\t                caLam = new CaLam();\n   971\t                caLam.setMaCa(maCa);\n   972\t                caLam.setGioBatDau(java.time.LocalDateTime.now());\n   973\t                caLam.setGioKetThuc(java.time.LocalDateTime.now().plusHours(8));\n   974\t                caLam.setTrangThai(true);\n   975\t\n   976\t                if (App.taiKhoan != null) {\n   977\t                    caLam.setTaiKhoan(App.taiKhoan);\n   978\t                } else {\n   979\t                    showAlert(AlertType.WARNING, \"Cảnh báo\", \"Không có tài khoản đăng nhập, sử dụng tài khoản mặc định\");\n   980\t                    return;\n   981\t                }\n   982\t\n   983\t                caLamDao.create(caLam);\n   984\t            }\n   985\t\n   986\t            // Handle customer (KhachHang)\n   987\t            KhachHang khachHang = null;\n   988\t            if (!tenKH.isEmpty() && !sdt.isEmpty()) {\n   989\t                khachHang = khachHangDao.findByPhone(sdt);\n   990\t                if (khachHang == null) {\n   991\t                    khachHang = new KhachHang();\n   992\t                    khachHang.setMaKH(\"KH\" + System.currentTimeMillis());\n   993\t                    khachHang.setTenKH(tenKH);\n   994\t                    khachHang.setSdt(sdt);\n   995\t                    khachHangDao.create(khachHang);\n   996\t                }\n   997\t            } else {\n   998\t                khachHang = khachHangDao.read(\"KH001\");\n   999\t                if (khachHang == null) {\n  1000\t                    khachHang = new KhachHang();\n  1001\t                    khachHang.setMaKH(\"KH001\");\n  1002\t                    khachHang.setTenKH(\"Khách hàng vãng lai\");\n  1003\t                    khachHang.setSdt(\"0000000000\");\n  1004\t                    khachHangDao.create(khachHang);\n  1005\t                }\n  1006\t            }\n  1007\t\n  1008\t            // Create invoice (HoaDon)\n  1009\t            HoaDon hoaDon = new HoaDon();\n  1010\t            hoaDon.setMaHD(maHD);\n  1011\t            hoaDon.setThoiGian(java.time.LocalDateTime.now());\n  1012\t            hoaDon.setTongSoLuongSP(productQuantities.values().stream().mapToInt(Integer::intValue).sum());\n  1013\t            // Tính tổng tiền thanh toán\n  1014\t            double tongTien = calculateTotal();\n  1015\t            hoaDon.setThanhTien(tongTien);\n  1016\t\n  1017\t            // Lấy thông tin tiền khách trả và tiền thừa\n  1018\t            double tienKhachTra = 0;\n  1019\t            double tienThua = 0;\n  1020\t            try {\n  1021\t                tienKhachTra = Double.parseDouble(txt_tienKhachTra.getText().trim());\n  1022\t                // Tính tiền thừa\n  1023\t                tienThua = tienKhachTra - tongTien;\n  1024\t            } catch (NumberFormatException e) {\n  1025\t                // Nếu không thể chuyển đổi, sử dụng giá trị mặc định\n  1026\t                tienKhachTra = tongTien;\n  1027\t                tienThua = 0;\n  1028\t            }\n  1029\t\n  1030\t            // Lưu thông tin tiền khách trả và tiền thừa vào hóa đơn\n  1031\t            // Nếu có trường tương ứng trong entity HoaDon\n  1032\t            // hoaDon.setTienKhachTra(tienKhachTra);\n  1033\t            // hoaDon.setTienThua(tienThua);\n  1034\t\n  1035\t            // Xác định phương thức thanh toán dựa trên lựa chọn\n  1036\t            PhuongThucThanhToan phuongThuc = PhuongThucThanhToan.Tien_Mat;\n  1037\t            if (rb_chuyenKhoan != null && rb_chuyenKhoan.isSelected()) {\n  1038\t                phuongThuc = PhuongThucThanhToan.Chuyen_Khoan;\n  1039\t            } else if (rb_the != null && rb_the.isSelected()) {\n  1040\t                phuongThuc = PhuongThucThanhToan.The_Ngan_Hang;\n  1041\t            }\n  1042\t            hoaDon.setPhuongThucTT(phuongThuc);\n  1043\t            hoaDon.setCaLam(caLam);\n  1044\t            hoaDon.setKhachHang(khachHang);\n  1045\t            hoaDonDao.create(hoaDon);\n  1046\t\n  1047\t            // Create invoice details (ChiTietHoaDon_SanPham)\n  1048\t            for (SanPham sp : cartItems) {\n  1049\t                int soLuong = productQuantities.getOrDefault(sp.getMaSP(), 0);\n  1050\t\n  1051\t                // Check stock availability\n  1052\t                if (sp.getSoLuongTon() < soLuong) {\n  1053\t                    showAlert(AlertType.WARNING, \"Thông báo\", \"Sản phẩm \" + sp.getTenSP() + \" không đủ số lượng trong kho!\");\n  1054\t                    return;\n  1055\t                }\n  1056\t\n  1057\t                ChiTietHoaDon_SanPhamId chiTietId = new ChiTietHoaDon_SanPhamId(maHD, sp.getMaSP());\n  1058\t                ChiTietHoaDon_SanPham chiTiet = new ChiTietHoaDon_SanPham();\n  1059\t                chiTiet.setId(chiTietId);\n  1060\t                chiTiet.setSoLuongSP(soLuong);\n  1061\t                chiTiet.setDonGia(sp.getGiaBan());\n  1062\t                chiTiet.setHoaDon(hoaDon);\n  1063\t                chiTiet.setSanPham(sp);\n  1064\t                chiTietHoaDonDao.create(chiTiet);\n  1065\t\n  1066\t                // Update stock\n  1067\t                sp.setSoLuongTon(sp.getSoLuongTon() - soLuong);\n  1068\t                sanPhamDao.update(sp);\n  1069\t            }\n  1070\t\n  1071\t            // Clear cart and refresh UI\n  1072\t            cartItems.clear();\n  1073\t            productQuantities.clear();\n  1074\t            tableView.refresh();\n  1075\t            txt_tenKH.clear();\n  1076\t            txt_sdt.clear();\n  1077\t            txt_nhapMa.clear();\n  1078\t            txt_nhapSL.clear();\n  1079\t\n  1080\t            // Xóa thông tin hóa đơn\n  1081\t            if (txt_maGiamGia != null) {\n  1082\t                txt_maGiamGia.clear();\n  1083\t            }\n  1084\t            if (ta_ghiChu != null) {\n  1085\t                ta_ghiChu.clear();\n  1086\t            }\n  1087\t            if (lb_giamGia != null) {\n  1088\t                lb_giamGia.setText(\"0 VNĐ\");\n  1089\t            }\n  1090\t\n  1091\t            // Xóa thông tin tiền khách trả và tiền thừa\n  1092\t            if (txt_tienKhachTra != null) {\n  1093\t                txt_tienKhachTra.clear();\n  1094\t            }\n  1095\t            if (lb_tienThua != null) {\n  1096\t                lb_tienThua.setText(\"0 VNĐ\");\n  1097\t                lb_tienThua.setStyle(\"-fx-font-weight: bold; -fx-text-fill: #009900;\");\n  1098\t            }\n  1099\t\n  1100\t            // Vô hiệu hóa nút thanh toán cho đến khi khách hàng trả đủ tiền\n  1101\t            if (btn_thanhToan != null) {\n  1102\t                btn_thanhToan.setDisable(true);\n  1103\t            }\n  1104\t\n  1105\t            // Cập nhật tổng tiền\n  1106\t            updateTotalAmount();\n  1107\t\n  1108\t            // Show success message\n  1109\t            showAlert(AlertType.INFORMATION, \"Thành công\", \"Đã tạo hóa đơn thành công!\");\n  1110\t\n  1111\t        } catch (Exception e) {\n  1112\t            e.printStackTrace();\n  1113\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể tạo hóa đơn: \" + e.getMessage());\n  1114\t        }\n  1115\t    }\n  1116\t\n  1117\t    /**\n  1118\t     * Hiển thị giao diện tìm kiếm\n  1119\t     */\n  1120\t    private void showSearchInterface() {\n  1121\t        try {\n  1122\t            // Làm mới form tìm kiếm\n  1123\t            txt_timKiem.clear();\n  1124\t            txt_timKiem.requestFocus();\n  1125\t\n  1126\t            // Khởi tạo dữ liệu tìm kiếm nếu cần\n  1127\t            initializeSearchData();\n  1128\t        } catch (Exception e) {\n  1129\t            e.printStackTrace();\n  1130\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể hiển thị giao diện tìm kiếm: \" + e.getMessage());\n  1131\t        }\n  1132\t    }\n  1133\t\n  1134\t    /**\n  1135\t     * Khởi tạo dữ liệu tìm kiếm\n  1136\t     */\n  1137\t    private void initializeSearchData() {\n  1138\t        try {\n  1139\t            // Tạo danh sách sản phẩm cho tìm kiếm\n  1140\t            ObservableList<SanPham> searchResults = FXCollections.observableArrayList();\n  1141\t\n  1142\t            // Lấy tất cả sản phẩm từ database\n  1143\t            List<SanPham> allProducts = sanPhamDao.readAll();\n  1144\t            searchResults.addAll(allProducts);\n  1145\t\n  1146\t            // Hiển thị kết quả tìm kiếm trong bảng\n  1147\t            // Sử dụng bảng hiện tại để hiển thị kết quả tìm kiếm\n  1148\t            tableView.setItems(searchResults);\n  1149\t\n  1150\t\n  1151\t            // Thêm sự kiện cho trường tìm kiếm\n  1152\t            setupSearchField();\n  1153\t        } catch (Exception e) {\n  1154\t            e.printStackTrace();\n  1155\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể khởi tạo dữ liệu tìm kiếm: \" + e.getMessage());\n  1156\t        }\n  1157\t    }\n  1158\t\n  1159\t    /**\n  1160\t     * Thiết lập sự kiện cho trường tìm kiếm\n  1161\t     */\n  1162\t    private void setupSearchField() {\n  1163\t        // Thêm sự kiện khi nhập vào trường tìm kiếm\n  1164\t        txt_timKiem.textProperty().addListener((observable, oldValue, newValue) -> {\n  1165\t            performSearch(newValue);\n  1166\t        });\n  1167\t    }\n  1168\t\n  1169\t    /**\n  1170\t     * Thực hiện tìm kiếm sản phẩm\n  1171\t     */\n  1172\t    private void performSearch(String keyword) {\n  1173\t        try {\n  1174\t            if (keyword == null || keyword.trim().isEmpty()) {\n  1175\t                // Nếu từ khóa trống, hiển thị tất cả sản phẩm\n  1176\t                List<SanPham> allProducts = sanPhamDao.readAll();\n  1177\t                tableView.setItems(FXCollections.observableArrayList(allProducts));\n  1178\t                return;\n  1179\t            }\n  1180\t\n  1181\t            // Tìm kiếm sản phẩm theo từ khóa\n  1182\t            List<SanPham> searchResults = new ArrayList<>();\n  1183\t            List<SanPham> allProducts = sanPhamDao.readAll();\n  1184\t\n  1185\t            // Lọc sản phẩm theo từ khóa (mã hoặc tên)\n  1186\t            String keywordLower = keyword.toLowerCase();\n  1187\t            for (SanPham sp : allProducts) {\n  1188\t                if (sp.getMaSP().toLowerCase().contains(keywordLower) ||\n  1189\t                        sp.getTenSP().toLowerCase().contains(keywordLower)) {\n  1190\t                    searchResults.add(sp);\n  1191\t                }\n  1192\t            }\n  1193\t\n  1194\t            // Cập nhật bảng và trạng thái\n  1195\t            tableView.setItems(FXCollections.observableArrayList(searchResults));\n  1196\t        } catch (Exception e) {\n  1197\t            e.printStackTrace();\n  1198\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể thực hiện tìm kiếm: \" + e.getMessage());\n  1199\t        }\n  1200\t    }\n  1201\t\n  1202\t    /**\n  1203\t     * Xử lý sự kiện khi nhấp đúp vào sản phẩm trong kết quả tìm kiếm\n  1204\t     */\n  1205\t    @FXML\n  1206\t    private void handleSearchResultDoubleClick(MouseEvent event) {\n  1207\t        if (event.getClickCount() == 2) { // Nhấp đúp\n  1208\t            SanPham selectedProduct = tableView.getSelectionModel().getSelectedItem();\n  1209\t            if (selectedProduct != null) {\n  1210\t                // Chuyển sang giao diện bán hàng và thêm sản phẩm vào giỏ hàng\n  1211\t                handleGioHangClick(null);\n  1212\t\n  1213\t                // Điền thông tin sản phẩm vào form\n  1214\t                txt_nhapMa.setText(selectedProduct.getMaSP());\n  1215\t                txt_nhapSL.setText(\"1\"); // Mặc định số lượng là 1\n  1216\t                txt_nhapSL.requestFocus();\n  1217\t            }\n  1218\t        }\n  1219\t    }\n  1220\t\n  1221\t    /**\n  1222\t     * Thiết lập context menu cho bảng giỏ hàng\n  1223\t     */\n  1224\t    private void setupTableContextMenu() {\n  1225\t        // Tạo context menu\n  1226\t        ContextMenu contextMenu = new ContextMenu();\n  1227\t\n  1228\t        // Tạo menu item Xóa\n  1229\t        MenuItem deleteItem = new MenuItem(\"Xóa sản phẩm\");\n  1230\t        deleteItem.setOnAction(event -> {\n  1231\t            // Lấy sản phẩm được chọn\n  1232\t            SanPham selectedProduct = tableView.getSelectionModel().getSelectedItem();\n  1233\t            if (selectedProduct != null) {\n  1234\t                // Xóa sản phẩm khỏi giỏ hàng\n  1235\t                removeProductFromCart(selectedProduct.getMaSP());\n  1236\t            }\n  1237\t        });\n  1238\t\n  1239\t        // Tạo menu item Xóa tất cả\n  1240\t        MenuItem clearAllItem = new MenuItem(\"Xóa tất cả\");\n  1241\t        clearAllItem.setOnAction(event -> {\n  1242\t            // Xóa tất cả sản phẩm trong giỏ hàng\n  1243\t            clearCart();\n  1244\t        });\n  1245\t\n  1246\t        // Tạo menu item Sửa số lượng\n  1247\t        MenuItem editItem = new MenuItem(\"Sửa số lượng\");\n  1248\t        editItem.setOnAction(event -> {\n  1249\t            // Lấy sản phẩm được chọn\n  1250\t            SanPham selectedProduct = tableView.getSelectionModel().getSelectedItem();\n  1251\t            if (selectedProduct != null) {\n  1252\t                // Hiển thị hộp thoại nhập số lượng mới\n  1253\t                editProductQuantity(selectedProduct);\n  1254\t            }\n  1255\t        });\n  1256\t\n  1257\t        // Thêm các menu item vào context menu\n  1258\t        contextMenu.getItems().addAll(deleteItem, editItem, clearAllItem);\n  1259\t\n  1260\t        // Gán context menu cho bảng\n  1261\t        tableView.setContextMenu(contextMenu);\n  1262\t    }\n  1263\t\n  1264\t    /**\n  1265\t     * Sửa số lượng sản phẩm trong giỏ hàng\n  1266\t     */\n  1267\t    private void editProductQuantity(SanPham product) {\n  1268\t        try {\n  1269\t            // Tạo dialog để nhập số lượng mới\n  1270\t            TextInputDialog dialog = new TextInputDialog(productQuantities.getOrDefault(product.getMaSP(), 1).toString());\n  1271\t            dialog.setTitle(\"Sửa số lượng\");\n  1272\t            dialog.setHeaderText(\"Sản phẩm: \" + product.getTenSP());\n  1273\t            dialog.setContentText(\"Nhập số lượng mới:\");\n  1274\t\n  1275\t            // Hiển thị dialog và đợi kết quả\n  1276\t            dialog.showAndWait().ifPresent(result -> {\n  1277\t                try {\n  1278\t                    // Chuyển kết quả thành số\n  1279\t                    int newQuantity = Integer.parseInt(result);\n  1280\t\n  1281\t                    // Kiểm tra số lượng hợp lệ\n  1282\t                    if (newQuantity <= 0) {\n  1283\t                        showAlert(AlertType.WARNING, \"Cảnh báo\", \"Số lượng phải lớn hơn 0!\");\n  1284\t                        return;\n  1285\t                    }\n  1286\t\n  1287\t                    // Kiểm tra số lượng tồn kho\n  1288\t                    if (newQuantity > product.getSoLuongTon()) {\n  1289\t                        showAlert(AlertType.WARNING, \"Cảnh báo\", \"Số lượng vượt quá số lượng tồn kho (\" + product.getSoLuongTon() + \")!\");\n  1290\t                        return;\n  1291\t                    }\n  1292\t\n  1293\t                    // Cập nhật số lượng\n  1294\t                    productQuantities.put(product.getMaSP(), newQuantity);\n  1295\t\n  1296\t                    // Cập nhật bảng và tổng tiền\n  1297\t                    tableView.refresh();\n  1298\t                    updateTotalAmount();\n  1299\t\n  1300\t                    showAlert(AlertType.INFORMATION, \"Thông báo\", \"Đã cập nhật số lượng sản phẩm!\");\n  1301\t                } catch (NumberFormatException e) {\n  1302\t                    showAlert(AlertType.ERROR, \"Lỗi\", \"Số lượng phải là số nguyên!\");\n  1303\t                }\n  1304\t            });\n  1305\t        } catch (Exception e) {\n  1306\t            e.printStackTrace();\n  1307\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể sửa số lượng sản phẩm: \" + e.getMessage());\n  1308\t        }\n  1309\t    }\n  1310\t\n  1311\t    /**\n  1312\t     * Xóa tất cả sản phẩm trong giỏ hàng\n  1313\t     */\n  1314\t    private void clearCart() {\n  1315\t        try {\n  1316\t            // Kiểm tra xem giỏ hàng có trống không\n  1317\t            if (cartItems.isEmpty()) {\n  1318\t                showAlert(AlertType.INFORMATION, \"Thông báo\", \"Giỏ hàng đã trống!\");\n  1319\t                return;\n  1320\t            }\n  1321\t\n  1322\t            // Hiển thị hộp thoại xác nhận\n  1323\t            Alert alert = new Alert(AlertType.CONFIRMATION);\n  1324\t            alert.setTitle(\"Xác nhận xóa\");\n  1325\t            alert.setHeaderText(null);\n  1326\t            alert.setContentText(\"Bạn có chắc chắn muốn xóa tất cả sản phẩm trong giỏ hàng?\");\n  1327\t\n  1328\t            // Nếu người dùng nhấn OK\n  1329\t            if (alert.showAndWait().get() == javafx.scene.control.ButtonType.OK) {\n  1330\t                // Xóa tất cả sản phẩm trong giỏ hàng\n  1331\t                cartItems.clear();\n  1332\t                productQuantities.clear();\n  1333\t                tableView.refresh();\n  1334\t\n  1335\t                // Cập nhật tổng tiền\n  1336\t                updateTotalAmount();\n  1337\t\n  1338\t                showAlert(AlertType.INFORMATION, \"Thông báo\", \"Đã xóa tất cả sản phẩm trong giỏ hàng!\");\n  1339\t            }\n  1340\t        } catch (Exception e) {\n  1341\t            e.printStackTrace();\n  1342\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể xóa giỏ hàng: \" + e.getMessage());\n  1343\t        }\n  1344\t    }\n  1345\t\n  1346\t    /**\n  1347\t     * Xử lý sự kiện khi nhấn nút đăng xuất\n  1348\t     */\n  1349\t    @FXML\n  1350\t    private void handleDangXuatClick(MouseEvent event) {\n  1351\t        try {\n  1352\t            // Hiển thị hộp thoại xác nhận\n  1353\t            Alert alert = new Alert(AlertType.CONFIRMATION);\n  1354\t            alert.setTitle(\"Xác nhận đăng xuất\");\n  1355\t            alert.setHeaderText(null);\n  1356\t            alert.setContentText(\"Bạn có chắc chắn muốn đăng xuất?\");\n  1357\t\n  1358\t            // Nếu người dùng nhấn OK\n  1359\t            if (alert.showAndWait().get() == javafx.scene.control.ButtonType.OK) {\n  1360\t                // Chuyển về màn hình đăng nhập\n  1361\t                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/Login_gui.fxml\"));\n  1362\t                Parent root = loader.load();\n  1363\t                Scene scene = new Scene(root);\n  1364\t\n  1365\t                // Lấy stage hiện tại\n  1366\t                Stage stage = (Stage) btn_dangXuat.getScene().getWindow();\n  1367\t\n  1368\t                // Thiết lập scene mới\n  1369\t                stage.setScene(scene);\n  1370\t                stage.setTitle(\"Đăng nhập\");\n  1371\t\n  1372\t                // Xóa thông tin đăng nhập hiện tại\n  1373\t                App.taiKhoan = null;\n  1374\t                App.user = null;\n  1375\t                App.ma = null;\n  1376\t\n  1377\t                // Hiển thị stage\n  1378\t                stage.show();\n  1379\t\n  1380\t                System.out.println(\"Đã đăng xuất thành công\");\n  1381\t            }\n  1382\t        } catch (Exception e) {\n  1383\t            e.printStackTrace();\n  1384\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể đăng xuất: \" + e.getMessage());\n  1385\t        }\n  1386\t    }\n  1387\t\n  1388\t    /**\n  1389\t     * Áp dụng mã giảm giá (gọi từ FXML)\n  1390\t     */\n  1391\t    @FXML\n  1392\t    private void apDungMaGiamGia(MouseEvent event) {\n  1393\t        apDungMaGiamGia();\n  1394\t    }\n  1395\t\n  1396\t    /**\n  1397\t     * Áp dụng mã giảm giá\n  1398\t     */\n  1399\t    private void apDungMaGiamGia() {\n  1400\t        try {\n  1401\t            if (txt_maGiamGia != null) {\n  1402\t                String maGiamGia = txt_maGiamGia.getText().trim();\n  1403\t\n  1404\t                if (maGiamGia.isEmpty()) {\n  1405\t                    showAlert(AlertType.WARNING, \"Cảnh báo\", \"Vui lòng nhập mã giảm giá!\");\n  1406\t                    return;\n  1407\t                }\n  1408\t\n  1409\t                // TODO: Kiểm tra mã giảm giá trong cơ sở dữ liệu\n  1410\t                // Đây là một ví dụ đơn giản\n  1411\t                double giamGia = 0;\n  1412\t\n  1413\t                if (maGiamGia.equals(\"SALE10\")) {\n  1414\t                    giamGia = calculateSubtotal() * 0.1; // Giảm 10%\n  1415\t                } else if (maGiamGia.equals(\"SALE20\")) {\n  1416\t                    giamGia = calculateSubtotal() * 0.2; // Giảm 20%\n  1417\t                } else if (maGiamGia.equals(\"SALE50\")) {\n  1418\t                    giamGia = calculateSubtotal() * 0.5; // Giảm 50%\n  1419\t                } else {\n  1420\t                    showAlert(AlertType.ERROR, \"Lỗi\", \"Mã giảm giá không hợp lệ!\");\n  1421\t                    return;\n  1422\t                }\n  1423\t\n  1424\t                // Cập nhật giảm giá\n  1425\t                NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale(\"vi\", \"VN\"));\n  1426\t                if (lb_giamGia != null) {\n  1427\t                    lb_giamGia.setText(currencyFormat.format(giamGia));\n  1428\t                }\n  1429\t\n  1430\t                // Cập nhật tổng thanh toán\n  1431\t                double tongTien = calculateSubtotal() + calculateVAT(calculateSubtotal()) - giamGia;\n  1432\t                if (lb_tongThanhToan != null) {\n  1433\t                    lb_tongThanhToan.setText(currencyFormat.format(tongTien));\n  1434\t                }\n  1435\t\n  1436\t                showAlert(AlertType.INFORMATION, \"Thành công\", \"Áp dụng mã giảm giá thành công!\");\n  1437\t            }\n  1438\t        } catch (Exception e) {\n  1439\t            e.printStackTrace();\n  1440\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể áp dụng mã giảm giá: \" + e.getMessage());\n  1441\t        }\n  1442\t    }\n  1443\t\n  1444\t    /**\n  1445\t     * Cập nhật tổng tiền trong giỏ hàng\n  1446\t     */\n  1447\t    private void updateTotalAmount() {\n  1448\t        try {\n  1449\t            // Tính tổng số sản phẩm (số loại sản phẩm)\n  1450\t            int tongSoSP = cartItems.size();\n  1451\t            if (lb_tongSoSP != null) {\n  1452\t                lb_tongSoSP.setText(String.valueOf(tongSoSP));\n  1453\t            }\n  1454\t\n  1455\t            // Tính tổng số lượng (tổng số mặt hàng)\n  1456\t            int tongSL = 0;\n  1457\t            for (Integer quantity : productQuantities.values()) {\n  1458\t                tongSL += quantity;\n  1459\t            }\n  1460\t            if (lb_tongSL != null) {\n  1461\t                lb_tongSL.setText(String.valueOf(tongSL));\n  1462\t            }\n  1463\t\n  1464\t            // Tính tạm tính (tổng tiền hàng chưa bao gồm thuế)\n  1465\t            double tamTinh = calculateSubtotal();\n  1466\t            NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale(\"vi\", \"VN\"));\n  1467\t            if (lb_tamTinh != null) {\n  1468\t                lb_tamTinh.setText(currencyFormat.format(tamTinh));\n  1469\t            }\n  1470\t\n  1471\t            // Tính tổng tiền (bao gồm thuế)\n  1472\t            double total = calculateTotal();\n  1473\t            if (lb_tongTien != null) {\n  1474\t                lb_tongTien.setText(currencyFormat.format(total));\n  1475\t            }\n  1476\t\n  1477\t            // Cập nhật tổng thanh toán\n  1478\t            double tongTien = total;\n  1479\t\n  1480\t            // Trừ giảm giá nếu có\n  1481\t            if (lb_giamGia != null && !lb_giamGia.getText().equals(\"0 VNĐ\")) {\n  1482\t                try {\n  1483\t                    String giamGiaStr = lb_giamGia.getText().replaceAll(\"[^\\\\d]\", \"\");\n  1484\t                    double giamGia = Double.parseDouble(giamGiaStr);\n  1485\t                    tongTien -= giamGia;\n  1486\t                } catch (Exception e) {\n  1487\t                    // Không làm gì nếu không thể chuyển đổi\n  1488\t                }\n  1489\t            }\n  1490\t\n  1491\t            // Cập nhật tổng thanh toán\n  1492\t            if (lb_tongThanhToan != null) {\n  1493\t                lb_tongThanhToan.setText(currencyFormat.format(tongTien));\n  1494\t            }\n  1495\t        } catch (Exception e) {\n  1496\t            e.printStackTrace();\n  1497\t            // Xử lý lỗi và đặt giá trị mặc định\n  1498\t            if (lb_tongSoSP != null) {\n  1499\t                lb_tongSoSP.setText(\"0\");\n  1500\t            }\n  1501\t            if (lb_tongSL != null) {\n  1502\t                lb_tongSL.setText(\"0\");\n  1503\t            }\n  1504\t            if (lb_tamTinh != null) {\n  1505\t                lb_tamTinh.setText(\"0 VNĐ\");\n  1506\t            }\n  1507\t            if (lb_tongTien != null) {\n  1508\t                lb_tongTien.setText(\"0 VNĐ\");\n  1509\t            }\n  1510\t            if (lb_tongThanhToan != null) {\n  1511\t                lb_tongThanhToan.setText(\"0 VNĐ\");\n  1512\t            }\n  1513\t        }\n  1514\t    }\n  1515\t\n  1516\t    /**\n  1517\t     * Xử lý sự kiện khi nhấn nút thanh toán\n  1518\t     */\n  1519\t    @FXML\n  1520\t    void thanhToan(MouseEvent event) {\n  1521\t        if (cartItems.isEmpty()) {\n  1522\t            showAlert(AlertType.WARNING, \"Thông báo\", \"Giỏ hàng trống!\");\n  1523\t            return;\n  1524\t        }\n  1525\t\n  1526\t        // Kiểm tra xem khách hàng đã trả đủ tiền chưa\n  1527\t        if (txt_tienKhachTra.getText().trim().isEmpty()) {\n  1528\t            showAlert(AlertType.WARNING, \"Thông báo\", \"Vui lòng nhập số tiền khách trả!\");\n  1529\t            txt_tienKhachTra.requestFocus();\n  1530\t            return;\n  1531\t        }\n  1532\t\n  1533\t        // Kiểm tra xem tiền thừa có âm không\n  1534\t        if (lb_tienThua.getText().startsWith(\"-\")) {\n  1535\t            showAlert(AlertType.WARNING, \"Thông báo\", \"Số tiền khách trả chưa đủ!\");\n  1536\t            txt_tienKhachTra.requestFocus();\n  1537\t            return;\n  1538\t        }\n  1539\t\n  1540\t        // Xác nhận thanh toán\n  1541\t        Alert alert = new Alert(AlertType.CONFIRMATION);\n  1542\t        alert.setTitle(\"Xác nhận thanh toán\");\n  1543\t        alert.setHeaderText(null);\n  1544\t\n  1545\t        // Tạo nội dung xác nhận chi tiết hơn\n  1546\t        StringBuilder content = new StringBuilder(\"Thông tin thanh toán:\\n\");\n  1547\t        content.append(\"Tổng sản phẩm: \").append(cartItems.size()).append(\"\\n\");\n  1548\t\n  1549\t        // Lấy tổng tiền từ lb_tongThanhToan\n  1550\t        String tongTien = \"0 VNĐ\";\n  1551\t        if (lb_tongThanhToan != null) {\n  1552\t            tongTien = lb_tongThanhToan.getText();\n  1553\t        } else if (lb_tongTien != null) {\n  1554\t            tongTien = lb_tongTien.getText();\n  1555\t        }\n  1556\t        content.append(\"Tổng thanh toán: \").append(tongTien).append(\"\\n\");\n  1557\t\n  1558\t        // Lấy phương thức thanh toán\n  1559\t        String phuongThuc = \"Tiền mặt\";\n  1560\t        if (rb_chuyenKhoan != null && rb_chuyenKhoan.isSelected()) {\n  1561\t            phuongThuc = \"Chuyển khoản\";\n  1562\t        } else if (rb_the != null && rb_the.isSelected()) {\n  1563\t            phuongThuc = \"Thẻ\";\n  1564\t        }\n  1565\t        content.append(\"Phương thức thanh toán: \").append(phuongThuc).append(\"\\n\");\n  1566\t\n  1567\t        // Lấy ghi chú nếu có\n  1568\t        if (ta_ghiChu != null && !ta_ghiChu.getText().trim().isEmpty()) {\n  1569\t            content.append(\"Ghi chú: \").append(ta_ghiChu.getText().trim()).append(\"\\n<response clipped><NOTE>To save on context only part of this file has been shown to you.</NOTE>\nTotal lines in file: 1696\n","isError":false,"requestId":""}},"20710933-dd7e-42b5-b6ab-e6fd8d4c2d83;toolu_vrtx_01TJbsaPQTkAtcJARRyxGJPu":{"phase":5,"result":{"text":"Successfully edited the file src/main/java/iuh/fit/controller/BanHang_controller.java.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n   438\t        toolsSlider(thongKeSubVBox,thongKeSubMenuList);\n   439\t        removeOtherMenus(thongKeSubVBox);\n   440\t    }\n   441\t\n   442\t    @FXML\n   443\t    void handleTimKiemClick(MouseEvent event) {\n   444\t        try {\n   445\t            // Chuyển đến giao diện tra cứu\n   446\t            loadFXML(\"/fxml/TraCuu_gui.fxml\");\n   447\t        } catch (Exception e) {\n   448\t            e.printStackTrace();\n   449\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu: \" + e.getMessage());\n   450\t\n   451\t            // Nếu không thể mở giao diện tra cứu, hiển thị giao diện tìm kiếm trên giao diện hiện tại\n   452\t            toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n   453\t            removeOtherMenus(timKiemSubVBox);\n   454\t\n   455\t            // Hiển thị giao diện tìm kiếm\n   456\t            showSearchInterface();\n   457\t        }\n   458\t    }\n   459\t\n   460\t    @FXML\n   461\t    void toQLHoaDon(MouseEvent event) {\n   462\t        try {\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","isError":false,"requestId":""}},"70f6d6af-fb36-45d1-a65e-989cf84ad99a;toolu_vrtx_018r8CLSmBDE1CxxscPFXXxR":{"phase":5,"result":{"text":"Here's the result of running `cat -n` on src/main/java/iuh/fit/controller/BanHang_controller.java:\n  1349\t                Scene scene = new Scene(root);\n  1350\t\n  1351\t                // Lấy stage hiện tại\n  1352\t                Stage stage = (Stage) btn_dangXuat.getScene().getWindow();\n  1353\t\n  1354\t                // Thiết lập scene mới\n  1355\t                stage.setScene(scene);\n  1356\t                stage.setTitle(\"Đăng nhập\");\n  1357\t\n  1358\t                // Xóa thông tin đăng nhập hiện tại\n  1359\t                App.taiKhoan = null;\n  1360\t                App.user = null;\n  1361\t                App.ma = null;\n  1362\t\n  1363\t                // Hiển thị stage\n  1364\t                stage.show();\n  1365\t\n  1366\t                System.out.println(\"Đã đăng xuất thành công\");\n  1367\t            }\n  1368\t        } catch (Exception e) {\n  1369\t            e.printStackTrace();\n  1370\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể đăng xuất: \" + e.getMessage());\n  1371\t        }\n  1372\t    }\n  1373\t\n  1374\t    /**\n  1375\t     * Áp dụng mã giảm giá (gọi từ FXML)\n  1376\t     */\n  1377\t    @FXML\n  1378\t    private void apDungMaGiamGia(MouseEvent event) {\n  1379\t        apDungMaGiamGia();\n  1380\t    }\n  1381\t\n  1382\t    /**\n  1383\t     * Áp dụng mã giảm giá\n  1384\t     */\n  1385\t    private void apDungMaGiamGia() {\n  1386\t        try {\nTotal lines in file: 1682\n","isError":false,"requestId":""}},"a95ebffb-1c0d-4ac1-8afc-6b84f08f7a61;toolu_vrtx_01K1is1dQzPzH8wnLbRwycY1":{"phase":5,"result":{"text":"Here's the result of running `cat -n` on src/main/java/iuh/fit/controller/BanHang_controller.java:\n  1349\t                Scene scene = new Scene(root);\n  1350\t\n  1351\t                // Lấy stage hiện tại\n  1352\t                Stage stage = (Stage) btn_dangXuat.getScene().getWindow();\n  1353\t\n  1354\t                // Thiết lập scene mới\n  1355\t                stage.setScene(scene);\n  1356\t                stage.setTitle(\"Đăng nhập\");\n  1357\t\n  1358\t                // Xóa thông tin đăng nhập hiện tại\n  1359\t                App.taiKhoan = null;\n  1360\t                App.user = null;\n  1361\t                App.ma = null;\n  1362\t\n  1363\t                // Hiển thị stage\n  1364\t                stage.show();\n  1365\t\n  1366\t                System.out.println(\"Đã đăng xuất thành công\");\n  1367\t            }\n  1368\t        } catch (Exception e) {\n  1369\t            e.printStackTrace();\n  1370\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể đăng xuất: \" + e.getMessage());\n  1371\t        }\n  1372\t    }\nTotal lines in file: 1682\n","isError":false,"requestId":""}},"41858164-d0df-4ac0-a684-e3414a2380bb;toolu_vrtx_01SFRm7Pk4TWwyEKhzhhKRDb":{"phase":5,"result":{"text":"Here's the result of running `cat -n` on src/main/java/iuh/fit/controller/BanHang_controller.java:\n  1340\t            alert.setTitle(\"Xác nhận đăng xuất\");\n  1341\t            alert.setHeaderText(null);\n  1342\t            alert.setContentText(\"Bạn có chắc chắn muốn đăng xuất?\");\n  1343\t\n  1344\t            // Nếu người dùng nhấn OK\n  1345\t            if (alert.showAndWait().get() == javafx.scene.control.ButtonType.OK) {\n  1346\t                // Chuyển về màn hình đăng nhập\n  1347\t                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/Login_gui.fxml\"));\n  1348\t                Parent root = loader.load();\n  1349\t                Scene scene = new Scene(root);\n  1350\t\n  1351\t                // Lấy stage hiện tại\n  1352\t                Stage stage = (Stage) btn_dangXuat.getScene().getWindow();\n  1353\t\n  1354\t                // Thiết lập scene mới\n  1355\t                stage.setScene(scene);\n  1356\t                stage.setTitle(\"Đăng nhập\");\n  1357\t\n  1358\t                // Xóa thông tin đăng nhập hiện tại\n  1359\t                App.taiKhoan = null;\n  1360\t                App.user = null;\n  1361\t                App.ma = null;\n  1362\t\n  1363\t                // Hiển thị stage\n  1364\t                stage.show();\n  1365\t\n  1366\t                System.out.println(\"Đã đăng xuất thành công\");\n  1367\t            }\n  1368\t        } catch (Exception e) {\n  1369\t            e.printStackTrace();\n  1370\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể đăng xuất: \" + e.getMessage());\n  1371\t        }\n  1372\t    }\nTotal lines in file: 1682\n","isError":false,"requestId":""}},"97a53a00-c440-42bc-a6c5-e3f1ecc7ebbc;toolu_vrtx_01CeAxqsiBMFKubb4bhftYT2":{"phase":5,"result":{"text":"Here's the result of running `cat -n` on src/main/java/iuh/fit/controller/BanHang_controller.java:\n  1330\t    }\n  1331\t\n  1332\t    /**\n  1333\t     * Xử lý sự kiện khi nhấn nút đăng xuất\n  1334\t     */\n  1335\t    @FXML\n  1336\t    private void handleDangXuatClick(MouseEvent event) {\n  1337\t        try {\n  1338\t            // Hiển thị hộp thoại xác nhận\n  1339\t            Alert alert = new Alert(AlertType.CONFIRMATION);\n  1340\t            alert.setTitle(\"Xác nhận đăng xuất\");\n  1341\t            alert.setHeaderText(null);\n  1342\t            alert.setContentText(\"Bạn có chắc chắn muốn đăng xuất?\");\n  1343\t\n  1344\t            // Nếu người dùng nhấn OK\n  1345\t            if (alert.showAndWait().get() == javafx.scene.control.ButtonType.OK) {\n  1346\t                // Chuyển về màn hình đăng nhập\n  1347\t                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/Login_gui.fxml\"));\n  1348\t                Parent root = loader.load();\n  1349\t                Scene scene = new Scene(root);\n  1350\t\n  1351\t                // Lấy stage hiện tại\n  1352\t                Stage stage = (Stage) btn_dangXuat.getScene().getWindow();\n  1353\t\n  1354\t                // Thiết lập scene mới\n  1355\t                stage.setScene(scene);\n  1356\t                stage.setTitle(\"Đăng nhập\");\n  1357\t\n  1358\t                // Xóa thông tin đăng nhập hiện tại\n  1359\t                App.taiKhoan = null;\n  1360\t                App.user = null;\n  1361\t                App.ma = null;\n  1362\t\n  1363\t                // Hiển thị stage\n  1364\t                stage.show();\n  1365\t\n  1366\t                System.out.println(\"Đã đăng xuất thành công\");\n  1367\t            }\n  1368\t        } catch (Exception e) {\n  1369\t            e.printStackTrace();\n  1370\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể đăng xuất: \" + e.getMessage());\n  1371\t        }\n  1372\t    }\nTotal lines in file: 1682\n","isError":false,"requestId":""}},"5c6b8ca5-4799-49a6-a8f5-91b93f0e2db0;toolu_vrtx_01SEv9taJ37iP8CysqM9J9Q7":{"phase":5,"result":{"text":"Successfully edited the file src/main/java/iuh/fit/controller/BanHang_controller.java.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n  1331\t\n  1332\t    /**\n  1333\t     * Xử lý sự kiện khi nhấn nút đăng xuất\n  1334\t     */\n  1335\t    @FXML\n  1336\t    private void handleDangXuatClick(MouseEvent event) {\n  1337\t        try {\n  1338\t            // Hiển thị hộp thoại xác nhận\n  1339\t            Alert alert = new Alert(AlertType.CONFIRMATION);\n  1340\t            alert.setTitle(\"Xác nhận đăng xuất\");\n  1341\t            alert.setHeaderText(null);\n  1342\t            alert.setContentText(\"Bạn có chắc chắn muốn đăng xuất?\");\n  1343\t\n  1344\t            // Nếu người dùng nhấn OK\n  1345\t            if (alert.showAndWait().get() == javafx.scene.control.ButtonType.OK) {\n  1346\t                // Xóa thông tin đăng nhập hiện tại\n  1347\t                App.taiKhoan = null;\n  1348\t                App.user = null;\n  1349\t                App.ma = null;\n  1350\t\n  1351\t                // Chuyển về màn hình đăng nhập\n  1352\t                try {\n  1353\t                    loadFXML(\"/fxml/Login_gui.fxml\");\n  1354\t                    System.out.println(\"Đã đăng xuất thành công\");\n  1355\t                } catch (Exception e) {\n  1356\t                    e.printStackTrace();\n  1357\t                    showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện đăng nhập: \" + e.getMessage());\n  1358\t                }\n  1359\t            }\n  1360\t        } catch (Exception e) {\n  1361\t            e.printStackTrace();\n  1362\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể đăng xuất: \" + e.getMessage());\n  1363\t        }\n  1364\t    }\n  1365\t\n  1366\t    /**\n  1367\t     * Áp dụng mã giảm giá (gọi từ FXML)\n  1368\t     */\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","isError":false,"requestId":""}},"ae9228d5-e5d9-44bc-b62e-79078f335e2c;toolu_vrtx_01RssH3UYYdeJVSf38kP77GP":{"phase":5,"result":{"text":"Here's the result of running `cat -n` on src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java:\n     1\tpackage iuh.fit.controller;\n     2\t\n     3\timport iuh.fit.App;\n     4\timport iuh.fit.daos.NhanVien_dao;\n     5\timport iuh.fit.entities.NhanVien;\n     6\timport javafx.animation.FadeTransition;\n     7\timport javafx.animation.Interpolator;\n     8\timport javafx.beans.property.SimpleStringProperty;\n     9\timport javafx.collections.FXCollections;\n    10\timport javafx.collections.ObservableList;\n    11\timport javafx.fxml.FXML;\n    12\timport javafx.fxml.FXMLLoader;\n    13\timport javafx.fxml.Initializable;\n    14\timport javafx.scene.Scene;\n    15\timport javafx.scene.control.*;\n    16\timport javafx.scene.control.cell.PropertyValueFactory;\n    17\timport javafx.scene.image.ImageView;\n    18\timport javafx.scene.input.MouseEvent;\n    19\timport javafx.scene.layout.Pane;\n    20\timport javafx.scene.layout.VBox;\n    21\timport javafx.stage.Stage;\n    22\timport javafx.util.Duration;\n    23\t\n    24\timport java.io.IOException;\n    25\timport java.net.URL;\n    26\timport java.time.LocalDate;\n    27\timport java.time.format.DateTimeFormatter;\n    28\timport java.util.HashMap;\n    29\timport java.util.List;\n    30\timport java.util.Map;\n    31\timport java.util.ResourceBundle;\n    32\t\n    33\tpublic class TraCuuNhanVien_controller implements Initializable {\n    34\t\n    35\t    @FXML\n    36\t    private VBox banHangSubMenuList;\n    37\t\n    38\t    @FXML\n    39\t    private VBox banHangSubVBox;\n    40\t\n    41\t    @FXML\n    42\t    private Button btn_TraCuu;\n    43\t\n    44\t    @FXML\n    45\t    private Button btn_qlNhanVien;\n    46\t\n    47\t    @FXML\n    48\t    private ComboBox<String> ccb_GiaoDien;\n    49\t\n    50\t    @FXML\n    51\t    private TableColumn<NhanVien, String> cl_cccd;\n    52\t\n    53\t    @FXML\n    54\t    private TableColumn<NhanVien, String> cl_chucVu;\n    55\t\n    56\t    @FXML\n    57\t    private TableColumn<NhanVien, String> cl_diaChi;\n    58\t\n    59\t    @FXML\n    60\t    private TableColumn<NhanVien, String> cl_email;\n    61\t\n    62\t    @FXML\n    63\t    private TableColumn<NhanVien, String> cl_maNV;\n    64\t\n    65\t    @FXML\n    66\t    private TableColumn<NhanVien, String> cl_ngaySinh;\n    67\t\n    68\t    @FXML\n    69\t    private TableColumn<NhanVien, String> cl_sdt;\n    70\t\n    71\t    @FXML\n    72\t    private TableColumn<NhanVien, String> cl_stt;\n    73\t\n    74\t    @FXML\n    75\t    private TableColumn<NhanVien, String> cl_tenNV;\n    76\t\n    77\t    @FXML\n    78\t    private ImageView img_HoaDon;\n    79\t\n    80\t    @FXML\n    81\t    private ImageView img_gioHang;\n    82\t\n    83\t    @FXML\n    84\t    private ImageView img_hoaDon;\n    85\t\n    86\t    @FXML\n    87\t    private ImageView img_nhanVien;\n    88\t\n    89\t    @FXML\n    90\t    private ImageView img_phieuNhap;\n    91\t\n    92\t    @FXML\n    93\t    private ImageView img_quanLy;\n    94\t\n    95\t    @FXML\n    96\t    private ImageView img_sanPham;\n    97\t\n    98\t    @FXML\n    99\t    private ImageView img_taiKhoan;\n   100\t\n   101\t    @FXML\n   102\t    private ImageView img_taiKhoan1;\n   103\t\n   104\t    @FXML\n   105\t    private ImageView img_thongKe;\n   106\t\n   107\t    @FXML\n   108\t    private ImageView img_thongKeDoanhThu;\n   109\t\n   110\t    @FXML\n   111\t    private ImageView img_thongKeSanPham;\n   112\t\n   113\t    @FXML\n   114\t    private ImageView img_timKiem;\n   115\t\n   116\t    @FXML\n   117\t    private Label lb_HoaDon;\n   118\t\n   119\t    @FXML\n   120\t    private Label lb_cccd;\n   121\t\n   122\t    @FXML\n   123\t    private Label lb_chucVu;\n   124\t\n   125\t    @FXML\n   126\t    private Label lb_diaChi;\n   127\t\n   128\t    @FXML\n   129\t    private Label lb_email;\n   130\t\n   131\t    @FXML\n   132\t    private Label lb_gioHang;\n   133\t\n   134\t    @FXML\n   135\t    private Label lb_hoaDon;\n   136\t\n   137\t    @FXML\n   138\t    private Label lb_maNV;\n   139\t\n   140\t    @FXML\n   141\t    private Label lb_ngaySinh;\n   142\t\n   143\t    @FXML\n   144\t    private Label lb_nhanVien;\n   145\t\n   146\t    @FXML\n   147\t    private Label lb_phieuNhap;\n   148\t\n   149\t    @FXML\n   150\t    private Label lb_quanLy;\n   151\t\n   152\t    @FXML\n   153\t    private Label lb_sanPham;\n   154\t\n   155\t    @FXML\n   156\t    private Label lb_sdt;\n   157\t\n   158\t    @FXML\n   159\t    private Label lb_taiKhoan;\n   160\t\n   161\t    @FXML\n   162\t    private Label lb_tenNV;\n   163\t\n   164\t    @FXML\n   165\t    private Label lb_thongKe;\n   166\t\n   167\t    @FXML\n   168\t    private Label lb_thongKeDoanhThu;\n   169\t\n   170\t    @FXML\n   171\t    private Label lb_thongKeSanPham;\n   172\t\n   173\t    @FXML\n   174\t    private Label lb_timKiem;\n   175\t\n   176\t    @FXML\n   177\t    private Pane p_HoaDon;\n   178\t\n   179\t    @FXML\n   180\t    private Pane p_gioHang;\n   181\t\n   182\t    @FXML\n   183\t    private Pane p_hoaDon;\n   184\t\n   185\t    @FXML\n   186\t    private Pane p_nhanVien;\n   187\t\n   188\t    @FXML\n   189\t    private Pane p_phieuNhap;\n   190\t\n   191\t    @FXML\n   192\t    private Pane p_quanLy;\n   193\t\n   194\t    @FXML\n   195\t    private Pane p_sanPham;\n   196\t\n   197\t    @FXML\n   198\t    private Pane p_taiKhoan;\n   199\t\n   200\t    @FXML\n   201\t    private Pane p_thongKe;\n   202\t\n   203\t    @FXML\n   204\t    private Pane p_thongKeDoanhThu;\n   205\t\n   206\t    @FXML\n   207\t    private Pane p_thongKeSanPham;\n   208\t\n   209\t    @FXML\n   210\t    private Pane p_timKiem;\n   211\t\n   212\t    @FXML\n   213\t    private VBox quanLySubMenuList;\n   214\t\n   215\t    @FXML\n   216\t    private VBox quanLySubVBox;\n   217\t\n   218\t    @FXML\n   219\t    private VBox thongKeSubMenuList;\n   220\t\n   221\t    @FXML\n   222\t    private VBox thongKeSubVBox;\n   223\t\n   224\t    @FXML\n   225\t    private VBox timKiemSubMenuList;\n   226\t\n   227\t    @FXML\n   228\t    private VBox timKiemSubVBox;\n   229\t\n   230\t    @FXML\n   231\t    private TextField txt_maNV;\n   232\t\n   233\t    @FXML\n   234\t    private TableView<NhanVien> tableNhanVien;\n   235\t\n   236\t    @FXML\n   237\t    private VBox vBox;\n   238\t\n   239\t    Map<VBox,VBox> map = new HashMap<VBox,VBox>();\n   240\t    public void addMenusToMap() {\n   241\t        addMenusToMapImpl();\n   242\t    }\n   243\t\n   244\t    private void addMenusToMapImpl() {\n   245\t        map.put(banHangSubVBox, banHangSubMenuList);\n   246\t        map.put(quanLySubVBox, quanLySubMenuList);\n   247\t        map.put(timKiemSubVBox, timKiemSubMenuList);\n   248\t        map.put(thongKeSubVBox,thongKeSubMenuList);\n   249\t\n   250\t        /**\n   251\t         * Remove the components from VBox on load of stage\n   252\t         */\n   253\t        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n   254\t            entry.getKey().getChildren().remove(entry.getValue());\n   255\t        }\n   256\t    }\n   257\t    /**\n   258\t     * Menu slider\n   259\t     * @param menu\n   260\t     * @param subMenu\n   261\t     */\n   262\t    public void toolsSlider(VBox menu,VBox subMenu){\n   263\t        toolsSliderImpl(menu,subMenu);\n   264\t    }\n   265\t\n   266\t    private void toolsSliderImpl(VBox menu,VBox subMenu) {\n   267\t        if(menu.getChildren().contains(subMenu)){\n   268\t            final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n   269\t            transition.setFromValue(0.5);\n   270\t            transition.setToValue(1);\n   271\t            transition.setInterpolator(Interpolator.EASE_IN);\n   272\t            menu.getChildren().remove(subMenu);\n   273\t            transition.play();\n   274\t        }else{\n   275\t            final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n   276\t            transition.setFromValue(0.5);\n   277\t            transition.setToValue(1);\n   278\t            transition.setInterpolator(Interpolator.EASE_IN);\n   279\t            menu.getChildren().add(subMenu);\n   280\t            transition.play();\n   281\t        }\n   282\t    }\n   283\t\n   284\t    public void removeOtherMenus(VBox menu){\n   285\t        removeOtherMenusImpl(menu);\n   286\t    }\n   287\t    private void removeOtherMenusImpl(VBox menu) {\n   288\t        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n   289\t            if(!entry.getKey().equals(menu))\n   290\t                entry.getKey().getChildren().remove(entry.getValue());\n   291\t        }\n   292\t    }\n   293\t    @FXML\n   294\t    void handleGioHangClick(MouseEvent event) {\n   295\t        // Hiển thị menu bán hàng\n   296\t        toolsSlider(banHangSubVBox, banHangSubMenuList);\n   297\t        removeOtherMenus(banHangSubVBox);\n   298\t    }\n   299\t\n   300\t    @FXML\n   301\t    void handleQuanLyClick(MouseEvent event) {\n   302\t        toolsSlider(quanLySubVBox,quanLySubMenuList);\n   303\t        removeOtherMenus(quanLySubVBox);\n   304\t    }\n   305\t\n   306\t    @FXML\n   307\t    void handleThongKeClick(MouseEvent event) {\n   308\t        toolsSlider(thongKeSubVBox,thongKeSubMenuList);\n   309\t        removeOtherMenus(thongKeSubVBox);\n   310\t    }\n   311\t\n   312\t    @FXML\n   313\t    void handleTimKiemClick(MouseEvent event) {\n   314\t        // Hiển thị menu tìm kiếm\n   315\t        toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n   316\t        removeOtherMenus(timKiemSubVBox);\n   317\t    }\n   318\t\n   319\t    private DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\n   320\t\n   321\t    @Override\n   322\t    public void initialize(URL url, ResourceBundle resourceBundle) {\n   323\t        addMenusToMap();\n   324\t        setupTableColumns();\n   325\t        loadTableData();\n   326\t        setupTableClickEvent();\n   327\t        initializeComboBox();\n   328\t    }\n   329\t\n   330\t    private void setupTableColumns() {\n   331\t        cl_stt.setCellFactory(col -> new TableCell<NhanVien, String>() {\n   332\t            @Override\n   333\t            protected void updateItem(String item, boolean empty) {\n   334\t                super.updateItem(item, empty);\n   335\t                if (empty) {\n   336\t                    setText(null);\n   337\t                } else {\n   338\t                    setText(String.valueOf(getIndex() + 1));\n   339\t                }\n   340\t            }\n   341\t        });\n   342\t\n   343\t        cl_stt.setCellValueFactory(new PropertyValueFactory<>(\"stt\"));\n   344\t        cl_maNV.setCellValueFactory(new PropertyValueFactory<>(\"maNV\"));\n   345\t        cl_tenNV.setCellValueFactory(new PropertyValueFactory<>(\"tenNV\"));\n   346\t        cl_cccd.setCellValueFactory(new PropertyValueFactory<>(\"cccd\"));\n   347\t        cl_sdt.setCellValueFactory(new PropertyValueFactory<>(\"sdt\"));\n   348\t        cl_email.setCellValueFactory(new PropertyValueFactory<>(\"email\"));\n   349\t        cl_diaChi.setCellValueFactory(new PropertyValueFactory<>(\"diaChi\"));\n   350\t        cl_chucVu.setCellValueFactory(new PropertyValueFactory<>(\"chucVu\"));\n   351\t        \n   352\t        // Định dạng ngày sinh\n   353\t        cl_ngaySinh.setCellValueFactory(cellData -> {\n   354\t            LocalDate date = cellData.getValue().getNgaySinh();\n   355\t            if (date == null) return null;\n   356\t            return new SimpleStringProperty(date.format(dateFormatter));\n   357\t        });\n   358\t    }\n   359\t\n   360\t    private void loadTableData() {\n   361\t        try {\n   362\t            NhanVien_dao nhanVienDao = new NhanVien_dao();\n   363\t            List<NhanVien> dsnv = nhanVienDao.readAllNhanVien();\n   364\t            ObservableList<NhanVien> data = FXCollections.observableArrayList(dsnv);\n   365\t            tableNhanVien.setItems(data);\n   366\t        } catch (Exception e) {\n   367\t            showError(\"Lỗi\", \"Không thể tải dữ liệu nhân viên\");\n   368\t        }\n   369\t    }\n   370\t\n   371\t    private void setupTableClickEvent() {\n   372\t        tableNhanVien.setOnMouseClicked(event -> {\n   373\t            NhanVien selectedNhanVien = tableNhanVien.getSelectionModel().getSelectedItem();\n   374\t            if (selectedNhanVien != null) {\n   375\t                updateLabels(selectedNhanVien);\n   376\t            }\n   377\t        });\n   378\t    }\n   379\t\n   380\t    private void updateLabels(NhanVien nv) {\n   381\t        lb_maNV.setText(nv.getMaNV());\n   382\t        lb_tenNV.setText(nv.getTenNV());\n   383\t        lb_cccd.setText(nv.getCccd());\n   384\t        lb_sdt.setText(nv.getSdt());\n   385\t        lb_email.setText(nv.getEmail());\n   386\t        lb_diaChi.setText(nv.getDiaChi());\n   387\t        lb_chucVu.setText(nv.getChucVu().toString());\n   388\t        lb_ngaySinh.setText(nv.getNgaySinh().format(dateFormatter));\n   389\t    }\n   390\t\n   391\t    private void initializeComboBox() {\n   392\t        ObservableList<String> list = FXCollections.observableArrayList(\n   393\t            \"Sản phẩm\", \"Tài khoản\", \"Hoá đơn\", \"Phiếu nhập\", \"Nhân viên\", \"Khách hàng\"\n   394\t        );\n   395\t        ccb_GiaoDien.setItems(list);\n   396\t        ccb_GiaoDien.setValue(\"Nhân viên\");\n   397\t        setupComboBoxHandler();\n   398\t    }\n   399\t\n   400\t    private void setupComboBoxHandler() {\n   401\t        ccb_GiaoDien.setOnAction(event -> {\n   402\t            String selectedValue = ccb_GiaoDien.getValue();\n   403\t            if (selectedValue.equals(\"Nhân viên\")) {\n   404\t                return;\n   405\t            }\n   406\t            \n   407\t            try {\n   408\t                String fxmlFile = switch (selectedValue) {\n   409\t                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n   410\t                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n   411\t                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n   412\t                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n   413\t                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n   414\t                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n   415\t                };\n   416\t                \n   417\t                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n   418\t                Scene scene = new Scene(loader.load());\n   419\t                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n   420\t                stage.setScene(scene);\n   421\t                stage.show();\n   422\t                \n   423\t            } catch (Exception e) {\n   424\t                showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n   425\t                ccb_GiaoDien.setValue(\"Nhân viên\");\n   426\t            }\n   427\t        });\n   428\t    }\n   429\t\n   430\t    @FXML\n   431\t    void timKiem(MouseEvent event) {\n   432\t        String maNhanVien = txt_maNV.getText();\n   433\t        App.maTraCuu = maNhanVien;\n   434\t        NhanVien nhanVien = new NhanVien_dao().readNhanVien(maNhanVien);\n   435\t        lb_maNV.setText(nhanVien.getMaNV());\n   436\t        lb_tenNV.setText(nhanVien.getTenNV());\n   437\t        lb_cccd.setText(nhanVien.getCccd());\n   438\t        lb_sdt.setText(nhanVien.getSdt());\n   439\t        lb_email.setText(nhanVien.getEmail());\n   440\t        lb_diaChi.setText(nhanVien.getDiaChi());\n   441\t        lb_chucVu.setText(nhanVien.getChucVu().toString());\n   442\t        lb_ngaySinh.setText(nhanVien.getNgaySinh().format(dateFormatter));\n   443\t        highlightMatchingRow(maNhanVien);\n   444\t    }\n   445\t\n   446\t    private void highlightMatchingRow(String maNhanVien) {\n   447\t        if (maNhanVien == null || maNhanVien.isEmpty()) {\n   448\t            return;\n   449\t        }\n   450\t\n   451\t        for (int i = 0; i < tableNhanVien.getItems().size(); i++) {\n   452\t            NhanVien nhanVien = tableNhanVien.getItems().get(i);\n   453\t            if (nhanVien.getMaNV().equals(maNhanVien)) {  // Sửa lại điều kiện so sánh\n   454\t                // Select the row\n   455\t                tableNhanVien.getSelectionModel().select(i);\n   456\t                // Scroll to the row\n   457\t                tableNhanVien.scrollTo(i);\n   458\t                // Request focus\n   459\t                tableNhanVien.requestFocus();\n   460\t                break;\n   461\t            }\n   462\t        }\n   463\t    }\n   464\t\n   465\t    private void showError(String title, String content) {\n   466\t        Alert alert = new Alert(Alert.AlertType.ERROR);\n   467\t        alert.setTitle(title);\n   468\t        alert.setHeaderText(null);\n   469\t        alert.setContentText(content);\n   470\t        alert.showAndWait();\n   471\t    }\n   472\t\n   473\t    @FXML\n   474\t    void toQLHoaDon(MouseEvent event) {\n   475\t        try {\n   476\t            App.setRoot(\"QuanLyHoaDon_gui\");\n   477\t        } catch (IOException e) {\n   478\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý hóa đơn\");\n   479\t        }\n   480\t    }\n   481\t\n   482\t    @FXML\n   483\t    void toQLKhachHang(MouseEvent event) {\n   484\t        try {\n   485\t            App.setRoot(\"QuanLyKhachHang_gui\");\n   486\t        } catch (IOException e) {\n   487\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý khách hàng\");\n   488\t        }\n   489\t    }\n   490\t\n   491\t    @FXML\n   492\t    void toQLNhanVien(MouseEvent event) {\n   493\t        try {\n   494\t            App.setRoot(\"QuanLyNhanVien_gui\");\n   495\t        } catch (IOException e) {\n   496\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý nhân viên\");\n   497\t        }\n   498\t    }\n   499\t\n   500\t    @FXML\n   501\t    void toQLPhieuNhap(MouseEvent event) {\n   502\t        try {\n   503\t            App.setRoot(\"QuanLyPhieuNhap_gui\");\n   504\t        } catch (IOException e) {\n   505\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý phiếu nhập\");\n   506\t        }\n   507\t    }\n   508\t\n   509\t    @FXML\n   510\t    void toQLSanPham(MouseEvent event) {\n   511\t        try {\n   512\t            App.setRoot(\"QuanLySanPham_gui\");\n   513\t        } catch (IOException e) {\n   514\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý sản phẩm\");\n   515\t        }\n   516\t    }\n   517\t\n   518\t    @FXML\n   519\t    void toQLTaiKhoan(MouseEvent event) {\n   520\t        try {\n   521\t            App.setRoot(\"QuanLyTaiKhoan_gui\");\n   522\t        } catch (IOException e) {\n   523\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý tài khoản\");\n   524\t        }\n   525\t    }\n   526\t\n   527\t    @FXML\n   528\t    void toTKDoanhThu(MouseEvent event) {\n   529\t        try {\n   530\t            App.setRoot(\"ThongKeDoanhThu_gui\");\n   531\t        } catch (IOException e) {\n   532\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê doanh thu\");\n   533\t        }\n   534\t    }\n   535\t\n   536\t    @FXML\n   537\t    void toTKSanPham(MouseEvent event) {\n   538\t        try {\n   539\t            App.setRoot(\"ThongKeSanPham_gui\");\n   540\t        } catch (IOException e) {\n   541\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê sản phẩm\");\n   542\t        }\n   543\t    }\n   544\t}\n   545\t\nTotal lines in file: 545\n","isError":false,"requestId":""}},"4256fef8-4770-40fc-b14a-160cd3fb95c1;toolu_vrtx_01NA5ChmBNHGbr69FD9Amsc9":{"phase":5,"result":{"text":"Successfully edited the file src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n   396\t        ccb_GiaoDien.setValue(\"Nhân viên\");\n   397\t        setupComboBoxHandler();\n   398\t    }\n   399\t\n   400\t    private void setupComboBoxHandler() {\n   401\t        ccb_GiaoDien.setOnAction(event -> {\n   402\t            String selectedValue = ccb_GiaoDien.getValue();\n   403\t            if (selectedValue.equals(\"Nhân viên\")) {\n   404\t                return;\n   405\t            }\n   406\t\n   407\t            try {\n   408\t                String fxmlFile = switch (selectedValue) {\n   409\t                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n   410\t                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n   411\t                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n   412\t                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n   413\t                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n   414\t                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n   415\t                };\n   416\t\n   417\t                loadFXML(\"/fxml/\" + fxmlFile + \".fxml\");\n   418\t\n   419\t            } catch (Exception e) {\n   420\t                showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n   421\t                ccb_GiaoDien.setValue(\"Nhân viên\");\n   422\t            }\n   423\t        });\n   424\t    }\n   425\t\n   426\t    private void loadFXML(String fxmlPath) throws Exception {\n   427\t        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n   428\t        Scene scene = new Scene(root);\n   429\t        Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n   430\t        stage.setScene(scene);\n   431\t        stage.show();\n   432\t    }\n   433\t\n   434\t    @FXML\n   435\t    void timKiem(MouseEvent event) {\n   436\t        String maNhanVien = txt_maNV.getText();\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","isError":false,"requestId":""}},"91820cc3-ba47-4bdc-93a2-7ab4c3b8820d;toolu_vrtx_01SBqtC4Pdc4FfrbCbBcucpS":{"phase":5,"result":{"text":"Successfully edited the file src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n   473\t        alert.setContentText(content);\n   474\t        alert.showAndWait();\n   475\t    }\n   476\t\n   477\t    @FXML\n   478\t    void toQLHoaDon(MouseEvent event) {\n   479\t        try {\n   480\t            loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n   481\t        } catch (Exception e) {\n   482\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý hóa đơn\");\n   483\t        }\n   484\t    }\n   485\t\n   486\t    @FXML\n   487\t    void toQLKhachHang(MouseEvent event) {\n   488\t        try {\n   489\t            loadFXML(\"/fxml/QL_KhachHang_gui.fxml\");\n   490\t        } catch (Exception e) {\n   491\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý khách hàng\");\n   492\t        }\n   493\t    }\n   494\t\n   495\t    @FXML\n   496\t    void toQLNhanVien(MouseEvent event) {\n   497\t        try {\n   498\t            loadFXML(\"/fxml/QL_NhanVien_gui.fxml\");\n   499\t        } catch (Exception e) {\n   500\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý nhân viên\");\n   501\t        }\n   502\t    }\n   503\t\n   504\t    @FXML\n   505\t    void toQLPhieuNhap(MouseEvent event) {\n   506\t        try {\n   507\t            loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n   508\t        } catch (Exception e) {\n   509\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý phiếu nhập\");\n   510\t        }\n   511\t    }\n   512\t\n   513\t    @FXML\n   514\t    void toQLSanPham(MouseEvent event) {\n   515\t        try {\n   516\t            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n   517\t        } catch (Exception e) {\n   518\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý sản phẩm\");\n   519\t        }\n   520\t    }\n   521\t\n   522\t    @FXML\n   523\t    void toQLTaiKhoan(MouseEvent event) {\n   524\t        try {\n   525\t            loadFXML(\"/fxml/QL_TaiKhoan_gui.fxml\");\n   526\t        } catch (Exception e) {\n   527\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý tài khoản\");\n   528\t        }\n   529\t    }\n   530\t\n   531\t    @FXML\n   532\t    void toTKDoanhThu(MouseEvent event) {\n   533\t        try {\n   534\t            loadFXML(\"/fxml/ThongKeDoanhThu_gui.fxml\");\n   535\t        } catch (Exception e) {\n   536\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê doanh thu\");\n   537\t        }\n   538\t    }\n   539\t\n   540\t    @FXML\n   541\t    void toTKSanPham(MouseEvent event) {\n   542\t        try {\n   543\t            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n   544\t        } catch (Exception e) {\n   545\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê sản phẩm\");\n   546\t        }\n   547\t    }\n   548\t}\n   549\t\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","isError":false,"requestId":""}},"e130c372-2c4e-4e21-8b9f-026dca9ebc5c;toolu_vrtx_01M4uJd72dyG86CkMb6hPQJ3":{"phase":5,"result":{"text":"The following code sections were retrieved:\nPath: src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java\n...\n\npublic class TraCuuTaiKhoan_controller implements Initializable {\n\n    @FXML\n    private VBox banHangSubMenuList;\n\n    @FXML\n    private VBox banHangSubVBox;\n\n    @FXML\n    private Button btn_TraCuu;\n\n    @FXML\n    private Button btn_qlTaiKhoan;\n\n    @FXML\n    private ComboBox<String> ccb_GiaoDien;\n\n    @FXML\n    private TableColumn<TaiKhoan, String> cl_maTK;\n\n    @FXML\n    private TableColumn<TaiKhoan, String> cl_mk;\n\n    @FXML\n    private TableColumn<TaiKhoan, String> cl_stt;\n\n    @FXML\n    private TableColumn<TaiKhoan, String> cl_tenDN;\n\n    @FXML\n    private TableColumn<TaiKhoan, String> cl_tgdn;\n\n    @FXML\n    private TableColumn<TaiKhoan, String> cl_maNV;\n\n    @FXML\n    private ImageView img_HoaDon;\n\n    @FXML\n    private ImageView img_gioHang;\n\n    @FXML\n    private ImageView img_hoaDon;\n\n    @FXML\n    private ImageView img_nhanVien;\n\n    @FXML\n    private ImageView img_phieuNhap;\n\n    @FXML\n    private ImageView img_quanLy;\n\n    @FXML\n    private ImageView img_sanPham;\n\n    @FXML\n    private ImageView img_taiKhoan;\n\n    @FXML\n    private ImageView img_taiKhoan1;\n\n    @FXML\n    private ImageView img_thongKe;\n\n    @FXML\n    private ImageView img_thongKeDoanhThu;\n\n    @FXML\n    private ImageView img_thongKeSanPham;\n\n    @FXML\n    private ImageView img_timKiem;\n\n    @FXML\n    private Label lb_HoaDon;\n\n    @FXML\n    private Label lb_gioHang;\n\n    @FXML\n    private Label lb_hoaDon;\n\n    @FXML\n    private Label lb_maTK;\n\n    @FXML\n    private Label lb_mk;\n\n    @FXML\n    private Label lb_nhanVien;\n\n    @FXML\n    private Label lb_phieuNhap;\n\n    @FXML\n    private Label lb_quanLy;\n\n    @FXML\n    private Label lb_sanPham;\n\n    @FXML\n    private Label lb_taiKhoan;\n\n    @FXML\n    private Label lb_tenDN;\n\n    @FXML\n    private Label lb_tgdn;\n...\n\n    @FXML\n    private VBox timKiemSubVBox;\n\n    @FXML\n    private TextField txt_maTK;\n    \n    @FXML\n    private TableView<TaiKhoan> tableTaiKhoan;\n\n    @FXML\n    private VBox vBox;\n\n    Map<VBox,VBox> map = new HashMap<VBox,VBox>();\n    public void addMenusToMap() {\n        addMenusToMapImpl();\n    }\n\n    private void addMenusToMapImpl() {\n        map.put(banHangSubVBox, banHangSubMenuList);\n        map.put(quanLySubVBox, quanLySubMenuList);\n        map.put(timKiemSubVBox, timKiemSubMenuList);\n        map.put(thongKeSubVBox,thongKeSubMenuList);\n\n        /**\n         * Remove the components from VBox on load of stage\n         */\n        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n            entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n    /**\n     * Menu slider\n     * @param menu\n     * @param subMenu\n     */\n    public void toolsSlider(VBox menu,VBox subMenu){\n        toolsSliderImpl(menu,subMenu);\n    }\n\n    private void toolsSliderImpl(VBox menu,VBox subMenu) {\n        if(menu.getChildren().contains(subMenu)){\n            final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n            transition.setFromValue(0.5);\n            transition.setToValue(1);\n            transition.setInterpolator(Interpolator.EASE_IN);\n            menu.getChildren().remove(subMenu);\n            transition.play();\n        }else{\n            final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n            transition.setFromValue(0.5);\n            transition.setToValue(1);\n            transition.setInterpolator(Interpolator.EASE_IN);\n            menu.getChildren().add(subMenu);\n            transition.play();\n        }\n    }\n    public void removeOtherMenus(VBox menu){\n        removeOtherMenusImpl(menu);\n    }\n    private void removeOtherMenusImpl(VBox menu) {\n        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n            if(!entry.getKey().equals(menu))\n                entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n    @FXML\n    void handleGioHangClick(MouseEvent event) {\n        // Hiển thị menu bán hàng\n        toolsSlider(banHangSubVBox, banHangSubMenuList);\n        removeOtherMenus(banHangSubVBox);\n    }\n\n    @FXML\n    void handleQuanLyClick(MouseEvent event) {\n        toolsSlider(quanLySubVBox,quanLySubMenuList);\n        removeOtherMenus(quanLySubVBox);\n    }\n\n    @FXML\n    void handleThongKeClick(MouseEvent event) {\n        toolsSlider(thongKeSubVBox,thongKeSubMenuList);\n        removeOtherMenus(thongKeSubVBox);\n    }\n\n    @FXML\n    void handleTimKiemClick(MouseEvent event) {\n        // Hiển thị menu tìm kiếm\n        toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n        removeOtherMenus(timKiemSubVBox);\n    }\n\n    @FXML\n    void timKiem(MouseEvent event) {\n\n        String maTaiKhoan = txt_maTK.getText();\n        App.maTraCuu = maTaiKhoan;\n        TaiKhoan tk = new TaiKhoan_dao().read(maTaiKhoan);\n        lb_maTK.setText(tk.getMaTaiKhoan());\n        lb_tenDN.setText(tk.getTenDangNhap());\n        lb_mk.setText(tk.getMatKhau());\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\n        lb_tgdn.setText(tk.getThoiGianDangNhap().format(formatter));\n        highlightMatchingRow(maTaiKhoan);\n    }\n\n    private void highlightMatchingRow(String maTaiKhoan) {\n        if (maTaiKhoan == null || maTaiKhoan.isEmpty()) {\n            return;\n        }\n\n        for (int i = 0; i < tableTaiKhoan.getItems().size(); i++) {\n            TaiKhoan taiKhoan = tableTaiKhoan.getItems().get(i);\n            if (taiKhoan.getMaTaiKhoan().equals(maTaiKhoan)) {  // Sửa lại điều kiện so sánh\n                // Select the row\n                tableTaiKhoan.getSelectionModel().select(i);\n                // Scroll to the row\n                tableTaiKhoan.scrollTo(i);\n                // Request focus\n                tableTaiKhoan.requestFocus();\n                break;\n            }\n        }\n    }\n    @Override\n    public void initialize(URL arg0, ResourceBundle arg1) {\n        // Khởi tạo ComboBox\n        initializeComboBox();\n\n        // Khởi tạo các cột cho bảng\n        initializeTableColumns();\n\n        // Load dữ liệu vào bảng\n        loadTableData();\n\n        // Thêm sự kiện click cho bảng\n        setupTableClickEvent();\n    }\n\n    private void initializeComboBox() {\n        ObservableList<String> list = FXCollections.observableArrayList(\n                \"Sản phẩm\", \"Tài khoản\", \"Hoá đơn\", \"Phiếu nhập\", \"Nhân viên\", \"Khách hàng\"\n        );\n        ccb_GiaoDien.setItems(list);\n        ccb_GiaoDien.setValue(\"Nhân viên\");\n        setupComboBoxHandler();\n    }\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Tài khoản\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n                \n            } catch (Exception e) {\n                showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n                ccb_GiaoDien.setValue(\"Tài khoản\");\n            }\n        });\n    }\n\n    private void showError(String title, String content) {\n        Alert alert = new Alert(Alert.AlertType.ERROR);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n\n    private void initializeTableColumns() {\n        // Cột STT\n        cl_stt.setCellFactory(col -> new TableCell<TaiKhoan, String>() {\n            @Override\n            protected void updateItem(String item, boolean empty) {\n                super.updateItem(item, empty);\n                if (empty) {\n                    setText(null);\n                } else {\n                    setText(String.valueOf(getIndex() + 1));\n                }\n            }\n        });\n\n        // Các cột khác\n        cl_maTK.setCellValueFactory(new PropertyValueFactory<>(\"maTaiKhoan\"));\n        cl_tenDN.setCellValueFactory(new PropertyValueFactory<>(\"tenDangNhap\"));\n        cl_mk.setCellValueFactory(new PropertyValueFactory<>(\"matKhau\"));\n        // Định dạng ngày tháng\n        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");\n\n        // Cột Ngày sản xuất\n        cl_tgdn.setCellValueFactory(cellData -> {\n            LocalDateTime date = cellData.getValue().getThoiGianDangNhap();\n            if (date == null) return new SimpleStringProperty(\"\");\n            return new SimpleStringProperty(date.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\")));\n        });\n        cl_maNV.setCellValueFactory(cellData ->\n                new SimpleStringProperty(cellData.getValue().getNhanVien().getMaNV()));\n    }\n\n    private void loadTableData() {\n        try {\n            TaiKhoan_dao taiKhoanDao = new TaiKhoan_dao();\n            List<TaiKhoan> dssp = taiKhoanDao.readAll();\n            ObservableList<TaiKhoan> data = FXCollections.observableArrayList(dssp);\n            tableTaiKhoan.setItems(data);\n        } catch (Exception e) {\n            e.printStackTrace();\n            Alert alert = new Alert(Alert.AlertType.ERROR);\n            alert.setTitle(\"Lỗi\");\n            alert.setHeaderText(\"Lỗi khi tải dữ liệu\");\n            alert.setContentText(\"Đã xảy ra lỗi khi tải dữ liệu. Vui lòng thử lại sau.\");\n            alert.showAndWait();\n        }\n    }\n\n    private void setupTableClickEvent() {\n        tableTaiKhoan.setOnMouseClicked(event -> {\n            TaiKhoan selectedTaiKhoan = tableTaiKhoan.getSelectionModel().getSelectedItem();\n            if (selectedTaiKhoan != null) {\n                updateLabels(selectedTaiKhoan);\n            }\n        });\n    }\n\n    private void updateLabels(TaiKhoan tk) {\n        lb_maTK.setText(tk.getMaTaiKhoan());\n        lb_tenDN.setText(tk.getTenDangNhap());\n        lb_mk.setText(tk.getMatKhau());\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"HH:mm dd/MM/yyyy\");\n        lb_tgdn.setText(tk.getThoiGianDangNhap().format(formatter));\n        lb_maNV.setText(String.valueOf(tk.getNhanVien().getMaNV()));\n\n    }\n    @FXML\n    void toQLHoaDon(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyHoaDon_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý hóa đơn\");\n        }\n    }\n\n    @FXML\n    void toQLKhachHang(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyKhachHang_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý khách hàng\");\n        }\n    }\n\n    @FXML\n    void toQLNhanVien(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyNhanVien_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý nhân viên\");\n        }\n    }\n\n    @FXML\n    void toQLPhieuNhap(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyPhieuNhap_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý phiếu nhập\");\n        }\n    }\n\n    @FXML\n    void toQLSanPham(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLySanPham_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý sản phẩm\");\n        }\n    }\n\n    @FXML\n    void toQLTaiKhoan(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyTaiKhoan_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý tài khoản\");\n        }\n    }\n\n    @FXML\n    void toTKDoanhThu(MouseEvent event) {\n        try {\n            App.setRoot(\"ThongKeDoanhThu_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê doanh thu\");\n        }\n    }\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            App.setRoot(\"ThongKeSanPham_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê sản phẩm\");\n        }\n    }\n\n}\n...\nPath: src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java\n...\n\n    private void initializeComboBox() {\n        ObservableList<String> list = FXCollections.observableArrayList(\n                \"Sản phẩm\", \"Tài khoản\", \"Hoá đơn\", \"Phiếu nhập\", \"Nhân viên\", \"Khách hàng\"\n        );\n        ccb_GiaoDien.setItems(list);\n        ccb_GiaoDien.setValue(\"Khách hàng\");\n        setupComboBoxHandler();\n    }\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Khách hàng\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java\n...\n\n    private void initializeComboBox() {\n        ObservableList<String> list = FXCollections.observableArrayList(\n                \"Sản phẩm\", \"Tài khoản\", \"Hoá đơn\", \"Phiếu nhập\", \"Nhân viên\", \"Khách hàng\"\n        );\n        ccb_GiaoDien.setItems(list);\n        ccb_GiaoDien.setValue(\"Hoá đơn\");\n        setupComboBoxHandler();\n    }\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Hoá đơn\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/TraCuu_controller.java\n...\n\n    private void initializeComboBox() {\n        ObservableList<String> list = FXCollections.observableArrayList(\n                \"Sản phẩm\", \"Tài khoản\", \"Hoá đơn\", \"Phiếu nhập\", \"Nhân viên\", \"Khách hàng\"\n        );\n        cbb_GiaoDien.setItems(list);\n        cbb_GiaoDien.setValue(\"Sản phẩm\");\n        setupComboBoxHandler();\n    }\n\n    private void setupComboBoxHandler() {\n        cbb_GiaoDien.setOnAction(event -> {\n            String selectedValue = cbb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Sản phẩm\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) cbb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Phiếu nhập\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Nhân viên\")) {\n                return;\n            }\n\n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n\n                loadFXML(\"/fxml/\" + fxmlFile + \".fxml\");\n\n            } catch (Exception e) {\n                showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n                ccb_GiaoDien.setValue(\"Nhân viên\");\n            }\n        });\n    }\n...\n","isError":false,"requestId":""}},"8c0bfa62-fd53-435a-906a-77a5611830fc;toolu_vrtx_01VVWvdLzXY9J2rkTjGRvoPM":{"phase":5,"result":{"text":"Successfully edited the file src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n   353\t        ccb_GiaoDien.setValue(\"Nhân viên\");\n   354\t        setupComboBoxHandler();\n   355\t    }\n   356\t\n   357\t    private void setupComboBoxHandler() {\n   358\t        ccb_GiaoDien.setOnAction(event -> {\n   359\t            String selectedValue = ccb_GiaoDien.getValue();\n   360\t            if (selectedValue.equals(\"Tài khoản\")) {\n   361\t                return;\n   362\t            }\n   363\t\n   364\t            try {\n   365\t                String fxmlFile = switch (selectedValue) {\n   366\t                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n   367\t                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n   368\t                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n   369\t                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n   370\t                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n   371\t                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n   372\t                };\n   373\t\n   374\t                loadFXML(\"/fxml/\" + fxmlFile + \".fxml\");\n   375\t\n   376\t            } catch (Exception e) {\n   377\t                showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n   378\t                ccb_GiaoDien.setValue(\"Tài khoản\");\n   379\t            }\n   380\t        });\n   381\t    }\n   382\t\n   383\t    private void loadFXML(String fxmlPath) throws Exception {\n   384\t        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n   385\t        Scene scene = new Scene(root);\n   386\t        Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n   387\t        stage.setScene(scene);\n   388\t        stage.show();\n   389\t    }\n   390\t\n   391\t    private void showError(String title, String content) {\n   392\t        Alert alert = new Alert(Alert.AlertType.ERROR);\n   393\t        alert.setTitle(title);\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","isError":false,"requestId":""}},"b4b779c3-b41f-434e-9a39-59408197c20f;toolu_vrtx_01TKJtwbGEwNdCfkUktKxuwi":{"phase":5,"result":{"text":"Successfully edited the file src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n   460\t        lb_tgdn.setText(tk.getThoiGianDangNhap().format(formatter));\n   461\t        lb_maNV.setText(String.valueOf(tk.getNhanVien().getMaNV()));\n   462\t\n   463\t    }\n   464\t    @FXML\n   465\t    void toQLHoaDon(MouseEvent event) {\n   466\t        try {\n   467\t            loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n   468\t        } catch (Exception e) {\n   469\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý hóa đơn\");\n   470\t        }\n   471\t    }\n   472\t\n   473\t    @FXML\n   474\t    void toQLKhachHang(MouseEvent event) {\n   475\t        try {\n   476\t            loadFXML(\"/fxml/QL_KhachHang_gui.fxml\");\n   477\t        } catch (Exception e) {\n   478\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý khách hàng\");\n   479\t        }\n   480\t    }\n   481\t\n   482\t    @FXML\n   483\t    void toQLNhanVien(MouseEvent event) {\n   484\t        try {\n   485\t            loadFXML(\"/fxml/QL_NhanVien_gui.fxml\");\n   486\t        } catch (Exception e) {\n   487\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý nhân viên\");\n   488\t        }\n   489\t    }\n   490\t\n   491\t    @FXML\n   492\t    void toQLPhieuNhap(MouseEvent event) {\n   493\t        try {\n   494\t            loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n   495\t        } catch (Exception e) {\n   496\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý phiếu nhập\");\n   497\t        }\n   498\t    }\n   499\t\n   500\t    @FXML\n   501\t    void toQLSanPham(MouseEvent event) {\n   502\t        try {\n   503\t            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n   504\t        } catch (Exception e) {\n   505\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý sản phẩm\");\n   506\t        }\n   507\t    }\n   508\t\n   509\t    @FXML\n   510\t    void toQLTaiKhoan(MouseEvent event) {\n   511\t        try {\n   512\t            loadFXML(\"/fxml/QL_TaiKhoan_gui.fxml\");\n   513\t        } catch (Exception e) {\n   514\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý tài khoản\");\n   515\t        }\n   516\t    }\n   517\t\n   518\t    @FXML\n   519\t    void toTKDoanhThu(MouseEvent event) {\n   520\t        try {\n   521\t            loadFXML(\"/fxml/ThongKeDoanhThu_gui.fxml\");\n   522\t        } catch (Exception e) {\n   523\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê doanh thu\");\n   524\t        }\n   525\t    }\n   526\t\n   527\t    @FXML\n   528\t    void toTKSanPham(MouseEvent event) {\n   529\t        try {\n   530\t            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n   531\t        } catch (Exception e) {\n   532\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê sản phẩm\");\n   533\t        }\n   534\t    }\n   535\t\n   536\t}\n   537\t\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","isError":false,"requestId":""}},"d2675e58-1566-4b72-9d92-3390e6853481;toolu_vrtx_01JWgi2KtgkUJcEerVLDw7T4":{"phase":5,"result":{"text":"Here's the result of running `cat -n` on src/main/java/iuh/fit/controller/TraCuu_controller.java:\n   400\t            } catch (Exception e) {\n   401\t                showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n   402\t                cbb_GiaoDien.setValue(\"Sản phẩm\");\n   403\t            }\n   404\t        });\n   405\t    }\n   406\t\n   407\t    private void showError(String title, String content) {\n   408\t        Alert alert = new Alert(Alert.AlertType.ERROR);\n   409\t        alert.setTitle(title);\n   410\t        alert.setHeaderText(null);\n   411\t        alert.setContentText(content);\n   412\t        alert.showAndWait();\n   413\t    }\n   414\t\n   415\t    private void initializeTableColumns() {\n   416\t        // Cột STT\n   417\t        cl_txt.setCellFactory(col -> new TableCell<SanPham, String>() {\n   418\t            @Override\n   419\t            protected void updateItem(String item, boolean empty) {\n   420\t                super.updateItem(item, empty);\n   421\t                if (empty) {\n   422\t                    setText(null);\n   423\t                } else {\n   424\t                    setText(String.valueOf(getIndex() + 1));\n   425\t                }\n   426\t            }\n   427\t        });\n   428\t\n   429\t        // Các cột khác\n   430\t        cl_maSP.setCellValueFactory(new PropertyValueFactory<>(\"maSP\"));\nTotal lines in file: 580\n","isError":false,"requestId":""}},"7fc40a4d-879b-4df8-a04a-135ffd8b9f6f;toolu_vrtx_01EMQkaBPuS9w81SXviPwTkK":{"phase":5,"result":{"text":"Here's the result of running `cat -n` on src/main/java/iuh/fit/controller/TraCuu_controller.java:\n   370\t                \"Sản phẩm\", \"Tài khoản\", \"Hoá đơn\", \"Phiếu nhập\", \"Nhân viên\", \"Khách hàng\"\n   371\t        );\n   372\t        cbb_GiaoDien.setItems(list);\n   373\t        cbb_GiaoDien.setValue(\"Sản phẩm\");\n   374\t        setupComboBoxHandler();\n   375\t    }\n   376\t\n   377\t    private void setupComboBoxHandler() {\n   378\t        cbb_GiaoDien.setOnAction(event -> {\n   379\t            String selectedValue = cbb_GiaoDien.getValue();\n   380\t            if (selectedValue.equals(\"Sản phẩm\")) {\n   381\t                return;\n   382\t            }\n   383\t            \n   384\t            try {\n   385\t                String fxmlFile = switch (selectedValue) {\n   386\t                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n   387\t                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n   388\t                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n   389\t                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n   390\t                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n   391\t                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n   392\t                };\n   393\t                \n   394\t                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n   395\t                Scene scene = new Scene(loader.load());\n   396\t                Stage stage = (Stage) cbb_GiaoDien.getScene().getWindow();\n   397\t                stage.setScene(scene);\n   398\t                stage.show();\n   399\t                \n   400\t            } catch (Exception e) {\n   401\t                showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n   402\t                cbb_GiaoDien.setValue(\"Sản phẩm\");\n   403\t            }\n   404\t        });\n   405\t    }\nTotal lines in file: 580\n","isError":false,"requestId":""}},"10dbf01c-d7b8-4711-b61d-dbf7e698acda;toolu_vrtx_014b2krgA8mFNpEuHfnghw2T":{"phase":5,"result":{"text":"Successfully edited the file src/main/java/iuh/fit/controller/TraCuu_controller.java.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n   373\t        cbb_GiaoDien.setValue(\"Sản phẩm\");\n   374\t        setupComboBoxHandler();\n   375\t    }\n   376\t\n   377\t    private void setupComboBoxHandler() {\n   378\t        cbb_GiaoDien.setOnAction(event -> {\n   379\t            String selectedValue = cbb_GiaoDien.getValue();\n   380\t            if (selectedValue.equals(\"Sản phẩm\")) {\n   381\t                return;\n   382\t            }\n   383\t\n   384\t            try {\n   385\t                String fxmlFile = switch (selectedValue) {\n   386\t                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n   387\t                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n   388\t                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n   389\t                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n   390\t                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n   391\t                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n   392\t                };\n   393\t\n   394\t                loadFXML(\"/fxml/\" + fxmlFile + \".fxml\");\n   395\t\n   396\t            } catch (Exception e) {\n   397\t                showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n   398\t                cbb_GiaoDien.setValue(\"Sản phẩm\");\n   399\t            }\n   400\t        });\n   401\t    }\n   402\t\n   403\t    private void loadFXML(String fxmlPath) throws Exception {\n   404\t        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n   405\t        Scene scene = new Scene(root);\n   406\t        Stage stage = (Stage) cbb_GiaoDien.getScene().getWindow();\n   407\t        stage.setScene(scene);\n   408\t        stage.show();\n   409\t    }\n   410\t\n   411\t    private void showError(String title, String content) {\n   412\t        Alert alert = new Alert(Alert.AlertType.ERROR);\n   413\t        alert.setTitle(title);\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","isError":false,"requestId":""}},"ed4e0b49-3e28-4c77-bfbe-3e27c19f5146;toolu_vrtx_019oE5icCiLcL6y3UwTNuB5q":{"phase":5,"result":{"text":"The following code sections were retrieved:\nPath: src/main/java/iuh/fit/controller/TraCuuHoaDon_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Hoá đơn\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\n\n\n    @FXML\n    void toQLHoaDon(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyHoaDon_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý hóa đơn\");\n        }\n    }\n\n    @FXML\n    void toQLKhachHang(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyKhachHang_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý khách hàng\");\n        }\n    }\n\n    @FXML\n    void toQLNhanVien(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyNhanVien_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý nhân viên\");\n        }\n    }\n\n    @FXML\n    void toQLPhieuNhap(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyPhieuNhap_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý phiếu nhập\");\n        }\n    }\n\n    @FXML\n    void toQLSanPham(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLySanPham_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý sản phẩm\");\n        }\n    }\n\n    @FXML\n    void toQLTaiKhoan(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyTaiKhoan_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý tài khoản\");\n        }\n    }\n\n    @FXML\n    void toTKDoanhThu(MouseEvent event) {\n        try {\n            App.setRoot(\"ThongKeDoanhThu_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê doanh thu\");\n        }\n    }\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            App.setRoot(\"ThongKeSanPham_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê sản phẩm\");\n        }\n    }\n    \n}\n...\nPath: src/main/java/iuh/fit/controller/TraCuuPhieuNhap_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Phiếu nhập\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\n    @FXML\n    void toQLHoaDon(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyHoaDon_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý hóa đơn\");\n        }\n    }\n\n    @FXML\n    void toQLKhachHang(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyKhachHang_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý khách hàng\");\n        }\n    }\n\n    @FXML\n    void toQLNhanVien(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyNhanVien_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý nhân viên\");\n        }\n    }\n...\nPath: src/main/java/iuh/fit/controller/TraCuu_controller.java\npackage iuh.fit.controller;\n...\n\n    @FXML\n    private TableColumn<SanPham, String> cl_tgcn;\n\n    @FXML\n    private TableColumn<SanPham, String> cl_txt;\n\n    @FXML\n    private ImageView img_HoaDon;\n\n    @FXML\n    private ImageView img_gioHang;\n\n    @FXML\n    private ImageView img_hoaDon;\n\n    @FXML\n    private ImageView img_nhanVien;\n\n    @FXML\n    private ImageView img_phieuNhap;\n\n    @FXML\n    private ImageView img_quanLy;\n\n    @FXML\n    private ImageView img_sanPham;\n\n    @FXML\n    private ImageView img_taiKhoan;\n\n    @FXML\n    private ImageView img_taiKhoan1;\n\n    @FXML\n    private ImageView img_thongKe;\n\n    @FXML\n    private ImageView img_thongKeDoanhThu;\n\n    @FXML\n    private ImageView img_thongKeSanPham;\n\n    @FXML\n    private ImageView img_timKiem;\n\n    @FXML\n    private Label lb_HoaDon;\n\n    @FXML\n    private Label lb_giaBan;\n\n    @FXML\n    private Label lb_giaNhap;\n\n    @FXML\n    private Label lb_hsd;\n\n    @FXML\n    private Label lb_loaiHang;\n\n    @FXML\n    private Label lb_maSP;\n\n    @FXML\n    private Label lb_ncc;\n\n    @FXML\n    private Label lb_nsx;\n\n    @FXML\n    private Label lb_slt;\n\n    @FXML\n    private Label lb_tenSP;\n\n    @FXML\n    private Label lb_tgcn;\n\n    @FXML\n    private Label lb_thongKe;\n\n    @FXML\n    private Label lb_thongKeDoanhThu;\n\n    @FXML\n    private Label lb_thongKeSanPham;\n\n    @FXML\n    private Label lb_timKiem;\n\n    @FXML\n    private Pane p_HoaDon;\n\n    @FXML\n    private Pane p_gioHang;\n\n    @FXML\n    private Pane p_hoaDon;\n\n    @FXML\n    private Pane p_nhanVien;\n\n    @FXML\n    private Pane p_phieuNhap;\n\n    @FXML\n    private Pane p_quanLy;\n\n    @FXML\n    private Pane p_sanPham;\n\n    @FXML\n    private Pane p_taiKhoan;\n\n    @FXML\n    private Pane p_thongKe;\n\n    @FXML\n    private Pane p_thongKeDoanhThu;\n\n    @FXML\n    private Pane p_thongKeSanPham;\n\n    @FXML\n    private Pane p_timKiem;\n\n    @FXML\n    private VBox quanLySubMenuList;\n\n    @FXML\n    private VBox quanLySubVBox;\n\n    @FXML\n    private VBox thongKeSubMenuList;\n\n    @FXML\n    private VBox thongKeSubVBox;\n\n    @FXML\n    private VBox timKiemSubMenuList;\n\n    @FXML\n    private VBox timKiemSubVBox;\n\n    @FXML\n    private TextField txt_maSP;\n\n    @FXML\n    private TableView<SanPham> tableSanPham;\n\n    @FXML\n    private VBox vBox;\n\n    Map<VBox,VBox> map = new HashMap<VBox,VBox>();\n    public void addMenusToMap() {\n        addMenusToMapImpl();\n    }\n\n    private void addMenusToMapImpl() {\n        map.put(banHangSubVBox, banHangSubMenuList);\n        map.put(quanLySubVBox, quanLySubMenuList);\n        map.put(timKiemSubVBox, timKiemSubMenuList);\n        map.put(thongKeSubVBox,thongKeSubMenuList);\n\n        /**\n         * Remove the components from VBox on load of stage\n         */\n        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n            entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n    /**\n     * Menu slider\n     * @param menu\n     * @param subMenu\n     */\n    public void toolsSlider(VBox menu,VBox subMenu){\n        toolsSliderImpl(menu,subMenu);\n    }\n\n    private void toolsSliderImpl(VBox menu,VBox subMenu) {\n        if(menu.getChildren().contains(subMenu)){\n            final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n            transition.setFromValue(0.5);\n            transition.setToValue(1);\n            transition.setInterpolator(Interpolator.EASE_IN);\n            menu.getChildren().remove(subMenu);\n            transition.play();\n        }else{\n            final FadeTransition transition = new FadeTransition(Duration.millis(500), menu);\n            transition.setFromValue(0.5);\n            transition.setToValue(1);\n            transition.setInterpolator(Interpolator.EASE_IN);\n            menu.getChildren().add(subMenu);\n            transition.play();\n        }\n    }\n    /**\n     * Remove other menus\n     * @param menu\n     */\n    public void removeOtherMenus(VBox menu){\n        removeOtherMenusImpl(menu);\n    }\n    private void removeOtherMenusImpl(VBox menu) {\n        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n            if(!entry.getKey().equals(menu))\n                entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n\n    @FXML\n    void handleGioHangClick(MouseEvent event) {\n        // Hiển thị menu bán hàng\n        toolsSlider(banHangSubVBox, banHangSubMenuList);\n        removeOtherMenus(banHangSubVBox);\n    }\n\n    @FXML\n    void handleQuanLyClick(MouseEvent event) {\n        toolsSlider(quanLySubVBox,quanLySubMenuList);\n        removeOtherMenus(quanLySubVBox);\n    }\n\n    @FXML\n    void handleThongKeClick(MouseEvent event) {\n        toolsSlider(thongKeSubVBox,thongKeSubMenuList);\n        removeOtherMenus(thongKeSubVBox);\n    }\n\n    @FXML\n    void handleTimKiemClick(MouseEvent event) {\n        // Hiển thị menu tìm kiếm\n        toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n        removeOtherMenus(timKiemSubVBox);\n    }\n\n    @FXML\n    void timKiem(MouseEvent event) {\n\n        String maSanPham = txt_maSP.getText();\n        App.maTraCuu = maSanPham;\n        SanPham sp = new SanPham_dao().read(maSanPham);\n        lb_maSP.setText(sp.getMaSP());\n        lb_tenSP.setText(sp.getTenSP());\n        lb_ncc.setText(sp.getNhaCC());\n        lb_slt.setText(String.valueOf(sp.getSoLuongTon()));\n        lb_giaNhap.setText(String.valueOf(sp.getGiaNhap()));\n        lb_giaBan.setText(String.valueOf(sp.getGiaBan()));\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\n        lb_nsx.setText(sp.getNgaySX().format(formatter));\n        lb_hsd.setText(sp.getHanSD().format(formatter));\n        lb_tgcn.setText(sp.getThoiGianCapNhat().format(formatter));\n        lb_loaiHang.setText(sp.getLoaiHang().toString());\n        highlightMatchingRow(maSanPham);\n    }\n...\n\n    private void initializeComboBox() {\n        ObservableList<String> list = FXCollections.observableArrayList(\n                \"Sản phẩm\", \"Tài khoản\", \"Hoá đơn\", \"Phiếu nhập\", \"Nhân viên\", \"Khách hàng\"\n        );\n        cbb_GiaoDien.setItems(list);\n        cbb_GiaoDien.setValue(\"Sản phẩm\");\n        setupComboBoxHandler();\n    }\n\n    private void setupComboBoxHandler() {\n        cbb_GiaoDien.setOnAction(event -> {\n            String selectedValue = cbb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Sản phẩm\")) {\n                return;\n            }\n\n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n\n                loadFXML(\"/fxml/\" + fxmlFile + \".fxml\");\n\n            } catch (Exception e) {\n                showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n                cbb_GiaoDien.setValue(\"Sản phẩm\");\n            }\n        });\n    }\n\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) cbb_GiaoDien.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n\n    private void showError(String title, String content) {\n        Alert alert = new Alert(Alert.AlertType.ERROR);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n\n    private void initializeTableColumns() {\n        // Cột STT\n        cl_txt.setCellFactory(col -> new TableCell<SanPham, String>() {\n            @Override\n            protected void updateItem(String item, boolean empty) {\n                super.updateItem(item, empty);\n                if (empty) {\n                    setText(null);\n                } else {\n                    setText(String.valueOf(getIndex() + 1));\n                }\n            }\n        });\n...\n\n    private void loadTableData() {\n        try {\n            SanPham_dao sanPhamDao = new SanPham_dao();\n            List<SanPham> dssp = sanPhamDao.readAll();\n            ObservableList<SanPham> data = FXCollections.observableArrayList(dssp);\n            tableSanPham.setItems(data);\n        } catch (Exception e) {\n            e.printStackTrace();\n            Alert alert = new Alert(Alert.AlertType.ERROR);\n            alert.setTitle(\"Lỗi\");\n            alert.setHeaderText(\"Lỗi khi tải dữ liệu\");\n            alert.setContentText(\"Đã xảy ra lỗi khi tải dữ liệu. Vui lòng thử lại sau.\");\n            alert.showAndWait();\n        }\n    }\n\n    private void setupTableClickEvent() {\n        tableSanPham.setOnMouseClicked(event -> {\n            SanPham selectedSanPham = tableSanPham.getSelectionModel().getSelectedItem();\n            if (selectedSanPham != null) {\n                updateLabels(selectedSanPham);\n            }\n        });\n    }\n...\n\n    @FXML\n    void toQLHoaDon(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyHoaDon_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý hóa đơn\");\n        }\n    }\n\n    @FXML\n    void toQLKhachHang(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyKhachHang_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý khách hàng\");\n        }\n    }\n\n    @FXML\n    void toQLNhanVien(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyNhanVien_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý nhân viên\");\n        }\n    }\n\n    @FXML\n    void toQLPhieuNhap(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyPhieuNhap_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý phiếu nhập\");\n        }\n    }\n\n    @FXML\n    void toQLSanPham(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLySanPham_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý sản phẩm\");\n        }\n    }\n\n    @FXML\n    void toQLTaiKhoan(MouseEvent event) {\n        try {\n            App.setRoot(\"QuanLyTaiKhoan_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý tài khoản\");\n        }\n    }\n\n    @FXML\n    void toTKDoanhThu(MouseEvent event) {\n        try {\n            App.setRoot(\"ThongKeDoanhThu_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê doanh thu\");\n        }\n    }\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            App.setRoot(\"ThongKeSanPham_gui\");\n        } catch (IOException e) {\n            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê sản phẩm\");\n        }\n    }\n\n}...\nPath: src/main/java/iuh/fit/controller/TraCuuKhachHang_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Khách hàng\")) {\n                return;\n            }\n            \n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n                \n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/\" + fxmlFile + \".fxml\"));\n                Scene scene = new Scene(loader.load());\n                Stage stage = (Stage) ccb_GiaoDien.getScene().getWindow();\n                stage.setScene(scene);\n                stage.show();\n...\nPath: src/main/java/iuh/fit/controller/TraCuuNhanVien_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Nhân viên\")) {\n                return;\n            }\n\n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Tài khoản\" -> \"TraCuuTaiKhoan_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n\n                loadFXML(\"/fxml/\" + fxmlFile + \".fxml\");\n\n            } catch (Exception e) {\n                showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n                ccb_GiaoDien.setValue(\"Nhân viên\");\n            }\n        });\n    }\n...\nPath: src/main/java/iuh/fit/controller/TraCuuTaiKhoan_controller.java\n...\n\n    private void setupComboBoxHandler() {\n        ccb_GiaoDien.setOnAction(event -> {\n            String selectedValue = ccb_GiaoDien.getValue();\n            if (selectedValue.equals(\"Tài khoản\")) {\n                return;\n            }\n\n            try {\n                String fxmlFile = switch (selectedValue) {\n                    case \"Sản phẩm\" -> \"TraCuu_gui\";\n                    case \"Hoá đơn\" -> \"TraCuuHoaDon_gui\";\n                    case \"Phiếu nhập\" -> \"TraCuuPhieuNhap_gui\";\n                    case \"Nhân viên\" -> \"TraCuuNhanVien_gui\";\n                    case \"Khách hàng\" -> \"TraCuuKhachHang_gui\";\n                    default -> throw new IllegalArgumentException(\"Unexpected value: \" + selectedValue);\n                };\n\n                loadFXML(\"/fxml/\" + fxmlFile + \".fxml\");\n\n            } catch (Exception e) {\n                showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Tra cứu \" + selectedValue.toLowerCase());\n                ccb_GiaoDien.setValue(\"Tài khoản\");\n            }\n        });\n    }\n...\n","isError":false,"requestId":""}},"ab9963f7-03b8-4445-b686-432ec587e0f2;toolu_vrtx_01Ee73mSHUCgVhdgY4CGRg6g":{"phase":5,"result":{"text":"Successfully edited the file src/main/java/iuh/fit/controller/TraCuu_controller.java.\nResult for str_replace_entries[0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n   508\t        lb_tgcn.setText(sp.getThoiGianCapNhat().format(formatter));\n   509\t        lb_loaiHang.setText(sp.getLoaiHang().toString());\n   510\t    }\n   511\t\n   512\t    @FXML\n   513\t    void toQLHoaDon(MouseEvent event) {\n   514\t        try {\n   515\t            loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n   516\t        } catch (Exception e) {\n   517\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý hóa đơn\");\n   518\t        }\n   519\t    }\n   520\t\n   521\t    @FXML\n   522\t    void toQLKhachHang(MouseEvent event) {\n   523\t        try {\n   524\t            loadFXML(\"/fxml/QL_KhachHang_gui.fxml\");\n   525\t        } catch (Exception e) {\n   526\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý khách hàng\");\n   527\t        }\n   528\t    }\n   529\t\n   530\t    @FXML\n   531\t    void toQLNhanVien(MouseEvent event) {\n   532\t        try {\n   533\t            loadFXML(\"/fxml/QL_NhanVien_gui.fxml\");\n   534\t        } catch (Exception e) {\n   535\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý nhân viên\");\n   536\t        }\n   537\t    }\n   538\t\n   539\t    @FXML\n   540\t    void toQLPhieuNhap(MouseEvent event) {\n   541\t        try {\n   542\t            loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n   543\t        } catch (Exception e) {\n   544\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý phiếu nhập\");\n   545\t        }\n   546\t    }\n   547\t\n   548\t    @FXML\n   549\t    void toQLSanPham(MouseEvent event) {\n   550\t        try {\n   551\t            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n   552\t        } catch (Exception e) {\n   553\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý sản phẩm\");\n   554\t        }\n   555\t    }\n   556\t\n   557\t    @FXML\n   558\t    void toQLTaiKhoan(MouseEvent event) {\n   559\t        try {\n   560\t            loadFXML(\"/fxml/QL_TaiKhoan_gui.fxml\");\n   561\t        } catch (Exception e) {\n   562\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Quản lý tài khoản\");\n   563\t        }\n   564\t    }\n   565\t\n   566\t    @FXML\n   567\t    void toTKDoanhThu(MouseEvent event) {\n   568\t        try {\n   569\t            loadFXML(\"/fxml/ThongKeDoanhThu_gui.fxml\");\n   570\t        } catch (Exception e) {\n   571\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê doanh thu\");\n   572\t        }\n   573\t    }\n   574\t\n   575\t    @FXML\n   576\t    void toTKSanPham(MouseEvent event) {\n   577\t        try {\n   578\t            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n   579\t        } catch (Exception e) {\n   580\t            showError(\"Lỗi chuyển giao diện\", \"Không thể mở giao diện Thống kê sản phẩm\");\n   581\t        }\n   582\t    }\n   583\t\n   584\t}\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","isError":false,"requestId":""}},"eef05ad1-81e3-4730-831a-5c9796639db8;toolu_vrtx_015nEx5CbfneZpp3HY8Yr9T3":{"phase":5,"result":{"text":"Here's the result of running `cat -n` on src/main/java/iuh/fit/controller/BanHang_controller.java:\n   442\t    @FXML\n   443\t    void handleTimKiemClick(MouseEvent event) {\n   444\t        try {\n   445\t            // Chuyển đến giao diện TraCuu_gui.fxml\n   446\t            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/TraCuu_gui.fxml\"));\n   447\t            Parent root = loader.load();\n   448\t            Scene scene = new Scene(root);\n   449\t\n   450\t            // Lấy stage hiện tại\n   451\t            Stage stage = (Stage) p_gioHang.getScene().getWindow();\n   452\t\n   453\t            // Thiết lập scene mới\n   454\t            stage.setScene(scene);\n   455\t            stage.setTitle(\"Tra cứu sản phẩm\");\n   456\t\n   457\t            // Hiển thị stage\n   458\t            stage.show();\n   459\t\n   460\t            System.out.println(\"Chuyển đến giao diện tra cứu thành công\");\n   461\t        } catch (Exception e) {\n   462\t            e.printStackTrace();\n   463\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu: \" + e.getMessage());\n   464\t\n   465\t            // Nếu không thể mở giao diện tra cứu, hiển thị giao diện tìm kiếm trên giao diện hiện tại\n   466\t            toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n   467\t            removeOtherMenus(timKiemSubVBox);\n   468\t\n   469\t            // Hiển thị giao diện tìm kiếm\n   470\t            showSearchInterface();\n   471\t        }\n   472\t    }\n   473\t\n   474\t    @FXML\n   475\t    void toQLHoaDon(MouseEvent event) {\n   476\t        try {\n   477\t            // Chuyển đến giao diện quản lý hóa đơn\n   478\t            loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n   479\t        } catch (Exception e) {\n   480\t            e.printStackTrace();\n   481\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý hóa đơn!\");\n   482\t        }\n   483\t    }\n   484\t\n   485\t    @FXML\n   486\t    void toQLKhachHang(MouseEvent event) {\n   487\t        try {\n   488\t            // Chuyển đến giao diện quản lý khách hàng\n   489\t            loadFXML(\"/fxml/QL_KhachHang_gui.fxml\");\n   490\t        } catch (Exception e) {\n   491\t            e.printStackTrace();\n   492\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý khách hàng!\");\n   493\t        }\n   494\t    }\n   495\t\n   496\t    @FXML\n   497\t    void toQLNhanVien(MouseEvent event) {\n   498\t        try {\n   499\t            // Chuyển đến giao diện quản lý nhân viên\n   500\t            loadFXML(\"/fxml/QL_NhanVien_gui.fxml\");\n   501\t        } catch (Exception e) {\n   502\t            e.printStackTrace();\n   503\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý nhân viên!\");\n   504\t        }\n   505\t    }\n   506\t\n   507\t    @FXML\n   508\t    void toQLPhieuNhap(MouseEvent event) {\n   509\t        try {\n   510\t            // Chuyển đến giao diện quản lý phiếu nhập\n   511\t            loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n   512\t        } catch (Exception e) {\n   513\t            e.printStackTrace();\n   514\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n   515\t        }\n   516\t    }\n   517\t\n   518\t    @FXML\n   519\t    void toQLSanPham(MouseEvent event) {\n   520\t        try {\n   521\t            // Chuyển đến giao diện quản lý sản phẩm\n   522\t            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n   523\t        } catch (Exception e) {\n   524\t            e.printStackTrace();\n   525\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n   526\t        }\n   527\t    }\n   528\t\n   529\t    @FXML\n   530\t    void toQLTaiKhoan(MouseEvent event) {\n   531\t        try {\n   532\t            // Chuyển đến giao diện quản lý tài khoản\n   533\t            loadFXML(\"/fxml/QL_TaiKhoan_gui.fxml\");\n   534\t        } catch (Exception e) {\n   535\t            e.printStackTrace();\n   536\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý tài khoản!\");\n   537\t        }\n   538\t    }\n   539\t\n   540\t    @FXML\n   541\t    void toTKDoanhThu(MouseEvent event) {\n   542\t        try {\n   543\t            // Chuyển đến giao diện thống kê doanh thu\n   544\t            loadFXML(\"/fxml/ThongKeDoanhThu_gui.fxml\");\n   545\t        } catch (Exception e) {\n   546\t            e.printStackTrace();\n   547\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê doanh thu!\");\n   548\t        }\n   549\t    }\n   550\t\n   551\t    @FXML\n   552\t    void toTKSanPham(MouseEvent event) {\n   553\t        try {\n   554\t            // Chuyển đến giao diện thống kê sản phẩm\n   555\t            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n   556\t        } catch (Exception e) {\n   557\t            e.printStackTrace();\n   558\t            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n   559\t        }\n   560\t    }\nTotal lines in file: 1696\n","isError":false,"requestId":""}},"8a1d023e-de8b-4513-bf16-11b9f00ab84f;toolu_vrtx_01UsqSoDLbZU3wohte6hUW7a":{"phase":5,"result":{"text":"Here's the result of running `cat -n` on src/main/java/iuh/fit/controller/BanHang_controller.java:\n  1680\t            } else {\n  1681\t                // Tiền thừa âm - màu đỏ\n  1682\t                lb_tienThua.setText(tienThuaFormatted);\n  1683\t                lb_tienThua.setStyle(\"-fx-font-weight: bold; -fx-text-fill: #FF0000;\");\n  1684\t\n  1685\t                // Nếu tiền khách trả không đủ, không cho phép thanh toán\n  1686\t                btn_thanhToan.setDisable(true);\n  1687\t            }\n  1688\t        } catch (NumberFormatException e) {\n  1689\t            // Xử lý lỗi chuyển đổi số\n  1690\t            lb_tienThua.setText(\"0 VNĐ\");\nTotal lines in file: 1696\n","isError":false,"requestId":""}},"57b118c9-72f4-4f6b-ba23-26572b5605ac;toolu_vrtx_01FPcZi1jH4gKqBb4XBM4AMk":{"phase":5,"result":{"text":"The following code sections were retrieved:\nPath: src/main/java/iuh/fit/controller/BanHang_controller.java\n...\n\nimport iuh.fit.App;\nimport iuh.fit.daos.CaLam_dao;\nimport iuh.fit.daos.ChiTietHoaDon_SanPham_dao;\nimport iuh.fit.daos.HoaDon_dao;\nimport iuh.fit.daos.KhachHang_dao;\nimport iuh.fit.daos.NhanVien_dao;\nimport iuh.fit.daos.SanPham_dao;\nimport iuh.fit.entities.*;\nimport iuh.fit.enums.PhuongThucThanhToan;\nimport javafx.animation.FadeTransition;\nimport javafx.animation.Interpolator;\nimport javafx.animation.KeyFrame;\nimport javafx.animation.Timeline;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.event.ActionEvent;\nimport javafx.event.EventHandler;\nimport javafx.fxml.FXML;\nimport javafx.fxml.FXMLLoader;\nimport javafx.fxml.Initializable;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.scene.control.*;\nimport javafx.scene.control.Alert.AlertType;\nimport javafx.scene.control.cell.PropertyValueFactory;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.input.MouseEvent;\nimport javafx.scene.input.KeyEvent;\nimport javafx.scene.layout.AnchorPane;\nimport javafx.scene.layout.GridPane;\nimport javafx.scene.layout.Pane;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\nimport javafx.util.Duration;\n\n\npublic class BanHang_controller implements Initializable {\n\n    @FXML\n    private VBox banHangSubMenuList;\n\n    @FXML\n    private VBox banHangSubVBox;\n\n    @FXML\n    private Button btn_themSP;\n\n    @FXML\n    private ImageView img_HoaDon;\n\n    @FXML\n    private ImageView img_gioHang;\n\n    @FXML\n    private ImageView img_hoaDon;\n\n    @FXML\n    private ImageView img_nhanVien;\n\n    @FXML\n    private ImageView img_phieuNhap;\n\n    @FXML\n    private ImageView img_quanLy;\n\n    @FXML\n    private ImageView img_sanPham;\n\n    @FXML\n    private ImageView img_taiKhoan;\n\n    @FXML\n    private ImageView img_thongKe;\n\n    @FXML\n    private ImageView img_thongKeDoanhThu;\n\n    @FXML\n    private ImageView img_thongKeSanPham;\n\n    @FXML\n    private ImageView img_timKiem;\n\n    @FXML\n    private Label lb_HoaDon;\n\n    @FXML\n    private Label lb_gioHang;\n\n    @FXML\n    private Label lb_hoaDon;\n...\n\n    @FXML\n    private RadioButton rb_chuyenKhoan;\n\n    @FXML\n    private RadioButton rb_the;\n\n    @FXML\n    private ToggleGroup phuongThucTT;\n\n    @FXML\n    private Label lb_thongKe;\n\n    @FXML\n    private Label lb_thongKeDoanhThu;\n\n    @FXML\n    private Label lb_thongKeSanPham;\n\n    @FXML\n    private Label lb_timKiem;\n\n    @FXML\n    private Pane p_HoaDon;\n\n    @FXML\n    private Pane p_gioHang;\n\n    @FXML\n    private Pane p_hoaDon;\n\n    @FXML\n    private Pane p_nhanVien;\n\n    @FXML\n    private Pane p_phieuNhap;\n\n    @FXML\n    private Pane p_quanLy;\n\n    @FXML\n    private Pane p_sanPham;\n\n    @FXML\n    private Pane p_taiKhoan;\n\n    @FXML\n    private Pane p_thongKe;\n\n    @FXML\n    private Pane p_thongKeDoanhThu;\n\n    @FXML\n    private Pane p_thongKeSanPham;\n\n    @FXML\n    private Pane p_timKiem;\n\n    @FXML\n    private VBox quanLySubMenuList;\n\n    @FXML\n    private VBox quanLySubVBox;\n...\n\n    @FXML\n    private Label lb_tenNV;\n    @FXML\n    private ComboBox<?> cb_nganHang;\n\n    @FXML\n    private GridPane grid_chuyenKhoan;\n\n    @FXML\n    private GridPane grid_the;\n\n    @FXML\n    private GridPane grid_tienMat;\n\n    Map<VBox,VBox> map = new HashMap<VBox,VBox>();\n\n    // DAO để truy xuất dữ liệu\n    private SanPham_dao sanPhamDao;\n    private HoaDon_dao hoaDonDao;\n    private KhachHang_dao khachHangDao;\n    private ChiTietHoaDon_SanPham_dao chiTietHoaDonDao;\n    private CaLam_dao caLamDao;\n    private NhanVien_dao nhanVienDao;\n\n    // Danh sách các sản phẩm trong giỏ hàng\n    private ObservableList<SanPham> cartItems;\n\n    // Số lượng sản phẩm trong giỏ hàng\n    private Map<String, Integer> productQuantities = new HashMap<>();\n\n    public void initialize(URL location, ResourceBundle resources) {\n        // Khởi tạo các DAO\n        sanPhamDao = new SanPham_dao();\n        hoaDonDao = new HoaDon_dao();\n        khachHangDao = new KhachHang_dao();\n        chiTietHoaDonDao = new ChiTietHoaDon_SanPham_dao();\n        caLamDao = new CaLam_dao();\n        nhanVienDao = new NhanVien_dao();\n\n        // Khởi tạo các menu\n        addMenusToMap();\n\n        // Hiển thị ngày và thời gian hiện tại\n        displayCurrentDateTime();\n\n        // Khởi tạo bảng giỏ hàng\n        initializeTable();\n\n        // Khởi tạo thông tin hóa đơn\n        initializeInvoiceInfo();\n\n        // Khởi tạo tổng tiền\n        updateTotalAmount();\n\n        // Khởi tạo thông tin nhân viên\n        initializeNhanVien();\n        System.out.println(App.user);\n\n        // Thiết lập sự kiện cho các thành phần trong Pane thông tin đơn hàng\n        setupInvoiceEvents();\n    }\n\n    /**\n     * Add Menus to map\n     */\n    public void addMenusToMap() {\n        addMenusToMapImpl();\n    }\n\n    private void addMenusToMapImpl() {\n        map.put(banHangSubVBox, banHangSubMenuList);\n        map.put(quanLySubVBox, quanLySubMenuList);\n        map.put(timKiemSubVBox, timKiemSubMenuList);\n        map.put(thongKeSubVBox,thongKeSubMenuList);\n\n        /**\n         * Remove the components from VBox on load of stage\n         */\n        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n            entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n    /**\n     * Menu slider\n     * @param menu\n     * @param subMenu\n     */\n    public void toolsSlider(VBox menu,VBox subMenu){\n        toolsSliderImpl(menu,subMenu);\n    }\n...\n    private void removeOtherMenusImpl(VBox menu) {\n        for (Map.Entry<VBox,VBox> entry : map.entrySet()) {\n            if(!entry.getKey().equals(menu))\n                entry.getKey().getChildren().remove(entry.getValue());\n        }\n    }\n\n    @FXML\n    void handleGioHangClick(MouseEvent event) {\n        try {\n            // Hiển thị menu bán hàng\n            if (banHangSubVBox != null && banHangSubMenuList != null) {\n                toolsSlider(banHangSubVBox, banHangSubMenuList);\n                removeOtherMenus(banHangSubVBox);\n            }\n\n            // Hiển thị giao diện bán hàng chính\n            showMainSalesInterface();\n\n            // Làm mới giỏ hàng\n            updateTotalAmount();\n        } catch (Exception e) {\n            System.err.println(\"Lỗi trong handleGioHangClick: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n\n    @FXML\n    void handleQuanLyClick(MouseEvent event) {\n        toolsSlider(quanLySubVBox,quanLySubMenuList);\n        removeOtherMenus(quanLySubVBox);\n    }\n\n    @FXML\n    void handleThongKeClick(MouseEvent event) {\n        toolsSlider(thongKeSubVBox,thongKeSubMenuList);\n        removeOtherMenus(thongKeSubVBox);\n    }\n\n    @FXML\n    void handleTimKiemClick(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện TraCuu_gui.fxml\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/TraCuu_gui.fxml\"));\n            Parent root = loader.load();\n            Scene scene = new Scene(root);\n\n            // Lấy stage hiện tại\n            Stage stage = (Stage) p_gioHang.getScene().getWindow();\n\n            // Thiết lập scene mới\n            stage.setScene(scene);\n            stage.setTitle(\"Tra cứu sản phẩm\");\n\n            // Hiển thị stage\n            stage.show();\n\n            System.out.println(\"Chuyển đến giao diện tra cứu thành công\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu: \" + e.getMessage());\n\n            // Nếu không thể mở giao diện tra cứu, hiển thị giao diện tìm kiếm trên giao diện hiện tại\n            toolsSlider(timKiemSubVBox, timKiemSubMenuList);\n            removeOtherMenus(timKiemSubVBox);\n\n            // Hiển thị giao diện tìm kiếm\n            showSearchInterface();\n        }\n    }\n    @FXML\n    void themSanPham(MouseEvent event) {\n        // Lấy mã sản phẩm và số lượng từ các trường nhập liệu\n        String maSP = txt_nhapMa.getText().trim();\n        String soLuongStr = txt_nhapSL.getText().trim();\n\n        // Kiểm tra dữ liệu nhập vào\n        if (maSP.isEmpty()) {\n            showAlert(AlertType.WARNING, \"Thông báo\", \"Vui lòng nhập mã sản phẩm!\");\n            txt_nhapMa.requestFocus();\n            return;\n        }\n\n        if (soLuongStr.isEmpty()) {\n            showAlert(AlertType.WARNING, \"Thông báo\", \"Vui lòng nhập số lượng!\");\n            txt_nhapSL.requestFocus();\n            return;\n        }\n\n        try {\n            int soLuong = Integer.parseInt(soLuongStr);\n            if (soLuong <= 0) {\n                showAlert(AlertType.WARNING, \"Thông báo\", \"Số lượng phải lớn hơn 0!\");\n                txt_nhapSL.requestFocus();\n                return;\n            }\n\n            // Tìm kiếm sản phẩm theo mã và thêm vào giỏ hàng\n            addProductToCart(maSP, soLuong);\n\n            // Xóa dữ liệu trong các trường nhập liệu\n            txt_nhapMa.clear();\n            txt_nhapSL.clear();\n            txt_nhapMa.requestFocus();\n\n        } catch (NumberFormatException e) {\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Số lượng phải là số nguyên!\");\n            txt_nhapSL.requestFocus();\n        }\n    }\n\n    @FXML\n    void toQLHoaDon(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý hóa đơn\n            loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý hóa đơn!\");\n        }\n    }\n\n    @FXML\n    void toQLKhachHang(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý khách hàng\n            loadFXML(\"/fxml/QL_KhachHang_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý khách hàng!\");\n        }\n    }\n\n    @FXML\n    void toQLNhanVien(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý nhân viên\n            loadFXML(\"/fxml/QL_NhanVien_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý nhân viên!\");\n        }\n    }\n\n    @FXML\n    void toQLPhieuNhap(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý phiếu nhập\n            loadFXML(\"/fxml/QL_PhieuNhap_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý phiếu nhập!\");\n        }\n    }\n\n    @FXML\n    void toQLSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý sản phẩm\n            loadFXML(\"/fxml/QL_SanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý sản phẩm!\");\n        }\n    }\n\n    @FXML\n    void toQLTaiKhoan(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý tài khoản\n            loadFXML(\"/fxml/QL_TaiKhoan_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý tài khoản!\");\n        }\n    }\n\n    @FXML\n    void toTKDoanhThu(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê doanh thu\n            loadFXML(\"/fxml/ThongKeDoanhThu_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê doanh thu!\");\n        }\n    }\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê sản phẩm\n            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n        }\n    }\n...\n\n            // Khởi tạo danh sách giỏ hàng trống\n            cartItems = FXCollections.observableArrayList();\n            if (tableView != null) {\n                tableView.setItems(cartItems);\n\n                // Thêm sự kiện nhấp đúp vào bảng\n                tableView.setOnMouseClicked(this::handleSearchResultDoubleClick);\n\n                // Thêm context menu cho bảng\n                setupTableContextMenu();\n            } else {\n                System.out.println(\"TableView is null. Check your FXML file.\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.out.println(\"Error initializing table: \" + e.getMessage());\n        }\n    }\n...\n\n    /**\n     * Khởi tạo dữ liệu tìm kiếm\n     */\n    private void initializeSearchData() {\n        try {\n            // Tạo danh sách sản phẩm cho tìm kiếm\n            ObservableList<SanPham> searchResults = FXCollections.observableArrayList();\n\n            // Lấy tất cả sản phẩm từ database\n            List<SanPham> allProducts = sanPhamDao.readAll();\n            searchResults.addAll(allProducts);\n\n            // Hiển thị kết quả tìm kiếm trong bảng\n            // Sử dụng bảng hiện tại để hiển thị kết quả tìm kiếm\n            tableView.setItems(searchResults);\n\n\n            // Thêm sự kiện cho trường tìm kiếm\n            setupSearchField();\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(AlertType.ERROR, \"Lỗi\", \"Không thể khởi tạo dữ liệu tìm kiếm: \" + e.getMessage());\n        }\n    }\n...\n\n    /**\n     * Hiển thị thông báo\n     */\n    private void showAlert(AlertType alertType, String title, String content) {\n        Alert alert = new Alert(alertType);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n\n    /**\n     * Load FXML file\n     */\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n\n    @FXML\n    private void togglePaymentMethod() {\n        // Show/hide appropriate payment fields based on selection\n        boolean isCashSelected = rb_tienMat.isSelected();\n        boolean isTransferSelected = rb_chuyenKhoan.isSelected();\n        boolean isCardSelected = rb_the.isSelected();\n\n        grid_tienMat.setVisible(isCashSelected);\n        grid_tienMat.setManaged(isCashSelected);\n\n        grid_chuyenKhoan.setVisible(isTransferSelected);\n        grid_chuyenKhoan.setManaged(isTransferSelected);\n\n        grid_the.setVisible(isCardSelected);\n        grid_the.setManaged(isCardSelected);\n    }\n...\nPath: src/main/java/iuh/fit/controller/QL_KhachHang_controller.java\n...\n\n    @FXML\n    void handleQuanLyClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleThongKeClick(MouseEvent event) {\n\n    }\n\n    @FXML\n    void handleTimKiemClick(MouseEvent event) {\n        try {\n            loadFXML(\"/fxml/TraCuu_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tra cứu!\");\n        }\n    }\n\n\n    @FXML\n    void toQLHoaDon(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện quản lý hóa đơn\n            loadFXML(\"/fxml/QL_HoaDon_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện quản lý hóa đơn!\");\n        }\n    }\n...\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê sản phẩm\n            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n        }\n    }\n    private void showAlert(Alert.AlertType alertType, String title, String content) {\n        Alert alert = new Alert(alertType);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n\n    @FXML\n    void moGiaoDienTimKiemKH(MouseEvent event) {\n        try{\n            loadFXML(\"/fxml/TraCuuKhachHang_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện tìm kiếm khách hàng!\");\n        }\n    }\n...\n\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n...\nPath: src/main/java/iuh/fit/controller/QL_PhieuNhap_controller.java\n...\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n    private void loadTableData() {\n        try {\n            // Tạo DAO object\n            PhieuNhapHang_dao pNhapDAO = new PhieuNhapHang_dao();\n\n            // Xóa dữ liệu cũ trong table\n            table_PNhap.getItems().clear();\n...\nPath: src/main/java/iuh/fit/controller/QL_SanPham_controller.java\n...\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê sản phẩm\n            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n        }\n    }\n    private void showAlert(Alert.AlertType alertType, String title, String content) {\n        Alert alert = new Alert(alertType);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n\n\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n...\nPath: src/main/java/iuh/fit/controller/QL_TaiKoan_controller.java\n...\n\n    @FXML\n    void xoaNV(MouseEvent event) {\n\n    }\n\n    @FXML\n    void xoaTrang(MouseEvent event) {\n\n    }\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n...\nPath: src/main/java/iuh/fit/controller/QL_HoaDon_controller.java\n...\n\n    @FXML\n    void toTKSanPham(MouseEvent event) {\n        try {\n            // Chuyển đến giao diện thống kê sản phẩm\n            loadFXML(\"/fxml/ThongKeSanPham_gui.fxml\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(Alert.AlertType.ERROR, \"Lỗi\", \"Không thể mở giao diện thống kê sản phẩm!\");\n        }\n    }\n    private void showAlert(Alert.AlertType alertType, String title, String content) {\n        Alert alert = new Alert(alertType);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(content);\n        alert.showAndWait();\n    }\n    private void loadFXML(String fxmlPath) throws Exception {\n        Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));\n        Scene scene = new Scene(root);\n        Stage stage = (Stage) p_gioHang.getScene().getWindow();\n        stage.setScene(scene);\n        stage.show();\n    }\n...\n","isError":false,"requestId":""}}},"draftExchange":{"request_message":"","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph"}]},"status":"draft"},"requestIds":[],"isPinned":false,"isShareable":true,"extraData":{"isAgentConversation":true,"hasAgentOnboarded":true,"hasDirtyEdits":false,"baselineTimestamp":0},"personaType":0}},"agentExecutionMode":"manual","isAgentEditsCollapsed":true}" />
      </map>
    </option>
  </component>
</project>